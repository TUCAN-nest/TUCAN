# Generated from tucan.g4 by ANTLR 4.11.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,120,1431,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,1,0,1,0,3,0,249,8,0,1,1,1,1,1,1,1,
        2,1,2,3,2,256,8,2,1,2,3,2,259,8,2,1,2,3,2,262,8,2,1,2,3,2,265,8,
        2,1,2,3,2,268,8,2,1,2,3,2,271,8,2,1,2,3,2,274,8,2,1,2,3,2,277,8,
        2,1,2,3,2,280,8,2,1,2,3,2,283,8,2,1,2,3,2,286,8,2,1,2,3,2,289,8,
        2,1,2,3,2,292,8,2,1,2,3,2,295,8,2,1,2,3,2,298,8,2,1,2,3,2,301,8,
        2,1,2,3,2,304,8,2,1,2,3,2,307,8,2,1,2,3,2,310,8,2,1,2,3,2,313,8,
        2,1,2,3,2,316,8,2,1,2,3,2,319,8,2,1,2,3,2,322,8,2,1,2,3,2,325,8,
        2,1,2,3,2,328,8,2,1,2,3,2,331,8,2,1,2,3,2,334,8,2,1,2,3,2,337,8,
        2,1,2,3,2,340,8,2,1,2,3,2,343,8,2,1,2,3,2,346,8,2,1,2,3,2,349,8,
        2,1,2,3,2,352,8,2,1,2,3,2,355,8,2,1,2,3,2,358,8,2,1,2,3,2,361,8,
        2,1,2,3,2,364,8,2,1,2,3,2,367,8,2,1,2,3,2,370,8,2,1,2,3,2,373,8,
        2,1,2,3,2,376,8,2,1,2,3,2,379,8,2,1,2,3,2,382,8,2,1,2,3,2,385,8,
        2,1,2,3,2,388,8,2,1,2,3,2,391,8,2,1,2,3,2,394,8,2,1,2,3,2,397,8,
        2,1,2,3,2,400,8,2,1,2,3,2,403,8,2,1,2,3,2,406,8,2,1,2,3,2,409,8,
        2,1,2,3,2,412,8,2,1,2,3,2,415,8,2,1,2,3,2,418,8,2,1,2,3,2,421,8,
        2,1,2,3,2,424,8,2,1,2,3,2,427,8,2,1,2,3,2,430,8,2,1,2,3,2,433,8,
        2,1,2,3,2,436,8,2,1,2,3,2,439,8,2,1,2,3,2,442,8,2,1,2,3,2,445,8,
        2,1,2,3,2,448,8,2,1,2,3,2,451,8,2,1,2,3,2,454,8,2,1,2,3,2,457,8,
        2,1,2,3,2,460,8,2,1,2,3,2,463,8,2,1,2,3,2,466,8,2,1,2,3,2,469,8,
        2,1,2,3,2,472,8,2,1,2,3,2,475,8,2,1,2,3,2,478,8,2,1,2,3,2,481,8,
        2,1,2,3,2,484,8,2,1,2,3,2,487,8,2,1,2,3,2,490,8,2,1,2,3,2,493,8,
        2,1,2,3,2,496,8,2,1,2,3,2,499,8,2,1,2,3,2,502,8,2,1,2,3,2,505,8,
        2,1,2,3,2,508,8,2,1,2,3,2,511,8,2,1,2,3,2,514,8,2,1,2,3,2,517,8,
        2,1,2,3,2,520,8,2,1,2,3,2,523,8,2,1,2,3,2,526,8,2,1,2,3,2,529,8,
        2,1,2,3,2,532,8,2,1,2,3,2,535,8,2,1,2,3,2,538,8,2,1,2,3,2,541,8,
        2,1,2,3,2,544,8,2,1,2,3,2,547,8,2,1,2,3,2,550,8,2,1,2,3,2,553,8,
        2,1,2,3,2,556,8,2,1,2,3,2,559,8,2,1,2,3,2,562,8,2,1,2,3,2,565,8,
        2,1,2,3,2,568,8,2,1,2,3,2,571,8,2,1,2,3,2,574,8,2,1,2,3,2,577,8,
        2,1,2,3,2,580,8,2,1,2,3,2,583,8,2,1,2,3,2,586,8,2,1,2,3,2,589,8,
        2,1,2,3,2,592,8,2,1,2,3,2,595,8,2,1,2,3,2,598,8,2,1,2,3,2,601,8,
        2,1,2,3,2,604,8,2,1,3,3,3,607,8,3,1,3,3,3,610,8,3,1,3,3,3,613,8,
        3,1,3,3,3,616,8,3,1,3,3,3,619,8,3,1,3,3,3,622,8,3,1,3,3,3,625,8,
        3,1,3,3,3,628,8,3,1,3,3,3,631,8,3,1,3,3,3,634,8,3,1,3,3,3,637,8,
        3,1,3,3,3,640,8,3,1,3,3,3,643,8,3,1,3,3,3,646,8,3,1,3,3,3,649,8,
        3,1,3,3,3,652,8,3,1,3,3,3,655,8,3,1,3,3,3,658,8,3,1,3,3,3,661,8,
        3,1,3,3,3,664,8,3,1,3,3,3,667,8,3,1,3,3,3,670,8,3,1,3,3,3,673,8,
        3,1,3,3,3,676,8,3,1,3,3,3,679,8,3,1,3,3,3,682,8,3,1,3,3,3,685,8,
        3,1,3,3,3,688,8,3,1,3,3,3,691,8,3,1,3,3,3,694,8,3,1,3,3,3,697,8,
        3,1,3,3,3,700,8,3,1,3,3,3,703,8,3,1,3,3,3,706,8,3,1,3,3,3,709,8,
        3,1,3,3,3,712,8,3,1,3,3,3,715,8,3,1,3,3,3,718,8,3,1,3,3,3,721,8,
        3,1,3,3,3,724,8,3,1,3,3,3,727,8,3,1,3,3,3,730,8,3,1,3,3,3,733,8,
        3,1,3,3,3,736,8,3,1,3,3,3,739,8,3,1,3,3,3,742,8,3,1,3,3,3,745,8,
        3,1,3,3,3,748,8,3,1,3,3,3,751,8,3,1,3,3,3,754,8,3,1,3,3,3,757,8,
        3,1,3,3,3,760,8,3,1,3,3,3,763,8,3,1,3,3,3,766,8,3,1,3,3,3,769,8,
        3,1,3,3,3,772,8,3,1,3,3,3,775,8,3,1,3,3,3,778,8,3,1,3,3,3,781,8,
        3,1,3,3,3,784,8,3,1,3,3,3,787,8,3,1,3,3,3,790,8,3,1,3,3,3,793,8,
        3,1,3,3,3,796,8,3,1,3,3,3,799,8,3,1,3,3,3,802,8,3,1,3,3,3,805,8,
        3,1,3,3,3,808,8,3,1,3,3,3,811,8,3,1,3,3,3,814,8,3,1,3,3,3,817,8,
        3,1,3,3,3,820,8,3,1,3,3,3,823,8,3,1,3,3,3,826,8,3,1,3,3,3,829,8,
        3,1,3,3,3,832,8,3,1,3,3,3,835,8,3,1,3,3,3,838,8,3,1,3,3,3,841,8,
        3,1,3,3,3,844,8,3,1,3,3,3,847,8,3,1,3,3,3,850,8,3,1,3,3,3,853,8,
        3,1,3,3,3,856,8,3,1,3,3,3,859,8,3,1,3,3,3,862,8,3,1,3,3,3,865,8,
        3,1,3,3,3,868,8,3,1,3,3,3,871,8,3,1,3,3,3,874,8,3,1,3,3,3,877,8,
        3,1,3,3,3,880,8,3,1,3,3,3,883,8,3,1,3,3,3,886,8,3,1,3,3,3,889,8,
        3,1,3,3,3,892,8,3,1,3,3,3,895,8,3,1,3,3,3,898,8,3,1,3,3,3,901,8,
        3,1,3,3,3,904,8,3,1,3,3,3,907,8,3,1,3,3,3,910,8,3,1,3,3,3,913,8,
        3,1,3,3,3,916,8,3,1,3,3,3,919,8,3,1,3,3,3,922,8,3,1,3,3,3,925,8,
        3,1,3,3,3,928,8,3,1,3,3,3,931,8,3,1,3,3,3,934,8,3,1,3,3,3,937,8,
        3,1,3,3,3,940,8,3,1,3,3,3,943,8,3,1,3,3,3,946,8,3,1,3,3,3,949,8,
        3,1,3,3,3,952,8,3,1,3,3,3,955,8,3,1,4,1,4,3,4,959,8,4,1,5,1,5,3,
        5,963,8,5,1,6,1,6,3,6,967,8,6,1,7,1,7,3,7,971,8,7,1,8,1,8,3,8,975,
        8,8,1,9,1,9,3,9,979,8,9,1,10,1,10,3,10,983,8,10,1,11,1,11,3,11,987,
        8,11,1,12,1,12,3,12,991,8,12,1,13,1,13,3,13,995,8,13,1,14,1,14,3,
        14,999,8,14,1,15,1,15,3,15,1003,8,15,1,16,1,16,3,16,1007,8,16,1,
        17,1,17,3,17,1011,8,17,1,18,1,18,3,18,1015,8,18,1,19,1,19,3,19,1019,
        8,19,1,20,1,20,3,20,1023,8,20,1,21,1,21,3,21,1027,8,21,1,22,1,22,
        3,22,1031,8,22,1,23,1,23,3,23,1035,8,23,1,24,1,24,3,24,1039,8,24,
        1,25,1,25,3,25,1043,8,25,1,26,1,26,3,26,1047,8,26,1,27,1,27,3,27,
        1051,8,27,1,28,1,28,3,28,1055,8,28,1,29,1,29,3,29,1059,8,29,1,30,
        1,30,3,30,1063,8,30,1,31,1,31,3,31,1067,8,31,1,32,1,32,3,32,1071,
        8,32,1,33,1,33,3,33,1075,8,33,1,34,1,34,3,34,1079,8,34,1,35,1,35,
        3,35,1083,8,35,1,36,1,36,3,36,1087,8,36,1,37,1,37,3,37,1091,8,37,
        1,38,1,38,3,38,1095,8,38,1,39,1,39,3,39,1099,8,39,1,40,1,40,3,40,
        1103,8,40,1,41,1,41,3,41,1107,8,41,1,42,1,42,3,42,1111,8,42,1,43,
        1,43,3,43,1115,8,43,1,44,1,44,3,44,1119,8,44,1,45,1,45,3,45,1123,
        8,45,1,46,1,46,3,46,1127,8,46,1,47,1,47,3,47,1131,8,47,1,48,1,48,
        3,48,1135,8,48,1,49,1,49,3,49,1139,8,49,1,50,1,50,3,50,1143,8,50,
        1,51,1,51,3,51,1147,8,51,1,52,1,52,3,52,1151,8,52,1,53,1,53,3,53,
        1155,8,53,1,54,1,54,3,54,1159,8,54,1,55,1,55,3,55,1163,8,55,1,56,
        1,56,3,56,1167,8,56,1,57,1,57,3,57,1171,8,57,1,58,1,58,3,58,1175,
        8,58,1,59,1,59,3,59,1179,8,59,1,60,1,60,3,60,1183,8,60,1,61,1,61,
        3,61,1187,8,61,1,62,1,62,3,62,1191,8,62,1,63,1,63,3,63,1195,8,63,
        1,64,1,64,3,64,1199,8,64,1,65,1,65,3,65,1203,8,65,1,66,1,66,3,66,
        1207,8,66,1,67,1,67,3,67,1211,8,67,1,68,1,68,3,68,1215,8,68,1,69,
        1,69,3,69,1219,8,69,1,70,1,70,3,70,1223,8,70,1,71,1,71,3,71,1227,
        8,71,1,72,1,72,3,72,1231,8,72,1,73,1,73,3,73,1235,8,73,1,74,1,74,
        3,74,1239,8,74,1,75,1,75,3,75,1243,8,75,1,76,1,76,3,76,1247,8,76,
        1,77,1,77,3,77,1251,8,77,1,78,1,78,3,78,1255,8,78,1,79,1,79,3,79,
        1259,8,79,1,80,1,80,3,80,1263,8,80,1,81,1,81,3,81,1267,8,81,1,82,
        1,82,3,82,1271,8,82,1,83,1,83,3,83,1275,8,83,1,84,1,84,3,84,1279,
        8,84,1,85,1,85,3,85,1283,8,85,1,86,1,86,3,86,1287,8,86,1,87,1,87,
        3,87,1291,8,87,1,88,1,88,3,88,1295,8,88,1,89,1,89,3,89,1299,8,89,
        1,90,1,90,3,90,1303,8,90,1,91,1,91,3,91,1307,8,91,1,92,1,92,3,92,
        1311,8,92,1,93,1,93,3,93,1315,8,93,1,94,1,94,3,94,1319,8,94,1,95,
        1,95,3,95,1323,8,95,1,96,1,96,3,96,1327,8,96,1,97,1,97,3,97,1331,
        8,97,1,98,1,98,3,98,1335,8,98,1,99,1,99,3,99,1339,8,99,1,100,1,100,
        3,100,1343,8,100,1,101,1,101,3,101,1347,8,101,1,102,1,102,3,102,
        1351,8,102,1,103,1,103,3,103,1355,8,103,1,104,1,104,3,104,1359,8,
        104,1,105,1,105,3,105,1363,8,105,1,106,1,106,3,106,1367,8,106,1,
        107,1,107,3,107,1371,8,107,1,108,1,108,3,108,1375,8,108,1,109,1,
        109,3,109,1379,8,109,1,110,1,110,3,110,1383,8,110,1,111,1,111,3,
        111,1387,8,111,1,112,1,112,3,112,1391,8,112,1,113,1,113,3,113,1395,
        8,113,1,114,1,114,3,114,1399,8,114,1,115,1,115,3,115,1403,8,115,
        1,116,1,116,3,116,1407,8,116,1,117,1,117,3,117,1411,8,117,1,118,
        1,118,3,118,1415,8,118,1,119,1,119,3,119,1419,8,119,1,120,1,120,
        3,120,1423,8,120,1,121,1,121,3,121,1427,8,121,1,122,1,122,1,122,
        0,0,123,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
        42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
        86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,
        122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,
        154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,
        186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,
        218,220,222,224,226,228,230,232,234,236,238,240,242,244,0,1,1,0,
        119,120,1660,0,248,1,0,0,0,2,250,1,0,0,0,4,253,1,0,0,0,6,606,1,0,
        0,0,8,956,1,0,0,0,10,960,1,0,0,0,12,964,1,0,0,0,14,968,1,0,0,0,16,
        972,1,0,0,0,18,976,1,0,0,0,20,980,1,0,0,0,22,984,1,0,0,0,24,988,
        1,0,0,0,26,992,1,0,0,0,28,996,1,0,0,0,30,1000,1,0,0,0,32,1004,1,
        0,0,0,34,1008,1,0,0,0,36,1012,1,0,0,0,38,1016,1,0,0,0,40,1020,1,
        0,0,0,42,1024,1,0,0,0,44,1028,1,0,0,0,46,1032,1,0,0,0,48,1036,1,
        0,0,0,50,1040,1,0,0,0,52,1044,1,0,0,0,54,1048,1,0,0,0,56,1052,1,
        0,0,0,58,1056,1,0,0,0,60,1060,1,0,0,0,62,1064,1,0,0,0,64,1068,1,
        0,0,0,66,1072,1,0,0,0,68,1076,1,0,0,0,70,1080,1,0,0,0,72,1084,1,
        0,0,0,74,1088,1,0,0,0,76,1092,1,0,0,0,78,1096,1,0,0,0,80,1100,1,
        0,0,0,82,1104,1,0,0,0,84,1108,1,0,0,0,86,1112,1,0,0,0,88,1116,1,
        0,0,0,90,1120,1,0,0,0,92,1124,1,0,0,0,94,1128,1,0,0,0,96,1132,1,
        0,0,0,98,1136,1,0,0,0,100,1140,1,0,0,0,102,1144,1,0,0,0,104,1148,
        1,0,0,0,106,1152,1,0,0,0,108,1156,1,0,0,0,110,1160,1,0,0,0,112,1164,
        1,0,0,0,114,1168,1,0,0,0,116,1172,1,0,0,0,118,1176,1,0,0,0,120,1180,
        1,0,0,0,122,1184,1,0,0,0,124,1188,1,0,0,0,126,1192,1,0,0,0,128,1196,
        1,0,0,0,130,1200,1,0,0,0,132,1204,1,0,0,0,134,1208,1,0,0,0,136,1212,
        1,0,0,0,138,1216,1,0,0,0,140,1220,1,0,0,0,142,1224,1,0,0,0,144,1228,
        1,0,0,0,146,1232,1,0,0,0,148,1236,1,0,0,0,150,1240,1,0,0,0,152,1244,
        1,0,0,0,154,1248,1,0,0,0,156,1252,1,0,0,0,158,1256,1,0,0,0,160,1260,
        1,0,0,0,162,1264,1,0,0,0,164,1268,1,0,0,0,166,1272,1,0,0,0,168,1276,
        1,0,0,0,170,1280,1,0,0,0,172,1284,1,0,0,0,174,1288,1,0,0,0,176,1292,
        1,0,0,0,178,1296,1,0,0,0,180,1300,1,0,0,0,182,1304,1,0,0,0,184,1308,
        1,0,0,0,186,1312,1,0,0,0,188,1316,1,0,0,0,190,1320,1,0,0,0,192,1324,
        1,0,0,0,194,1328,1,0,0,0,196,1332,1,0,0,0,198,1336,1,0,0,0,200,1340,
        1,0,0,0,202,1344,1,0,0,0,204,1348,1,0,0,0,206,1352,1,0,0,0,208,1356,
        1,0,0,0,210,1360,1,0,0,0,212,1364,1,0,0,0,214,1368,1,0,0,0,216,1372,
        1,0,0,0,218,1376,1,0,0,0,220,1380,1,0,0,0,222,1384,1,0,0,0,224,1388,
        1,0,0,0,226,1392,1,0,0,0,228,1396,1,0,0,0,230,1400,1,0,0,0,232,1404,
        1,0,0,0,234,1408,1,0,0,0,236,1412,1,0,0,0,238,1416,1,0,0,0,240,1420,
        1,0,0,0,242,1424,1,0,0,0,244,1428,1,0,0,0,246,249,3,4,2,0,247,249,
        3,6,3,0,248,246,1,0,0,0,248,247,1,0,0,0,249,1,1,0,0,0,250,251,3,
        0,0,0,251,252,5,0,0,1,252,3,1,0,0,0,253,255,3,18,9,0,254,256,3,8,
        4,0,255,254,1,0,0,0,255,256,1,0,0,0,256,258,1,0,0,0,257,259,3,184,
        92,0,258,257,1,0,0,0,258,259,1,0,0,0,259,261,1,0,0,0,260,262,3,100,
        50,0,261,260,1,0,0,0,261,262,1,0,0,0,262,264,1,0,0,0,263,265,3,32,
        16,0,264,263,1,0,0,0,264,265,1,0,0,0,265,267,1,0,0,0,266,268,3,196,
        98,0,267,266,1,0,0,0,267,268,1,0,0,0,268,270,1,0,0,0,269,271,3,42,
        21,0,270,269,1,0,0,0,270,271,1,0,0,0,271,273,1,0,0,0,272,274,3,72,
        36,0,273,272,1,0,0,0,273,274,1,0,0,0,274,276,1,0,0,0,275,277,3,176,
        88,0,276,275,1,0,0,0,276,277,1,0,0,0,277,279,1,0,0,0,278,280,3,164,
        82,0,279,278,1,0,0,0,279,280,1,0,0,0,280,282,1,0,0,0,281,283,3,16,
        8,0,282,281,1,0,0,0,282,283,1,0,0,0,283,285,1,0,0,0,284,286,3,118,
        59,0,285,284,1,0,0,0,285,286,1,0,0,0,286,288,1,0,0,0,287,289,3,14,
        7,0,288,287,1,0,0,0,288,289,1,0,0,0,289,291,1,0,0,0,290,292,3,220,
        110,0,291,290,1,0,0,0,291,292,1,0,0,0,292,294,1,0,0,0,293,295,3,
        172,86,0,294,293,1,0,0,0,294,295,1,0,0,0,295,297,1,0,0,0,296,298,
        3,200,100,0,297,296,1,0,0,0,297,298,1,0,0,0,298,300,1,0,0,0,299,
        301,3,76,38,0,300,299,1,0,0,0,300,301,1,0,0,0,301,303,1,0,0,0,302,
        304,3,46,23,0,303,302,1,0,0,0,303,304,1,0,0,0,304,306,1,0,0,0,305,
        307,3,102,51,0,306,305,1,0,0,0,306,307,1,0,0,0,307,309,1,0,0,0,308,
        310,3,122,61,0,309,308,1,0,0,0,309,310,1,0,0,0,310,312,1,0,0,0,311,
        313,3,202,101,0,312,311,1,0,0,0,312,313,1,0,0,0,313,315,1,0,0,0,
        314,316,3,40,20,0,315,314,1,0,0,0,315,316,1,0,0,0,316,318,1,0,0,
        0,317,319,3,198,99,0,318,317,1,0,0,0,318,319,1,0,0,0,319,321,1,0,
        0,0,320,322,3,230,115,0,321,320,1,0,0,0,321,322,1,0,0,0,322,324,
        1,0,0,0,323,325,3,60,30,0,324,323,1,0,0,0,324,325,1,0,0,0,325,327,
        1,0,0,0,326,328,3,54,27,0,327,326,1,0,0,0,327,328,1,0,0,0,328,330,
        1,0,0,0,329,331,3,116,58,0,330,329,1,0,0,0,330,331,1,0,0,0,331,333,
        1,0,0,0,332,334,3,64,32,0,333,332,1,0,0,0,333,334,1,0,0,0,334,336,
        1,0,0,0,335,337,3,216,108,0,336,335,1,0,0,0,336,337,1,0,0,0,337,
        339,1,0,0,0,338,340,3,226,113,0,339,338,1,0,0,0,339,340,1,0,0,0,
        340,342,1,0,0,0,341,343,3,138,69,0,342,341,1,0,0,0,342,343,1,0,0,
        0,343,345,1,0,0,0,344,346,3,142,71,0,345,344,1,0,0,0,345,346,1,0,
        0,0,346,348,1,0,0,0,347,349,3,204,102,0,348,347,1,0,0,0,348,349,
        1,0,0,0,349,351,1,0,0,0,350,352,3,132,66,0,351,350,1,0,0,0,351,352,
        1,0,0,0,352,354,1,0,0,0,353,355,3,24,12,0,354,353,1,0,0,0,354,355,
        1,0,0,0,355,357,1,0,0,0,356,358,3,58,29,0,357,356,1,0,0,0,357,358,
        1,0,0,0,358,360,1,0,0,0,359,361,3,234,117,0,360,359,1,0,0,0,360,
        361,1,0,0,0,361,363,1,0,0,0,362,364,3,206,103,0,363,362,1,0,0,0,
        363,364,1,0,0,0,364,366,1,0,0,0,365,367,3,180,90,0,366,365,1,0,0,
        0,366,367,1,0,0,0,367,369,1,0,0,0,368,370,3,68,34,0,369,368,1,0,
        0,0,369,370,1,0,0,0,370,372,1,0,0,0,371,373,3,134,67,0,372,371,1,
        0,0,0,372,373,1,0,0,0,373,375,1,0,0,0,374,376,3,70,35,0,375,374,
        1,0,0,0,375,376,1,0,0,0,376,378,1,0,0,0,377,379,3,10,5,0,378,377,
        1,0,0,0,378,379,1,0,0,0,379,381,1,0,0,0,380,382,3,150,75,0,381,380,
        1,0,0,0,381,382,1,0,0,0,382,384,1,0,0,0,383,385,3,166,83,0,384,383,
        1,0,0,0,384,385,1,0,0,0,385,387,1,0,0,0,386,388,3,140,70,0,387,386,
        1,0,0,0,387,388,1,0,0,0,388,390,1,0,0,0,389,391,3,222,111,0,390,
        389,1,0,0,0,390,391,1,0,0,0,391,393,1,0,0,0,392,394,3,112,56,0,393,
        392,1,0,0,0,393,394,1,0,0,0,394,396,1,0,0,0,395,397,3,104,52,0,396,
        395,1,0,0,0,396,397,1,0,0,0,397,399,1,0,0,0,398,400,3,160,80,0,399,
        398,1,0,0,0,399,400,1,0,0,0,400,402,1,0,0,0,401,403,3,44,22,0,402,
        401,1,0,0,0,402,403,1,0,0,0,403,405,1,0,0,0,404,406,3,78,39,0,405,
        404,1,0,0,0,405,406,1,0,0,0,406,408,1,0,0,0,407,409,3,120,60,0,408,
        407,1,0,0,0,408,409,1,0,0,0,409,411,1,0,0,0,410,412,3,12,6,0,411,
        410,1,0,0,0,411,412,1,0,0,0,412,414,1,0,0,0,413,415,3,212,106,0,
        414,413,1,0,0,0,414,415,1,0,0,0,415,417,1,0,0,0,416,418,3,148,74,
        0,417,416,1,0,0,0,417,418,1,0,0,0,418,420,1,0,0,0,419,421,3,238,
        119,0,420,419,1,0,0,0,420,421,1,0,0,0,421,423,1,0,0,0,422,424,3,
        236,118,0,423,422,1,0,0,0,423,424,1,0,0,0,424,426,1,0,0,0,425,427,
        3,208,104,0,426,425,1,0,0,0,426,427,1,0,0,0,427,429,1,0,0,0,428,
        430,3,30,15,0,429,428,1,0,0,0,429,430,1,0,0,0,430,432,1,0,0,0,431,
        433,3,56,28,0,432,431,1,0,0,0,432,433,1,0,0,0,433,435,1,0,0,0,434,
        436,3,90,45,0,435,434,1,0,0,0,435,436,1,0,0,0,436,438,1,0,0,0,437,
        439,3,224,112,0,438,437,1,0,0,0,438,439,1,0,0,0,439,441,1,0,0,0,
        440,442,3,20,10,0,441,440,1,0,0,0,441,442,1,0,0,0,442,444,1,0,0,
        0,443,445,3,28,14,0,444,443,1,0,0,0,444,445,1,0,0,0,445,447,1,0,
        0,0,446,448,3,88,44,0,447,446,1,0,0,0,447,448,1,0,0,0,448,450,1,
        0,0,0,449,451,3,126,63,0,450,449,1,0,0,0,450,451,1,0,0,0,451,453,
        1,0,0,0,452,454,3,26,13,0,453,452,1,0,0,0,453,454,1,0,0,0,454,456,
        1,0,0,0,455,457,3,232,116,0,456,455,1,0,0,0,456,457,1,0,0,0,457,
        459,1,0,0,0,458,460,3,62,31,0,459,458,1,0,0,0,459,460,1,0,0,0,460,
        462,1,0,0,0,461,463,3,210,105,0,462,461,1,0,0,0,462,463,1,0,0,0,
        463,465,1,0,0,0,464,466,3,192,96,0,465,464,1,0,0,0,465,466,1,0,0,
        0,466,468,1,0,0,0,467,469,3,22,11,0,468,467,1,0,0,0,468,469,1,0,
        0,0,469,471,1,0,0,0,470,472,3,242,121,0,471,470,1,0,0,0,471,472,
        1,0,0,0,472,474,1,0,0,0,473,475,3,158,79,0,474,473,1,0,0,0,474,475,
        1,0,0,0,475,477,1,0,0,0,476,478,3,36,18,0,477,476,1,0,0,0,477,478,
        1,0,0,0,478,480,1,0,0,0,479,481,3,188,94,0,480,479,1,0,0,0,480,481,
        1,0,0,0,481,483,1,0,0,0,482,484,3,170,85,0,483,482,1,0,0,0,483,484,
        1,0,0,0,484,486,1,0,0,0,485,487,3,98,49,0,486,485,1,0,0,0,486,487,
        1,0,0,0,487,489,1,0,0,0,488,490,3,128,64,0,489,488,1,0,0,0,489,490,
        1,0,0,0,490,492,1,0,0,0,491,493,3,174,87,0,492,491,1,0,0,0,492,493,
        1,0,0,0,493,495,1,0,0,0,494,496,3,124,62,0,495,494,1,0,0,0,495,496,
        1,0,0,0,496,498,1,0,0,0,497,499,3,162,81,0,498,497,1,0,0,0,498,499,
        1,0,0,0,499,501,1,0,0,0,500,502,3,194,97,0,501,500,1,0,0,0,501,502,
        1,0,0,0,502,504,1,0,0,0,503,505,3,182,91,0,504,503,1,0,0,0,504,505,
        1,0,0,0,505,507,1,0,0,0,506,508,3,80,40,0,507,506,1,0,0,0,507,508,
        1,0,0,0,508,510,1,0,0,0,509,511,3,156,78,0,510,509,1,0,0,0,510,511,
        1,0,0,0,511,513,1,0,0,0,512,514,3,214,107,0,513,512,1,0,0,0,513,
        514,1,0,0,0,514,516,1,0,0,0,515,517,3,228,114,0,516,515,1,0,0,0,
        516,517,1,0,0,0,517,519,1,0,0,0,518,520,3,96,48,0,519,518,1,0,0,
        0,519,520,1,0,0,0,520,522,1,0,0,0,521,523,3,178,89,0,522,521,1,0,
        0,0,522,523,1,0,0,0,523,525,1,0,0,0,524,526,3,94,47,0,525,524,1,
        0,0,0,525,526,1,0,0,0,526,528,1,0,0,0,527,529,3,38,19,0,528,527,
        1,0,0,0,528,529,1,0,0,0,529,531,1,0,0,0,530,532,3,108,54,0,531,530,
        1,0,0,0,531,532,1,0,0,0,532,534,1,0,0,0,533,535,3,48,24,0,534,533,
        1,0,0,0,534,535,1,0,0,0,535,537,1,0,0,0,536,538,3,74,37,0,537,536,
        1,0,0,0,537,538,1,0,0,0,538,540,1,0,0,0,539,541,3,218,109,0,540,
        539,1,0,0,0,540,541,1,0,0,0,541,543,1,0,0,0,542,544,3,34,17,0,543,
        542,1,0,0,0,543,544,1,0,0,0,544,546,1,0,0,0,545,547,3,130,65,0,546,
        545,1,0,0,0,546,547,1,0,0,0,547,549,1,0,0,0,548,550,3,106,53,0,549,
        548,1,0,0,0,549,550,1,0,0,0,550,552,1,0,0,0,551,553,3,82,41,0,552,
        551,1,0,0,0,552,553,1,0,0,0,553,555,1,0,0,0,554,556,3,152,76,0,555,
        554,1,0,0,0,555,556,1,0,0,0,556,558,1,0,0,0,557,559,3,136,68,0,558,
        557,1,0,0,0,558,559,1,0,0,0,559,561,1,0,0,0,560,562,3,92,46,0,561,
        560,1,0,0,0,561,562,1,0,0,0,562,564,1,0,0,0,563,565,3,110,55,0,564,
        563,1,0,0,0,564,565,1,0,0,0,565,567,1,0,0,0,566,568,3,186,93,0,567,
        566,1,0,0,0,567,568,1,0,0,0,568,570,1,0,0,0,569,571,3,50,25,0,570,
        569,1,0,0,0,570,571,1,0,0,0,571,573,1,0,0,0,572,574,3,168,84,0,573,
        572,1,0,0,0,573,574,1,0,0,0,574,576,1,0,0,0,575,577,3,144,72,0,576,
        575,1,0,0,0,576,577,1,0,0,0,577,579,1,0,0,0,578,580,3,240,120,0,
        579,578,1,0,0,0,579,580,1,0,0,0,580,582,1,0,0,0,581,583,3,190,95,
        0,582,581,1,0,0,0,582,583,1,0,0,0,583,585,1,0,0,0,584,586,3,52,26,
        0,585,584,1,0,0,0,585,586,1,0,0,0,586,588,1,0,0,0,587,589,3,154,
        77,0,588,587,1,0,0,0,588,589,1,0,0,0,589,591,1,0,0,0,590,592,3,114,
        57,0,591,590,1,0,0,0,591,592,1,0,0,0,592,594,1,0,0,0,593,595,3,84,
        42,0,594,593,1,0,0,0,594,595,1,0,0,0,595,597,1,0,0,0,596,598,3,146,
        73,0,597,596,1,0,0,0,597,598,1,0,0,0,598,600,1,0,0,0,599,601,3,66,
        33,0,600,599,1,0,0,0,600,601,1,0,0,0,601,603,1,0,0,0,602,604,3,86,
        43,0,603,602,1,0,0,0,603,604,1,0,0,0,604,5,1,0,0,0,605,607,3,184,
        92,0,606,605,1,0,0,0,606,607,1,0,0,0,607,609,1,0,0,0,608,610,3,100,
        50,0,609,608,1,0,0,0,609,610,1,0,0,0,610,612,1,0,0,0,611,613,3,32,
        16,0,612,611,1,0,0,0,612,613,1,0,0,0,613,615,1,0,0,0,614,616,3,196,
        98,0,615,614,1,0,0,0,615,616,1,0,0,0,616,618,1,0,0,0,617,619,3,42,
        21,0,618,617,1,0,0,0,618,619,1,0,0,0,619,621,1,0,0,0,620,622,3,72,
        36,0,621,620,1,0,0,0,621,622,1,0,0,0,622,624,1,0,0,0,623,625,3,176,
        88,0,624,623,1,0,0,0,624,625,1,0,0,0,625,627,1,0,0,0,626,628,3,164,
        82,0,627,626,1,0,0,0,627,628,1,0,0,0,628,630,1,0,0,0,629,631,3,16,
        8,0,630,629,1,0,0,0,630,631,1,0,0,0,631,633,1,0,0,0,632,634,3,118,
        59,0,633,632,1,0,0,0,633,634,1,0,0,0,634,636,1,0,0,0,635,637,3,14,
        7,0,636,635,1,0,0,0,636,637,1,0,0,0,637,639,1,0,0,0,638,640,3,220,
        110,0,639,638,1,0,0,0,639,640,1,0,0,0,640,642,1,0,0,0,641,643,3,
        172,86,0,642,641,1,0,0,0,642,643,1,0,0,0,643,645,1,0,0,0,644,646,
        3,200,100,0,645,644,1,0,0,0,645,646,1,0,0,0,646,648,1,0,0,0,647,
        649,3,76,38,0,648,647,1,0,0,0,648,649,1,0,0,0,649,651,1,0,0,0,650,
        652,3,46,23,0,651,650,1,0,0,0,651,652,1,0,0,0,652,654,1,0,0,0,653,
        655,3,102,51,0,654,653,1,0,0,0,654,655,1,0,0,0,655,657,1,0,0,0,656,
        658,3,122,61,0,657,656,1,0,0,0,657,658,1,0,0,0,658,660,1,0,0,0,659,
        661,3,202,101,0,660,659,1,0,0,0,660,661,1,0,0,0,661,663,1,0,0,0,
        662,664,3,40,20,0,663,662,1,0,0,0,663,664,1,0,0,0,664,666,1,0,0,
        0,665,667,3,198,99,0,666,665,1,0,0,0,666,667,1,0,0,0,667,669,1,0,
        0,0,668,670,3,230,115,0,669,668,1,0,0,0,669,670,1,0,0,0,670,672,
        1,0,0,0,671,673,3,60,30,0,672,671,1,0,0,0,672,673,1,0,0,0,673,675,
        1,0,0,0,674,676,3,54,27,0,675,674,1,0,0,0,675,676,1,0,0,0,676,678,
        1,0,0,0,677,679,3,116,58,0,678,677,1,0,0,0,678,679,1,0,0,0,679,681,
        1,0,0,0,680,682,3,64,32,0,681,680,1,0,0,0,681,682,1,0,0,0,682,684,
        1,0,0,0,683,685,3,216,108,0,684,683,1,0,0,0,684,685,1,0,0,0,685,
        687,1,0,0,0,686,688,3,226,113,0,687,686,1,0,0,0,687,688,1,0,0,0,
        688,690,1,0,0,0,689,691,3,138,69,0,690,689,1,0,0,0,690,691,1,0,0,
        0,691,693,1,0,0,0,692,694,3,142,71,0,693,692,1,0,0,0,693,694,1,0,
        0,0,694,696,1,0,0,0,695,697,3,204,102,0,696,695,1,0,0,0,696,697,
        1,0,0,0,697,699,1,0,0,0,698,700,3,132,66,0,699,698,1,0,0,0,699,700,
        1,0,0,0,700,702,1,0,0,0,701,703,3,24,12,0,702,701,1,0,0,0,702,703,
        1,0,0,0,703,705,1,0,0,0,704,706,3,58,29,0,705,704,1,0,0,0,705,706,
        1,0,0,0,706,708,1,0,0,0,707,709,3,234,117,0,708,707,1,0,0,0,708,
        709,1,0,0,0,709,711,1,0,0,0,710,712,3,206,103,0,711,710,1,0,0,0,
        711,712,1,0,0,0,712,714,1,0,0,0,713,715,3,180,90,0,714,713,1,0,0,
        0,714,715,1,0,0,0,715,717,1,0,0,0,716,718,3,68,34,0,717,716,1,0,
        0,0,717,718,1,0,0,0,718,720,1,0,0,0,719,721,3,134,67,0,720,719,1,
        0,0,0,720,721,1,0,0,0,721,723,1,0,0,0,722,724,3,70,35,0,723,722,
        1,0,0,0,723,724,1,0,0,0,724,726,1,0,0,0,725,727,3,8,4,0,726,725,
        1,0,0,0,726,727,1,0,0,0,727,729,1,0,0,0,728,730,3,10,5,0,729,728,
        1,0,0,0,729,730,1,0,0,0,730,732,1,0,0,0,731,733,3,150,75,0,732,731,
        1,0,0,0,732,733,1,0,0,0,733,735,1,0,0,0,734,736,3,166,83,0,735,734,
        1,0,0,0,735,736,1,0,0,0,736,738,1,0,0,0,737,739,3,140,70,0,738,737,
        1,0,0,0,738,739,1,0,0,0,739,741,1,0,0,0,740,742,3,222,111,0,741,
        740,1,0,0,0,741,742,1,0,0,0,742,744,1,0,0,0,743,745,3,112,56,0,744,
        743,1,0,0,0,744,745,1,0,0,0,745,747,1,0,0,0,746,748,3,104,52,0,747,
        746,1,0,0,0,747,748,1,0,0,0,748,750,1,0,0,0,749,751,3,160,80,0,750,
        749,1,0,0,0,750,751,1,0,0,0,751,753,1,0,0,0,752,754,3,44,22,0,753,
        752,1,0,0,0,753,754,1,0,0,0,754,756,1,0,0,0,755,757,3,78,39,0,756,
        755,1,0,0,0,756,757,1,0,0,0,757,759,1,0,0,0,758,760,3,120,60,0,759,
        758,1,0,0,0,759,760,1,0,0,0,760,762,1,0,0,0,761,763,3,12,6,0,762,
        761,1,0,0,0,762,763,1,0,0,0,763,765,1,0,0,0,764,766,3,212,106,0,
        765,764,1,0,0,0,765,766,1,0,0,0,766,768,1,0,0,0,767,769,3,148,74,
        0,768,767,1,0,0,0,768,769,1,0,0,0,769,771,1,0,0,0,770,772,3,238,
        119,0,771,770,1,0,0,0,771,772,1,0,0,0,772,774,1,0,0,0,773,775,3,
        236,118,0,774,773,1,0,0,0,774,775,1,0,0,0,775,777,1,0,0,0,776,778,
        3,208,104,0,777,776,1,0,0,0,777,778,1,0,0,0,778,780,1,0,0,0,779,
        781,3,30,15,0,780,779,1,0,0,0,780,781,1,0,0,0,781,783,1,0,0,0,782,
        784,3,56,28,0,783,782,1,0,0,0,783,784,1,0,0,0,784,786,1,0,0,0,785,
        787,3,90,45,0,786,785,1,0,0,0,786,787,1,0,0,0,787,789,1,0,0,0,788,
        790,3,224,112,0,789,788,1,0,0,0,789,790,1,0,0,0,790,792,1,0,0,0,
        791,793,3,20,10,0,792,791,1,0,0,0,792,793,1,0,0,0,793,795,1,0,0,
        0,794,796,3,28,14,0,795,794,1,0,0,0,795,796,1,0,0,0,796,798,1,0,
        0,0,797,799,3,88,44,0,798,797,1,0,0,0,798,799,1,0,0,0,799,801,1,
        0,0,0,800,802,3,126,63,0,801,800,1,0,0,0,801,802,1,0,0,0,802,804,
        1,0,0,0,803,805,3,26,13,0,804,803,1,0,0,0,804,805,1,0,0,0,805,807,
        1,0,0,0,806,808,3,232,116,0,807,806,1,0,0,0,807,808,1,0,0,0,808,
        810,1,0,0,0,809,811,3,62,31,0,810,809,1,0,0,0,810,811,1,0,0,0,811,
        813,1,0,0,0,812,814,3,210,105,0,813,812,1,0,0,0,813,814,1,0,0,0,
        814,816,1,0,0,0,815,817,3,192,96,0,816,815,1,0,0,0,816,817,1,0,0,
        0,817,819,1,0,0,0,818,820,3,22,11,0,819,818,1,0,0,0,819,820,1,0,
        0,0,820,822,1,0,0,0,821,823,3,242,121,0,822,821,1,0,0,0,822,823,
        1,0,0,0,823,825,1,0,0,0,824,826,3,158,79,0,825,824,1,0,0,0,825,826,
        1,0,0,0,826,828,1,0,0,0,827,829,3,36,18,0,828,827,1,0,0,0,828,829,
        1,0,0,0,829,831,1,0,0,0,830,832,3,188,94,0,831,830,1,0,0,0,831,832,
        1,0,0,0,832,834,1,0,0,0,833,835,3,170,85,0,834,833,1,0,0,0,834,835,
        1,0,0,0,835,837,1,0,0,0,836,838,3,98,49,0,837,836,1,0,0,0,837,838,
        1,0,0,0,838,840,1,0,0,0,839,841,3,128,64,0,840,839,1,0,0,0,840,841,
        1,0,0,0,841,843,1,0,0,0,842,844,3,174,87,0,843,842,1,0,0,0,843,844,
        1,0,0,0,844,846,1,0,0,0,845,847,3,124,62,0,846,845,1,0,0,0,846,847,
        1,0,0,0,847,849,1,0,0,0,848,850,3,162,81,0,849,848,1,0,0,0,849,850,
        1,0,0,0,850,852,1,0,0,0,851,853,3,194,97,0,852,851,1,0,0,0,852,853,
        1,0,0,0,853,855,1,0,0,0,854,856,3,182,91,0,855,854,1,0,0,0,855,856,
        1,0,0,0,856,858,1,0,0,0,857,859,3,80,40,0,858,857,1,0,0,0,858,859,
        1,0,0,0,859,861,1,0,0,0,860,862,3,156,78,0,861,860,1,0,0,0,861,862,
        1,0,0,0,862,864,1,0,0,0,863,865,3,214,107,0,864,863,1,0,0,0,864,
        865,1,0,0,0,865,867,1,0,0,0,866,868,3,228,114,0,867,866,1,0,0,0,
        867,868,1,0,0,0,868,870,1,0,0,0,869,871,3,96,48,0,870,869,1,0,0,
        0,870,871,1,0,0,0,871,873,1,0,0,0,872,874,3,178,89,0,873,872,1,0,
        0,0,873,874,1,0,0,0,874,876,1,0,0,0,875,877,3,94,47,0,876,875,1,
        0,0,0,876,877,1,0,0,0,877,879,1,0,0,0,878,880,3,38,19,0,879,878,
        1,0,0,0,879,880,1,0,0,0,880,882,1,0,0,0,881,883,3,108,54,0,882,881,
        1,0,0,0,882,883,1,0,0,0,883,885,1,0,0,0,884,886,3,48,24,0,885,884,
        1,0,0,0,885,886,1,0,0,0,886,888,1,0,0,0,887,889,3,74,37,0,888,887,
        1,0,0,0,888,889,1,0,0,0,889,891,1,0,0,0,890,892,3,218,109,0,891,
        890,1,0,0,0,891,892,1,0,0,0,892,894,1,0,0,0,893,895,3,34,17,0,894,
        893,1,0,0,0,894,895,1,0,0,0,895,897,1,0,0,0,896,898,3,130,65,0,897,
        896,1,0,0,0,897,898,1,0,0,0,898,900,1,0,0,0,899,901,3,106,53,0,900,
        899,1,0,0,0,900,901,1,0,0,0,901,903,1,0,0,0,902,904,3,82,41,0,903,
        902,1,0,0,0,903,904,1,0,0,0,904,906,1,0,0,0,905,907,3,152,76,0,906,
        905,1,0,0,0,906,907,1,0,0,0,907,909,1,0,0,0,908,910,3,136,68,0,909,
        908,1,0,0,0,909,910,1,0,0,0,910,912,1,0,0,0,911,913,3,92,46,0,912,
        911,1,0,0,0,912,913,1,0,0,0,913,915,1,0,0,0,914,916,3,110,55,0,915,
        914,1,0,0,0,915,916,1,0,0,0,916,918,1,0,0,0,917,919,3,186,93,0,918,
        917,1,0,0,0,918,919,1,0,0,0,919,921,1,0,0,0,920,922,3,50,25,0,921,
        920,1,0,0,0,921,922,1,0,0,0,922,924,1,0,0,0,923,925,3,168,84,0,924,
        923,1,0,0,0,924,925,1,0,0,0,925,927,1,0,0,0,926,928,3,144,72,0,927,
        926,1,0,0,0,927,928,1,0,0,0,928,930,1,0,0,0,929,931,3,240,120,0,
        930,929,1,0,0,0,930,931,1,0,0,0,931,933,1,0,0,0,932,934,3,190,95,
        0,933,932,1,0,0,0,933,934,1,0,0,0,934,936,1,0,0,0,935,937,3,52,26,
        0,936,935,1,0,0,0,936,937,1,0,0,0,937,939,1,0,0,0,938,940,3,154,
        77,0,939,938,1,0,0,0,939,940,1,0,0,0,940,942,1,0,0,0,941,943,3,114,
        57,0,942,941,1,0,0,0,942,943,1,0,0,0,943,945,1,0,0,0,944,946,3,84,
        42,0,945,944,1,0,0,0,945,946,1,0,0,0,946,948,1,0,0,0,947,949,3,146,
        73,0,948,947,1,0,0,0,948,949,1,0,0,0,949,951,1,0,0,0,950,952,3,66,
        33,0,951,950,1,0,0,0,951,952,1,0,0,0,952,954,1,0,0,0,953,955,3,86,
        43,0,954,953,1,0,0,0,954,955,1,0,0,0,955,7,1,0,0,0,956,958,5,1,0,
        0,957,959,3,244,122,0,958,957,1,0,0,0,958,959,1,0,0,0,959,9,1,0,
        0,0,960,962,5,2,0,0,961,963,3,244,122,0,962,961,1,0,0,0,962,963,
        1,0,0,0,963,11,1,0,0,0,964,966,5,3,0,0,965,967,3,244,122,0,966,965,
        1,0,0,0,966,967,1,0,0,0,967,13,1,0,0,0,968,970,5,4,0,0,969,971,3,
        244,122,0,970,969,1,0,0,0,970,971,1,0,0,0,971,15,1,0,0,0,972,974,
        5,5,0,0,973,975,3,244,122,0,974,973,1,0,0,0,974,975,1,0,0,0,975,
        17,1,0,0,0,976,978,5,6,0,0,977,979,3,244,122,0,978,977,1,0,0,0,978,
        979,1,0,0,0,979,19,1,0,0,0,980,982,5,7,0,0,981,983,3,244,122,0,982,
        981,1,0,0,0,982,983,1,0,0,0,983,21,1,0,0,0,984,986,5,8,0,0,985,987,
        3,244,122,0,986,985,1,0,0,0,986,987,1,0,0,0,987,23,1,0,0,0,988,990,
        5,9,0,0,989,991,3,244,122,0,990,989,1,0,0,0,990,991,1,0,0,0,991,
        25,1,0,0,0,992,994,5,10,0,0,993,995,3,244,122,0,994,993,1,0,0,0,
        994,995,1,0,0,0,995,27,1,0,0,0,996,998,5,11,0,0,997,999,3,244,122,
        0,998,997,1,0,0,0,998,999,1,0,0,0,999,29,1,0,0,0,1000,1002,5,12,
        0,0,1001,1003,3,244,122,0,1002,1001,1,0,0,0,1002,1003,1,0,0,0,1003,
        31,1,0,0,0,1004,1006,5,13,0,0,1005,1007,3,244,122,0,1006,1005,1,
        0,0,0,1006,1007,1,0,0,0,1007,33,1,0,0,0,1008,1010,5,14,0,0,1009,
        1011,3,244,122,0,1010,1009,1,0,0,0,1010,1011,1,0,0,0,1011,35,1,0,
        0,0,1012,1014,5,15,0,0,1013,1015,3,244,122,0,1014,1013,1,0,0,0,1014,
        1015,1,0,0,0,1015,37,1,0,0,0,1016,1018,5,16,0,0,1017,1019,3,244,
        122,0,1018,1017,1,0,0,0,1018,1019,1,0,0,0,1019,39,1,0,0,0,1020,1022,
        5,17,0,0,1021,1023,3,244,122,0,1022,1021,1,0,0,0,1022,1023,1,0,0,
        0,1023,41,1,0,0,0,1024,1026,5,18,0,0,1025,1027,3,244,122,0,1026,
        1025,1,0,0,0,1026,1027,1,0,0,0,1027,43,1,0,0,0,1028,1030,5,19,0,
        0,1029,1031,3,244,122,0,1030,1029,1,0,0,0,1030,1031,1,0,0,0,1031,
        45,1,0,0,0,1032,1034,5,20,0,0,1033,1035,3,244,122,0,1034,1033,1,
        0,0,0,1034,1035,1,0,0,0,1035,47,1,0,0,0,1036,1038,5,21,0,0,1037,
        1039,3,244,122,0,1038,1037,1,0,0,0,1038,1039,1,0,0,0,1039,49,1,0,
        0,0,1040,1042,5,22,0,0,1041,1043,3,244,122,0,1042,1041,1,0,0,0,1042,
        1043,1,0,0,0,1043,51,1,0,0,0,1044,1046,5,23,0,0,1045,1047,3,244,
        122,0,1046,1045,1,0,0,0,1046,1047,1,0,0,0,1047,53,1,0,0,0,1048,1050,
        5,24,0,0,1049,1051,3,244,122,0,1050,1049,1,0,0,0,1050,1051,1,0,0,
        0,1051,55,1,0,0,0,1052,1054,5,25,0,0,1053,1055,3,244,122,0,1054,
        1053,1,0,0,0,1054,1055,1,0,0,0,1055,57,1,0,0,0,1056,1058,5,26,0,
        0,1057,1059,3,244,122,0,1058,1057,1,0,0,0,1058,1059,1,0,0,0,1059,
        59,1,0,0,0,1060,1062,5,27,0,0,1061,1063,3,244,122,0,1062,1061,1,
        0,0,0,1062,1063,1,0,0,0,1063,61,1,0,0,0,1064,1066,5,28,0,0,1065,
        1067,3,244,122,0,1066,1065,1,0,0,0,1066,1067,1,0,0,0,1067,63,1,0,
        0,0,1068,1070,5,29,0,0,1069,1071,3,244,122,0,1070,1069,1,0,0,0,1070,
        1071,1,0,0,0,1071,65,1,0,0,0,1072,1074,5,30,0,0,1073,1075,3,244,
        122,0,1074,1073,1,0,0,0,1074,1075,1,0,0,0,1075,67,1,0,0,0,1076,1078,
        5,31,0,0,1077,1079,3,244,122,0,1078,1077,1,0,0,0,1078,1079,1,0,0,
        0,1079,69,1,0,0,0,1080,1082,5,32,0,0,1081,1083,3,244,122,0,1082,
        1081,1,0,0,0,1082,1083,1,0,0,0,1083,71,1,0,0,0,1084,1086,5,33,0,
        0,1085,1087,3,244,122,0,1086,1085,1,0,0,0,1086,1087,1,0,0,0,1087,
        73,1,0,0,0,1088,1090,5,34,0,0,1089,1091,3,244,122,0,1090,1089,1,
        0,0,0,1090,1091,1,0,0,0,1091,75,1,0,0,0,1092,1094,5,35,0,0,1093,
        1095,3,244,122,0,1094,1093,1,0,0,0,1094,1095,1,0,0,0,1095,77,1,0,
        0,0,1096,1098,5,36,0,0,1097,1099,3,244,122,0,1098,1097,1,0,0,0,1098,
        1099,1,0,0,0,1099,79,1,0,0,0,1100,1102,5,37,0,0,1101,1103,3,244,
        122,0,1102,1101,1,0,0,0,1102,1103,1,0,0,0,1103,81,1,0,0,0,1104,1106,
        5,38,0,0,1105,1107,3,244,122,0,1106,1105,1,0,0,0,1106,1107,1,0,0,
        0,1107,83,1,0,0,0,1108,1110,5,39,0,0,1109,1111,3,244,122,0,1110,
        1109,1,0,0,0,1110,1111,1,0,0,0,1111,85,1,0,0,0,1112,1114,5,40,0,
        0,1113,1115,3,244,122,0,1114,1113,1,0,0,0,1114,1115,1,0,0,0,1115,
        87,1,0,0,0,1116,1118,5,41,0,0,1117,1119,3,244,122,0,1118,1117,1,
        0,0,0,1118,1119,1,0,0,0,1119,89,1,0,0,0,1120,1122,5,42,0,0,1121,
        1123,3,244,122,0,1122,1121,1,0,0,0,1122,1123,1,0,0,0,1123,91,1,0,
        0,0,1124,1126,5,43,0,0,1125,1127,3,244,122,0,1126,1125,1,0,0,0,1126,
        1127,1,0,0,0,1127,93,1,0,0,0,1128,1130,5,44,0,0,1129,1131,3,244,
        122,0,1130,1129,1,0,0,0,1130,1131,1,0,0,0,1131,95,1,0,0,0,1132,1134,
        5,45,0,0,1133,1135,3,244,122,0,1134,1133,1,0,0,0,1134,1135,1,0,0,
        0,1135,97,1,0,0,0,1136,1138,5,46,0,0,1137,1139,3,244,122,0,1138,
        1137,1,0,0,0,1138,1139,1,0,0,0,1139,99,1,0,0,0,1140,1142,5,47,0,
        0,1141,1143,3,244,122,0,1142,1141,1,0,0,0,1142,1143,1,0,0,0,1143,
        101,1,0,0,0,1144,1146,5,48,0,0,1145,1147,3,244,122,0,1146,1145,1,
        0,0,0,1146,1147,1,0,0,0,1147,103,1,0,0,0,1148,1150,5,49,0,0,1149,
        1151,3,244,122,0,1150,1149,1,0,0,0,1150,1151,1,0,0,0,1151,105,1,
        0,0,0,1152,1154,5,50,0,0,1153,1155,3,244,122,0,1154,1153,1,0,0,0,
        1154,1155,1,0,0,0,1155,107,1,0,0,0,1156,1158,5,51,0,0,1157,1159,
        3,244,122,0,1158,1157,1,0,0,0,1158,1159,1,0,0,0,1159,109,1,0,0,0,
        1160,1162,5,52,0,0,1161,1163,3,244,122,0,1162,1161,1,0,0,0,1162,
        1163,1,0,0,0,1163,111,1,0,0,0,1164,1166,5,53,0,0,1165,1167,3,244,
        122,0,1166,1165,1,0,0,0,1166,1167,1,0,0,0,1167,113,1,0,0,0,1168,
        1170,5,54,0,0,1169,1171,3,244,122,0,1170,1169,1,0,0,0,1170,1171,
        1,0,0,0,1171,115,1,0,0,0,1172,1174,5,55,0,0,1173,1175,3,244,122,
        0,1174,1173,1,0,0,0,1174,1175,1,0,0,0,1175,117,1,0,0,0,1176,1178,
        5,56,0,0,1177,1179,3,244,122,0,1178,1177,1,0,0,0,1178,1179,1,0,0,
        0,1179,119,1,0,0,0,1180,1182,5,57,0,0,1181,1183,3,244,122,0,1182,
        1181,1,0,0,0,1182,1183,1,0,0,0,1183,121,1,0,0,0,1184,1186,5,58,0,
        0,1185,1187,3,244,122,0,1186,1185,1,0,0,0,1186,1187,1,0,0,0,1187,
        123,1,0,0,0,1188,1190,5,59,0,0,1189,1191,3,244,122,0,1190,1189,1,
        0,0,0,1190,1191,1,0,0,0,1191,125,1,0,0,0,1192,1194,5,60,0,0,1193,
        1195,3,244,122,0,1194,1193,1,0,0,0,1194,1195,1,0,0,0,1195,127,1,
        0,0,0,1196,1198,5,61,0,0,1197,1199,3,244,122,0,1198,1197,1,0,0,0,
        1198,1199,1,0,0,0,1199,129,1,0,0,0,1200,1202,5,62,0,0,1201,1203,
        3,244,122,0,1202,1201,1,0,0,0,1202,1203,1,0,0,0,1203,131,1,0,0,0,
        1204,1206,5,63,0,0,1205,1207,3,244,122,0,1206,1205,1,0,0,0,1206,
        1207,1,0,0,0,1207,133,1,0,0,0,1208,1210,5,64,0,0,1209,1211,3,244,
        122,0,1210,1209,1,0,0,0,1210,1211,1,0,0,0,1211,135,1,0,0,0,1212,
        1214,5,65,0,0,1213,1215,3,244,122,0,1214,1213,1,0,0,0,1214,1215,
        1,0,0,0,1215,137,1,0,0,0,1216,1218,5,66,0,0,1217,1219,3,244,122,
        0,1218,1217,1,0,0,0,1218,1219,1,0,0,0,1219,139,1,0,0,0,1220,1222,
        5,67,0,0,1221,1223,3,244,122,0,1222,1221,1,0,0,0,1222,1223,1,0,0,
        0,1223,141,1,0,0,0,1224,1226,5,68,0,0,1225,1227,3,244,122,0,1226,
        1225,1,0,0,0,1226,1227,1,0,0,0,1227,143,1,0,0,0,1228,1230,5,69,0,
        0,1229,1231,3,244,122,0,1230,1229,1,0,0,0,1230,1231,1,0,0,0,1231,
        145,1,0,0,0,1232,1234,5,70,0,0,1233,1235,3,244,122,0,1234,1233,1,
        0,0,0,1234,1235,1,0,0,0,1235,147,1,0,0,0,1236,1238,5,71,0,0,1237,
        1239,3,244,122,0,1238,1237,1,0,0,0,1238,1239,1,0,0,0,1239,149,1,
        0,0,0,1240,1242,5,72,0,0,1241,1243,3,244,122,0,1242,1241,1,0,0,0,
        1242,1243,1,0,0,0,1243,151,1,0,0,0,1244,1246,5,73,0,0,1245,1247,
        3,244,122,0,1246,1245,1,0,0,0,1246,1247,1,0,0,0,1247,153,1,0,0,0,
        1248,1250,5,74,0,0,1249,1251,3,244,122,0,1250,1249,1,0,0,0,1250,
        1251,1,0,0,0,1251,155,1,0,0,0,1252,1254,5,75,0,0,1253,1255,3,244,
        122,0,1254,1253,1,0,0,0,1254,1255,1,0,0,0,1255,157,1,0,0,0,1256,
        1258,5,76,0,0,1257,1259,3,244,122,0,1258,1257,1,0,0,0,1258,1259,
        1,0,0,0,1259,159,1,0,0,0,1260,1262,5,77,0,0,1261,1263,3,244,122,
        0,1262,1261,1,0,0,0,1262,1263,1,0,0,0,1263,161,1,0,0,0,1264,1266,
        5,78,0,0,1265,1267,3,244,122,0,1266,1265,1,0,0,0,1266,1267,1,0,0,
        0,1267,163,1,0,0,0,1268,1270,5,79,0,0,1269,1271,3,244,122,0,1270,
        1269,1,0,0,0,1270,1271,1,0,0,0,1271,165,1,0,0,0,1272,1274,5,80,0,
        0,1273,1275,3,244,122,0,1274,1273,1,0,0,0,1274,1275,1,0,0,0,1275,
        167,1,0,0,0,1276,1278,5,81,0,0,1277,1279,3,244,122,0,1278,1277,1,
        0,0,0,1278,1279,1,0,0,0,1279,169,1,0,0,0,1280,1282,5,82,0,0,1281,
        1283,3,244,122,0,1282,1281,1,0,0,0,1282,1283,1,0,0,0,1283,171,1,
        0,0,0,1284,1286,5,83,0,0,1285,1287,3,244,122,0,1286,1285,1,0,0,0,
        1286,1287,1,0,0,0,1287,173,1,0,0,0,1288,1290,5,84,0,0,1289,1291,
        3,244,122,0,1290,1289,1,0,0,0,1290,1291,1,0,0,0,1291,175,1,0,0,0,
        1292,1294,5,85,0,0,1293,1295,3,244,122,0,1294,1293,1,0,0,0,1294,
        1295,1,0,0,0,1295,177,1,0,0,0,1296,1298,5,86,0,0,1297,1299,3,244,
        122,0,1298,1297,1,0,0,0,1298,1299,1,0,0,0,1299,179,1,0,0,0,1300,
        1302,5,87,0,0,1301,1303,3,244,122,0,1302,1301,1,0,0,0,1302,1303,
        1,0,0,0,1303,181,1,0,0,0,1304,1306,5,88,0,0,1305,1307,3,244,122,
        0,1306,1305,1,0,0,0,1306,1307,1,0,0,0,1307,183,1,0,0,0,1308,1310,
        5,89,0,0,1309,1311,3,244,122,0,1310,1309,1,0,0,0,1310,1311,1,0,0,
        0,1311,185,1,0,0,0,1312,1314,5,90,0,0,1313,1315,3,244,122,0,1314,
        1313,1,0,0,0,1314,1315,1,0,0,0,1315,187,1,0,0,0,1316,1318,5,91,0,
        0,1317,1319,3,244,122,0,1318,1317,1,0,0,0,1318,1319,1,0,0,0,1319,
        189,1,0,0,0,1320,1322,5,92,0,0,1321,1323,3,244,122,0,1322,1321,1,
        0,0,0,1322,1323,1,0,0,0,1323,191,1,0,0,0,1324,1326,5,93,0,0,1325,
        1327,3,244,122,0,1326,1325,1,0,0,0,1326,1327,1,0,0,0,1327,193,1,
        0,0,0,1328,1330,5,94,0,0,1329,1331,3,244,122,0,1330,1329,1,0,0,0,
        1330,1331,1,0,0,0,1331,195,1,0,0,0,1332,1334,5,95,0,0,1333,1335,
        3,244,122,0,1334,1333,1,0,0,0,1334,1335,1,0,0,0,1335,197,1,0,0,0,
        1336,1338,5,96,0,0,1337,1339,3,244,122,0,1338,1337,1,0,0,0,1338,
        1339,1,0,0,0,1339,199,1,0,0,0,1340,1342,5,97,0,0,1341,1343,3,244,
        122,0,1342,1341,1,0,0,0,1342,1343,1,0,0,0,1343,201,1,0,0,0,1344,
        1346,5,98,0,0,1345,1347,3,244,122,0,1346,1345,1,0,0,0,1346,1347,
        1,0,0,0,1347,203,1,0,0,0,1348,1350,5,99,0,0,1349,1351,3,244,122,
        0,1350,1349,1,0,0,0,1350,1351,1,0,0,0,1351,205,1,0,0,0,1352,1354,
        5,100,0,0,1353,1355,3,244,122,0,1354,1353,1,0,0,0,1354,1355,1,0,
        0,0,1355,207,1,0,0,0,1356,1358,5,101,0,0,1357,1359,3,244,122,0,1358,
        1357,1,0,0,0,1358,1359,1,0,0,0,1359,209,1,0,0,0,1360,1362,5,102,
        0,0,1361,1363,3,244,122,0,1362,1361,1,0,0,0,1362,1363,1,0,0,0,1363,
        211,1,0,0,0,1364,1366,5,103,0,0,1365,1367,3,244,122,0,1366,1365,
        1,0,0,0,1366,1367,1,0,0,0,1367,213,1,0,0,0,1368,1370,5,104,0,0,1369,
        1371,3,244,122,0,1370,1369,1,0,0,0,1370,1371,1,0,0,0,1371,215,1,
        0,0,0,1372,1374,5,105,0,0,1373,1375,3,244,122,0,1374,1373,1,0,0,
        0,1374,1375,1,0,0,0,1375,217,1,0,0,0,1376,1378,5,106,0,0,1377,1379,
        3,244,122,0,1378,1377,1,0,0,0,1378,1379,1,0,0,0,1379,219,1,0,0,0,
        1380,1382,5,107,0,0,1381,1383,3,244,122,0,1382,1381,1,0,0,0,1382,
        1383,1,0,0,0,1383,221,1,0,0,0,1384,1386,5,108,0,0,1385,1387,3,244,
        122,0,1386,1385,1,0,0,0,1386,1387,1,0,0,0,1387,223,1,0,0,0,1388,
        1390,5,109,0,0,1389,1391,3,244,122,0,1390,1389,1,0,0,0,1390,1391,
        1,0,0,0,1391,225,1,0,0,0,1392,1394,5,110,0,0,1393,1395,3,244,122,
        0,1394,1393,1,0,0,0,1394,1395,1,0,0,0,1395,227,1,0,0,0,1396,1398,
        5,111,0,0,1397,1399,3,244,122,0,1398,1397,1,0,0,0,1398,1399,1,0,
        0,0,1399,229,1,0,0,0,1400,1402,5,112,0,0,1401,1403,3,244,122,0,1402,
        1401,1,0,0,0,1402,1403,1,0,0,0,1403,231,1,0,0,0,1404,1406,5,113,
        0,0,1405,1407,3,244,122,0,1406,1405,1,0,0,0,1406,1407,1,0,0,0,1407,
        233,1,0,0,0,1408,1410,5,114,0,0,1409,1411,3,244,122,0,1410,1409,
        1,0,0,0,1410,1411,1,0,0,0,1411,235,1,0,0,0,1412,1414,5,115,0,0,1413,
        1415,3,244,122,0,1414,1413,1,0,0,0,1414,1415,1,0,0,0,1415,237,1,
        0,0,0,1416,1418,5,116,0,0,1417,1419,3,244,122,0,1418,1417,1,0,0,
        0,1418,1419,1,0,0,0,1419,239,1,0,0,0,1420,1422,5,117,0,0,1421,1423,
        3,244,122,0,1422,1421,1,0,0,0,1422,1423,1,0,0,0,1423,241,1,0,0,0,
        1424,1426,5,118,0,0,1425,1427,3,244,122,0,1426,1425,1,0,0,0,1426,
        1427,1,0,0,0,1427,243,1,0,0,0,1428,1429,7,0,0,0,1429,245,1,0,0,0,
        353,248,255,258,261,264,267,270,273,276,279,282,285,288,291,294,
        297,300,303,306,309,312,315,318,321,324,327,330,333,336,339,342,
        345,348,351,354,357,360,363,366,369,372,375,378,381,384,387,390,
        393,396,399,402,405,408,411,414,417,420,423,426,429,432,435,438,
        441,444,447,450,453,456,459,462,465,468,471,474,477,480,483,486,
        489,492,495,498,501,504,507,510,513,516,519,522,525,528,531,534,
        537,540,543,546,549,552,555,558,561,564,567,570,573,576,579,582,
        585,588,591,594,597,600,603,606,609,612,615,618,621,624,627,630,
        633,636,639,642,645,648,651,654,657,660,663,666,669,672,675,678,
        681,684,687,690,693,696,699,702,705,708,711,714,717,720,723,726,
        729,732,735,738,741,744,747,750,753,756,759,762,765,768,771,774,
        777,780,783,786,789,792,795,798,801,804,807,810,813,816,819,822,
        825,828,831,834,837,840,843,846,849,852,855,858,861,864,867,870,
        873,876,879,882,885,888,891,894,897,900,903,906,909,912,915,918,
        921,924,927,930,933,936,939,942,945,948,951,954,958,962,966,970,
        974,978,982,986,990,994,998,1002,1006,1010,1014,1018,1022,1026,1030,
        1034,1038,1042,1046,1050,1054,1058,1062,1066,1070,1074,1078,1082,
        1086,1090,1094,1098,1102,1106,1110,1114,1118,1122,1126,1130,1134,
        1138,1142,1146,1150,1154,1158,1162,1166,1170,1174,1178,1182,1186,
        1190,1194,1198,1202,1206,1210,1214,1218,1222,1226,1230,1234,1238,
        1242,1246,1250,1254,1258,1262,1266,1270,1274,1278,1282,1286,1290,
        1294,1298,1302,1306,1310,1314,1318,1322,1326,1330,1334,1338,1342,
        1346,1350,1354,1358,1362,1366,1370,1374,1378,1382,1386,1390,1394,
        1398,1402,1406,1410,1414,1418,1422,1426
    ]

class tucanParser ( Parser ):

    grammarFileName = "tucan.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'H'", "'He'", "'Li'", "'Be'", "'B'", 
                     "'C'", "'N'", "'O'", "'F'", "'Ne'", "'Na'", "'Mg'", 
                     "'Al'", "'Si'", "'P'", "'S'", "'Cl'", "'Ar'", "'K'", 
                     "'Ca'", "'Sc'", "'Ti'", "'V'", "'Cr'", "'Mn'", "'Fe'", 
                     "'Co'", "'Ni'", "'Cu'", "'Zn'", "'Ga'", "'Ge'", "'As'", 
                     "'Se'", "'Br'", "'Kr'", "'Rb'", "'Sr'", "'Y'", "'Zr'", 
                     "'Nb'", "'Mo'", "'Tc'", "'Ru'", "'Rh'", "'Pd'", "'Ag'", 
                     "'Cd'", "'In'", "'Sn'", "'Sb'", "'Te'", "'I'", "'Xe'", 
                     "'Cs'", "'Ba'", "'La'", "'Ce'", "'Pr'", "'Nd'", "'Pm'", 
                     "'Sm'", "'Eu'", "'Gd'", "'Tb'", "'Dy'", "'Ho'", "'Er'", 
                     "'Tm'", "'Yb'", "'Lu'", "'Hf'", "'Ta'", "'W'", "'Re'", 
                     "'Os'", "'Ir'", "'Pt'", "'Au'", "'Hg'", "'Tl'", "'Pb'", 
                     "'Bi'", "'Po'", "'At'", "'Rn'", "'Fr'", "'Ra'", "'Ac'", 
                     "'Th'", "'Pa'", "'U'", "'Np'", "'Pu'", "'Am'", "'Cm'", 
                     "'Bk'", "'Cf'", "'Es'", "'Fm'", "'Md'", "'No'", "'Lr'", 
                     "'Rf'", "'Db'", "'Sg'", "'Bh'", "'Hs'", "'Mt'", "'Ds'", 
                     "'Rg'", "'Cn'", "'Nh'", "'Fl'", "'Mc'", "'Lv'", "'Ts'", 
                     "'Og'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "TWO_TO_NINE", 
                      "GREATER_THAN_NINE" ]

    RULE_sum_formula = 0
    RULE_sum_formula_start = 1
    RULE_with_carbon = 2
    RULE_without_carbon = 3
    RULE_h = 4
    RULE_he = 5
    RULE_li = 6
    RULE_be = 7
    RULE_b = 8
    RULE_c = 9
    RULE_n = 10
    RULE_o = 11
    RULE_f = 12
    RULE_ne = 13
    RULE_na = 14
    RULE_mg = 15
    RULE_al = 16
    RULE_si = 17
    RULE_p = 18
    RULE_s = 19
    RULE_cl = 20
    RULE_ar = 21
    RULE_k = 22
    RULE_ca = 23
    RULE_sc = 24
    RULE_ti = 25
    RULE_v = 26
    RULE_cr = 27
    RULE_mn = 28
    RULE_fe = 29
    RULE_co = 30
    RULE_ni = 31
    RULE_cu = 32
    RULE_zn = 33
    RULE_ga = 34
    RULE_ge = 35
    RULE_as = 36
    RULE_se = 37
    RULE_br = 38
    RULE_kr = 39
    RULE_rb = 40
    RULE_sr = 41
    RULE_y = 42
    RULE_zr = 43
    RULE_nb = 44
    RULE_mo = 45
    RULE_tc = 46
    RULE_ru = 47
    RULE_rh = 48
    RULE_pd = 49
    RULE_ag = 50
    RULE_cd = 51
    RULE_in = 52
    RULE_sn = 53
    RULE_sb = 54
    RULE_te = 55
    RULE_i = 56
    RULE_xe = 57
    RULE_cs = 58
    RULE_ba = 59
    RULE_la = 60
    RULE_ce = 61
    RULE_pr = 62
    RULE_nd = 63
    RULE_pm = 64
    RULE_sm = 65
    RULE_eu = 66
    RULE_gd = 67
    RULE_tb = 68
    RULE_dy = 69
    RULE_ho = 70
    RULE_er = 71
    RULE_tm = 72
    RULE_yb = 73
    RULE_lu = 74
    RULE_hf = 75
    RULE_ta = 76
    RULE_w = 77
    RULE_re = 78
    RULE_os = 79
    RULE_ir = 80
    RULE_pt = 81
    RULE_au = 82
    RULE_hg = 83
    RULE_tl = 84
    RULE_pb = 85
    RULE_bi = 86
    RULE_po = 87
    RULE_at = 88
    RULE_rn = 89
    RULE_fr = 90
    RULE_ra = 91
    RULE_ac = 92
    RULE_th = 93
    RULE_pa = 94
    RULE_u = 95
    RULE_np = 96
    RULE_pu = 97
    RULE_am = 98
    RULE_cm = 99
    RULE_bk = 100
    RULE_cf = 101
    RULE_es = 102
    RULE_fm = 103
    RULE_md = 104
    RULE_no = 105
    RULE_lr = 106
    RULE_rf = 107
    RULE_db = 108
    RULE_sg = 109
    RULE_bh = 110
    RULE_hs = 111
    RULE_mt = 112
    RULE_ds = 113
    RULE_rg = 114
    RULE_cn = 115
    RULE_nh = 116
    RULE_fl = 117
    RULE_mc = 118
    RULE_lv = 119
    RULE_ts = 120
    RULE_og = 121
    RULE_count = 122

    ruleNames =  [ "sum_formula", "sum_formula_start", "with_carbon", "without_carbon", 
                   "h", "he", "li", "be", "b", "c", "n", "o", "f", "ne", 
                   "na", "mg", "al", "si", "p", "s", "cl", "ar", "k", "ca", 
                   "sc", "ti", "v", "cr", "mn", "fe", "co", "ni", "cu", 
                   "zn", "ga", "ge", "as", "se", "br", "kr", "rb", "sr", 
                   "y", "zr", "nb", "mo", "tc", "ru", "rh", "pd", "ag", 
                   "cd", "in", "sn", "sb", "te", "i", "xe", "cs", "ba", 
                   "la", "ce", "pr", "nd", "pm", "sm", "eu", "gd", "tb", 
                   "dy", "ho", "er", "tm", "yb", "lu", "hf", "ta", "w", 
                   "re", "os", "ir", "pt", "au", "hg", "tl", "pb", "bi", 
                   "po", "at", "rn", "fr", "ra", "ac", "th", "pa", "u", 
                   "np", "pu", "am", "cm", "bk", "cf", "es", "fm", "md", 
                   "no", "lr", "rf", "db", "sg", "bh", "hs", "mt", "ds", 
                   "rg", "cn", "nh", "fl", "mc", "lv", "ts", "og", "count" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    T__92=93
    T__93=94
    T__94=95
    T__95=96
    T__96=97
    T__97=98
    T__98=99
    T__99=100
    T__100=101
    T__101=102
    T__102=103
    T__103=104
    T__104=105
    T__105=106
    T__106=107
    T__107=108
    T__108=109
    T__109=110
    T__110=111
    T__111=112
    T__112=113
    T__113=114
    T__114=115
    T__115=116
    T__116=117
    T__117=118
    TWO_TO_NINE=119
    GREATER_THAN_NINE=120

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Sum_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def with_carbon(self):
            return self.getTypedRuleContext(tucanParser.With_carbonContext,0)


        def without_carbon(self):
            return self.getTypedRuleContext(tucanParser.Without_carbonContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_sum_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSum_formula" ):
                listener.enterSum_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSum_formula" ):
                listener.exitSum_formula(self)




    def sum_formula(self):

        localctx = tucanParser.Sum_formulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_sum_formula)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 248
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.state = 246
                self.with_carbon()
                pass
            elif token in [-1, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118]:
                self.state = 247
                self.without_carbon()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sum_formula_startContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sum_formula(self):
            return self.getTypedRuleContext(tucanParser.Sum_formulaContext,0)


        def EOF(self):
            return self.getToken(tucanParser.EOF, 0)

        def getRuleIndex(self):
            return tucanParser.RULE_sum_formula_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSum_formula_start" ):
                listener.enterSum_formula_start(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSum_formula_start" ):
                listener.exitSum_formula_start(self)




    def sum_formula_start(self):

        localctx = tucanParser.Sum_formula_startContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_sum_formula_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 250
            self.sum_formula()
            self.state = 251
            self.match(tucanParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_carbonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def c(self):
            return self.getTypedRuleContext(tucanParser.CContext,0)


        def h(self):
            return self.getTypedRuleContext(tucanParser.HContext,0)


        def ac(self):
            return self.getTypedRuleContext(tucanParser.AcContext,0)


        def ag(self):
            return self.getTypedRuleContext(tucanParser.AgContext,0)


        def al(self):
            return self.getTypedRuleContext(tucanParser.AlContext,0)


        def am(self):
            return self.getTypedRuleContext(tucanParser.AmContext,0)


        def ar(self):
            return self.getTypedRuleContext(tucanParser.ArContext,0)


        def as_(self):
            return self.getTypedRuleContext(tucanParser.AsContext,0)


        def at(self):
            return self.getTypedRuleContext(tucanParser.AtContext,0)


        def au(self):
            return self.getTypedRuleContext(tucanParser.AuContext,0)


        def b(self):
            return self.getTypedRuleContext(tucanParser.BContext,0)


        def ba(self):
            return self.getTypedRuleContext(tucanParser.BaContext,0)


        def be(self):
            return self.getTypedRuleContext(tucanParser.BeContext,0)


        def bh(self):
            return self.getTypedRuleContext(tucanParser.BhContext,0)


        def bi(self):
            return self.getTypedRuleContext(tucanParser.BiContext,0)


        def bk(self):
            return self.getTypedRuleContext(tucanParser.BkContext,0)


        def br(self):
            return self.getTypedRuleContext(tucanParser.BrContext,0)


        def ca(self):
            return self.getTypedRuleContext(tucanParser.CaContext,0)


        def cd(self):
            return self.getTypedRuleContext(tucanParser.CdContext,0)


        def ce(self):
            return self.getTypedRuleContext(tucanParser.CeContext,0)


        def cf(self):
            return self.getTypedRuleContext(tucanParser.CfContext,0)


        def cl(self):
            return self.getTypedRuleContext(tucanParser.ClContext,0)


        def cm(self):
            return self.getTypedRuleContext(tucanParser.CmContext,0)


        def cn(self):
            return self.getTypedRuleContext(tucanParser.CnContext,0)


        def co(self):
            return self.getTypedRuleContext(tucanParser.CoContext,0)


        def cr(self):
            return self.getTypedRuleContext(tucanParser.CrContext,0)


        def cs(self):
            return self.getTypedRuleContext(tucanParser.CsContext,0)


        def cu(self):
            return self.getTypedRuleContext(tucanParser.CuContext,0)


        def db(self):
            return self.getTypedRuleContext(tucanParser.DbContext,0)


        def ds(self):
            return self.getTypedRuleContext(tucanParser.DsContext,0)


        def dy(self):
            return self.getTypedRuleContext(tucanParser.DyContext,0)


        def er(self):
            return self.getTypedRuleContext(tucanParser.ErContext,0)


        def es(self):
            return self.getTypedRuleContext(tucanParser.EsContext,0)


        def eu(self):
            return self.getTypedRuleContext(tucanParser.EuContext,0)


        def f(self):
            return self.getTypedRuleContext(tucanParser.FContext,0)


        def fe(self):
            return self.getTypedRuleContext(tucanParser.FeContext,0)


        def fl(self):
            return self.getTypedRuleContext(tucanParser.FlContext,0)


        def fm(self):
            return self.getTypedRuleContext(tucanParser.FmContext,0)


        def fr(self):
            return self.getTypedRuleContext(tucanParser.FrContext,0)


        def ga(self):
            return self.getTypedRuleContext(tucanParser.GaContext,0)


        def gd(self):
            return self.getTypedRuleContext(tucanParser.GdContext,0)


        def ge(self):
            return self.getTypedRuleContext(tucanParser.GeContext,0)


        def he(self):
            return self.getTypedRuleContext(tucanParser.HeContext,0)


        def hf(self):
            return self.getTypedRuleContext(tucanParser.HfContext,0)


        def hg(self):
            return self.getTypedRuleContext(tucanParser.HgContext,0)


        def ho(self):
            return self.getTypedRuleContext(tucanParser.HoContext,0)


        def hs(self):
            return self.getTypedRuleContext(tucanParser.HsContext,0)


        def i(self):
            return self.getTypedRuleContext(tucanParser.IContext,0)


        def in_(self):
            return self.getTypedRuleContext(tucanParser.InContext,0)


        def ir(self):
            return self.getTypedRuleContext(tucanParser.IrContext,0)


        def k(self):
            return self.getTypedRuleContext(tucanParser.KContext,0)


        def kr(self):
            return self.getTypedRuleContext(tucanParser.KrContext,0)


        def la(self):
            return self.getTypedRuleContext(tucanParser.LaContext,0)


        def li(self):
            return self.getTypedRuleContext(tucanParser.LiContext,0)


        def lr(self):
            return self.getTypedRuleContext(tucanParser.LrContext,0)


        def lu(self):
            return self.getTypedRuleContext(tucanParser.LuContext,0)


        def lv(self):
            return self.getTypedRuleContext(tucanParser.LvContext,0)


        def mc(self):
            return self.getTypedRuleContext(tucanParser.McContext,0)


        def md(self):
            return self.getTypedRuleContext(tucanParser.MdContext,0)


        def mg(self):
            return self.getTypedRuleContext(tucanParser.MgContext,0)


        def mn(self):
            return self.getTypedRuleContext(tucanParser.MnContext,0)


        def mo(self):
            return self.getTypedRuleContext(tucanParser.MoContext,0)


        def mt(self):
            return self.getTypedRuleContext(tucanParser.MtContext,0)


        def n(self):
            return self.getTypedRuleContext(tucanParser.NContext,0)


        def na(self):
            return self.getTypedRuleContext(tucanParser.NaContext,0)


        def nb(self):
            return self.getTypedRuleContext(tucanParser.NbContext,0)


        def nd(self):
            return self.getTypedRuleContext(tucanParser.NdContext,0)


        def ne(self):
            return self.getTypedRuleContext(tucanParser.NeContext,0)


        def nh(self):
            return self.getTypedRuleContext(tucanParser.NhContext,0)


        def ni(self):
            return self.getTypedRuleContext(tucanParser.NiContext,0)


        def no(self):
            return self.getTypedRuleContext(tucanParser.NoContext,0)


        def np(self):
            return self.getTypedRuleContext(tucanParser.NpContext,0)


        def o(self):
            return self.getTypedRuleContext(tucanParser.OContext,0)


        def og(self):
            return self.getTypedRuleContext(tucanParser.OgContext,0)


        def os(self):
            return self.getTypedRuleContext(tucanParser.OsContext,0)


        def p(self):
            return self.getTypedRuleContext(tucanParser.PContext,0)


        def pa(self):
            return self.getTypedRuleContext(tucanParser.PaContext,0)


        def pb(self):
            return self.getTypedRuleContext(tucanParser.PbContext,0)


        def pd(self):
            return self.getTypedRuleContext(tucanParser.PdContext,0)


        def pm(self):
            return self.getTypedRuleContext(tucanParser.PmContext,0)


        def po(self):
            return self.getTypedRuleContext(tucanParser.PoContext,0)


        def pr(self):
            return self.getTypedRuleContext(tucanParser.PrContext,0)


        def pt(self):
            return self.getTypedRuleContext(tucanParser.PtContext,0)


        def pu(self):
            return self.getTypedRuleContext(tucanParser.PuContext,0)


        def ra(self):
            return self.getTypedRuleContext(tucanParser.RaContext,0)


        def rb(self):
            return self.getTypedRuleContext(tucanParser.RbContext,0)


        def re(self):
            return self.getTypedRuleContext(tucanParser.ReContext,0)


        def rf(self):
            return self.getTypedRuleContext(tucanParser.RfContext,0)


        def rg(self):
            return self.getTypedRuleContext(tucanParser.RgContext,0)


        def rh(self):
            return self.getTypedRuleContext(tucanParser.RhContext,0)


        def rn(self):
            return self.getTypedRuleContext(tucanParser.RnContext,0)


        def ru(self):
            return self.getTypedRuleContext(tucanParser.RuContext,0)


        def s(self):
            return self.getTypedRuleContext(tucanParser.SContext,0)


        def sb(self):
            return self.getTypedRuleContext(tucanParser.SbContext,0)


        def sc(self):
            return self.getTypedRuleContext(tucanParser.ScContext,0)


        def se(self):
            return self.getTypedRuleContext(tucanParser.SeContext,0)


        def sg(self):
            return self.getTypedRuleContext(tucanParser.SgContext,0)


        def si(self):
            return self.getTypedRuleContext(tucanParser.SiContext,0)


        def sm(self):
            return self.getTypedRuleContext(tucanParser.SmContext,0)


        def sn(self):
            return self.getTypedRuleContext(tucanParser.SnContext,0)


        def sr(self):
            return self.getTypedRuleContext(tucanParser.SrContext,0)


        def ta(self):
            return self.getTypedRuleContext(tucanParser.TaContext,0)


        def tb(self):
            return self.getTypedRuleContext(tucanParser.TbContext,0)


        def tc(self):
            return self.getTypedRuleContext(tucanParser.TcContext,0)


        def te(self):
            return self.getTypedRuleContext(tucanParser.TeContext,0)


        def th(self):
            return self.getTypedRuleContext(tucanParser.ThContext,0)


        def ti(self):
            return self.getTypedRuleContext(tucanParser.TiContext,0)


        def tl(self):
            return self.getTypedRuleContext(tucanParser.TlContext,0)


        def tm(self):
            return self.getTypedRuleContext(tucanParser.TmContext,0)


        def ts(self):
            return self.getTypedRuleContext(tucanParser.TsContext,0)


        def u(self):
            return self.getTypedRuleContext(tucanParser.UContext,0)


        def v(self):
            return self.getTypedRuleContext(tucanParser.VContext,0)


        def w(self):
            return self.getTypedRuleContext(tucanParser.WContext,0)


        def xe(self):
            return self.getTypedRuleContext(tucanParser.XeContext,0)


        def y(self):
            return self.getTypedRuleContext(tucanParser.YContext,0)


        def yb(self):
            return self.getTypedRuleContext(tucanParser.YbContext,0)


        def zn(self):
            return self.getTypedRuleContext(tucanParser.ZnContext,0)


        def zr(self):
            return self.getTypedRuleContext(tucanParser.ZrContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_with_carbon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_carbon" ):
                listener.enterWith_carbon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_carbon" ):
                listener.exitWith_carbon(self)




    def with_carbon(self):

        localctx = tucanParser.With_carbonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_with_carbon)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 253
            self.c()
            self.state = 255
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 254
                self.h()


            self.state = 258
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==89:
                self.state = 257
                self.ac()


            self.state = 261
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 260
                self.ag()


            self.state = 264
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 263
                self.al()


            self.state = 267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==95:
                self.state = 266
                self.am()


            self.state = 270
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 269
                self.ar()


            self.state = 273
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==33:
                self.state = 272
                self.as_()


            self.state = 276
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==85:
                self.state = 275
                self.at()


            self.state = 279
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==79:
                self.state = 278
                self.au()


            self.state = 282
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 281
                self.b()


            self.state = 285
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 284
                self.ba()


            self.state = 288
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==4:
                self.state = 287
                self.be()


            self.state = 291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==107:
                self.state = 290
                self.bh()


            self.state = 294
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==83:
                self.state = 293
                self.bi()


            self.state = 297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==97:
                self.state = 296
                self.bk()


            self.state = 300
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 299
                self.br()


            self.state = 303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 302
                self.ca()


            self.state = 306
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 305
                self.cd()


            self.state = 309
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 308
                self.ce()


            self.state = 312
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98:
                self.state = 311
                self.cf()


            self.state = 315
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 314
                self.cl()


            self.state = 318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==96:
                self.state = 317
                self.cm()


            self.state = 321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==112:
                self.state = 320
                self.cn()


            self.state = 324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==27:
                self.state = 323
                self.co()


            self.state = 327
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24:
                self.state = 326
                self.cr()


            self.state = 330
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==55:
                self.state = 329
                self.cs()


            self.state = 333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==29:
                self.state = 332
                self.cu()


            self.state = 336
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==105:
                self.state = 335
                self.db()


            self.state = 339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==110:
                self.state = 338
                self.ds()


            self.state = 342
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 341
                self.dy()


            self.state = 345
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 344
                self.er()


            self.state = 348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==99:
                self.state = 347
                self.es()


            self.state = 351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 350
                self.eu()


            self.state = 354
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 353
                self.f()


            self.state = 357
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 356
                self.fe()


            self.state = 360
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==114:
                self.state = 359
                self.fl()


            self.state = 363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==100:
                self.state = 362
                self.fm()


            self.state = 366
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==87:
                self.state = 365
                self.fr()


            self.state = 369
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==31:
                self.state = 368
                self.ga()


            self.state = 372
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==64:
                self.state = 371
                self.gd()


            self.state = 375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 374
                self.ge()


            self.state = 378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 377
                self.he()


            self.state = 381
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==72:
                self.state = 380
                self.hf()


            self.state = 384
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==80:
                self.state = 383
                self.hg()


            self.state = 387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67:
                self.state = 386
                self.ho()


            self.state = 390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==108:
                self.state = 389
                self.hs()


            self.state = 393
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 392
                self.i()


            self.state = 396
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 395
                self.in_()


            self.state = 399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 398
                self.ir()


            self.state = 402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 401
                self.k()


            self.state = 405
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==36:
                self.state = 404
                self.kr()


            self.state = 408
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 407
                self.la()


            self.state = 411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 410
                self.li()


            self.state = 414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==103:
                self.state = 413
                self.lr()


            self.state = 417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 416
                self.lu()


            self.state = 420
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==116:
                self.state = 419
                self.lv()


            self.state = 423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==115:
                self.state = 422
                self.mc()


            self.state = 426
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==101:
                self.state = 425
                self.md()


            self.state = 429
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 428
                self.mg()


            self.state = 432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==25:
                self.state = 431
                self.mn()


            self.state = 435
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42:
                self.state = 434
                self.mo()


            self.state = 438
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==109:
                self.state = 437
                self.mt()


            self.state = 441
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 440
                self.n()


            self.state = 444
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 443
                self.na()


            self.state = 447
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==41:
                self.state = 446
                self.nb()


            self.state = 450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 449
                self.nd()


            self.state = 453
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 452
                self.ne()


            self.state = 456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==113:
                self.state = 455
                self.nh()


            self.state = 459
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==28:
                self.state = 458
                self.ni()


            self.state = 462
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==102:
                self.state = 461
                self.no()


            self.state = 465
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==93:
                self.state = 464
                self.np()


            self.state = 468
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 467
                self.o()


            self.state = 471
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==118:
                self.state = 470
                self.og()


            self.state = 474
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==76:
                self.state = 473
                self.os()


            self.state = 477
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==15:
                self.state = 476
                self.p()


            self.state = 480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==91:
                self.state = 479
                self.pa()


            self.state = 483
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82:
                self.state = 482
                self.pb()


            self.state = 486
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 485
                self.pd()


            self.state = 489
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==61:
                self.state = 488
                self.pm()


            self.state = 492
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==84:
                self.state = 491
                self.po()


            self.state = 495
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 494
                self.pr()


            self.state = 498
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78:
                self.state = 497
                self.pt()


            self.state = 501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==94:
                self.state = 500
                self.pu()


            self.state = 504
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==88:
                self.state = 503
                self.ra()


            self.state = 507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==37:
                self.state = 506
                self.rb()


            self.state = 510
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75:
                self.state = 509
                self.re()


            self.state = 513
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==104:
                self.state = 512
                self.rf()


            self.state = 516
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 515
                self.rg()


            self.state = 519
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 518
                self.rh()


            self.state = 522
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 521
                self.rn()


            self.state = 525
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==44:
                self.state = 524
                self.ru()


            self.state = 528
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 527
                self.s()


            self.state = 531
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51:
                self.state = 530
                self.sb()


            self.state = 534
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21:
                self.state = 533
                self.sc()


            self.state = 537
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 536
                self.se()


            self.state = 540
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==106:
                self.state = 539
                self.sg()


            self.state = 543
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 542
                self.si()


            self.state = 546
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 545
                self.sm()


            self.state = 549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 548
                self.sn()


            self.state = 552
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==38:
                self.state = 551
                self.sr()


            self.state = 555
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73:
                self.state = 554
                self.ta()


            self.state = 558
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 557
                self.tb()


            self.state = 561
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==43:
                self.state = 560
                self.tc()


            self.state = 564
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 563
                self.te()


            self.state = 567
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 566
                self.th()


            self.state = 570
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 569
                self.ti()


            self.state = 573
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 572
                self.tl()


            self.state = 576
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==69:
                self.state = 575
                self.tm()


            self.state = 579
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==117:
                self.state = 578
                self.ts()


            self.state = 582
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 581
                self.u()


            self.state = 585
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23:
                self.state = 584
                self.v()


            self.state = 588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==74:
                self.state = 587
                self.w()


            self.state = 591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==54:
                self.state = 590
                self.xe()


            self.state = 594
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==39:
                self.state = 593
                self.y()


            self.state = 597
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==70:
                self.state = 596
                self.yb()


            self.state = 600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==30:
                self.state = 599
                self.zn()


            self.state = 603
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==40:
                self.state = 602
                self.zr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Without_carbonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ac(self):
            return self.getTypedRuleContext(tucanParser.AcContext,0)


        def ag(self):
            return self.getTypedRuleContext(tucanParser.AgContext,0)


        def al(self):
            return self.getTypedRuleContext(tucanParser.AlContext,0)


        def am(self):
            return self.getTypedRuleContext(tucanParser.AmContext,0)


        def ar(self):
            return self.getTypedRuleContext(tucanParser.ArContext,0)


        def as_(self):
            return self.getTypedRuleContext(tucanParser.AsContext,0)


        def at(self):
            return self.getTypedRuleContext(tucanParser.AtContext,0)


        def au(self):
            return self.getTypedRuleContext(tucanParser.AuContext,0)


        def b(self):
            return self.getTypedRuleContext(tucanParser.BContext,0)


        def ba(self):
            return self.getTypedRuleContext(tucanParser.BaContext,0)


        def be(self):
            return self.getTypedRuleContext(tucanParser.BeContext,0)


        def bh(self):
            return self.getTypedRuleContext(tucanParser.BhContext,0)


        def bi(self):
            return self.getTypedRuleContext(tucanParser.BiContext,0)


        def bk(self):
            return self.getTypedRuleContext(tucanParser.BkContext,0)


        def br(self):
            return self.getTypedRuleContext(tucanParser.BrContext,0)


        def ca(self):
            return self.getTypedRuleContext(tucanParser.CaContext,0)


        def cd(self):
            return self.getTypedRuleContext(tucanParser.CdContext,0)


        def ce(self):
            return self.getTypedRuleContext(tucanParser.CeContext,0)


        def cf(self):
            return self.getTypedRuleContext(tucanParser.CfContext,0)


        def cl(self):
            return self.getTypedRuleContext(tucanParser.ClContext,0)


        def cm(self):
            return self.getTypedRuleContext(tucanParser.CmContext,0)


        def cn(self):
            return self.getTypedRuleContext(tucanParser.CnContext,0)


        def co(self):
            return self.getTypedRuleContext(tucanParser.CoContext,0)


        def cr(self):
            return self.getTypedRuleContext(tucanParser.CrContext,0)


        def cs(self):
            return self.getTypedRuleContext(tucanParser.CsContext,0)


        def cu(self):
            return self.getTypedRuleContext(tucanParser.CuContext,0)


        def db(self):
            return self.getTypedRuleContext(tucanParser.DbContext,0)


        def ds(self):
            return self.getTypedRuleContext(tucanParser.DsContext,0)


        def dy(self):
            return self.getTypedRuleContext(tucanParser.DyContext,0)


        def er(self):
            return self.getTypedRuleContext(tucanParser.ErContext,0)


        def es(self):
            return self.getTypedRuleContext(tucanParser.EsContext,0)


        def eu(self):
            return self.getTypedRuleContext(tucanParser.EuContext,0)


        def f(self):
            return self.getTypedRuleContext(tucanParser.FContext,0)


        def fe(self):
            return self.getTypedRuleContext(tucanParser.FeContext,0)


        def fl(self):
            return self.getTypedRuleContext(tucanParser.FlContext,0)


        def fm(self):
            return self.getTypedRuleContext(tucanParser.FmContext,0)


        def fr(self):
            return self.getTypedRuleContext(tucanParser.FrContext,0)


        def ga(self):
            return self.getTypedRuleContext(tucanParser.GaContext,0)


        def gd(self):
            return self.getTypedRuleContext(tucanParser.GdContext,0)


        def ge(self):
            return self.getTypedRuleContext(tucanParser.GeContext,0)


        def h(self):
            return self.getTypedRuleContext(tucanParser.HContext,0)


        def he(self):
            return self.getTypedRuleContext(tucanParser.HeContext,0)


        def hf(self):
            return self.getTypedRuleContext(tucanParser.HfContext,0)


        def hg(self):
            return self.getTypedRuleContext(tucanParser.HgContext,0)


        def ho(self):
            return self.getTypedRuleContext(tucanParser.HoContext,0)


        def hs(self):
            return self.getTypedRuleContext(tucanParser.HsContext,0)


        def i(self):
            return self.getTypedRuleContext(tucanParser.IContext,0)


        def in_(self):
            return self.getTypedRuleContext(tucanParser.InContext,0)


        def ir(self):
            return self.getTypedRuleContext(tucanParser.IrContext,0)


        def k(self):
            return self.getTypedRuleContext(tucanParser.KContext,0)


        def kr(self):
            return self.getTypedRuleContext(tucanParser.KrContext,0)


        def la(self):
            return self.getTypedRuleContext(tucanParser.LaContext,0)


        def li(self):
            return self.getTypedRuleContext(tucanParser.LiContext,0)


        def lr(self):
            return self.getTypedRuleContext(tucanParser.LrContext,0)


        def lu(self):
            return self.getTypedRuleContext(tucanParser.LuContext,0)


        def lv(self):
            return self.getTypedRuleContext(tucanParser.LvContext,0)


        def mc(self):
            return self.getTypedRuleContext(tucanParser.McContext,0)


        def md(self):
            return self.getTypedRuleContext(tucanParser.MdContext,0)


        def mg(self):
            return self.getTypedRuleContext(tucanParser.MgContext,0)


        def mn(self):
            return self.getTypedRuleContext(tucanParser.MnContext,0)


        def mo(self):
            return self.getTypedRuleContext(tucanParser.MoContext,0)


        def mt(self):
            return self.getTypedRuleContext(tucanParser.MtContext,0)


        def n(self):
            return self.getTypedRuleContext(tucanParser.NContext,0)


        def na(self):
            return self.getTypedRuleContext(tucanParser.NaContext,0)


        def nb(self):
            return self.getTypedRuleContext(tucanParser.NbContext,0)


        def nd(self):
            return self.getTypedRuleContext(tucanParser.NdContext,0)


        def ne(self):
            return self.getTypedRuleContext(tucanParser.NeContext,0)


        def nh(self):
            return self.getTypedRuleContext(tucanParser.NhContext,0)


        def ni(self):
            return self.getTypedRuleContext(tucanParser.NiContext,0)


        def no(self):
            return self.getTypedRuleContext(tucanParser.NoContext,0)


        def np(self):
            return self.getTypedRuleContext(tucanParser.NpContext,0)


        def o(self):
            return self.getTypedRuleContext(tucanParser.OContext,0)


        def og(self):
            return self.getTypedRuleContext(tucanParser.OgContext,0)


        def os(self):
            return self.getTypedRuleContext(tucanParser.OsContext,0)


        def p(self):
            return self.getTypedRuleContext(tucanParser.PContext,0)


        def pa(self):
            return self.getTypedRuleContext(tucanParser.PaContext,0)


        def pb(self):
            return self.getTypedRuleContext(tucanParser.PbContext,0)


        def pd(self):
            return self.getTypedRuleContext(tucanParser.PdContext,0)


        def pm(self):
            return self.getTypedRuleContext(tucanParser.PmContext,0)


        def po(self):
            return self.getTypedRuleContext(tucanParser.PoContext,0)


        def pr(self):
            return self.getTypedRuleContext(tucanParser.PrContext,0)


        def pt(self):
            return self.getTypedRuleContext(tucanParser.PtContext,0)


        def pu(self):
            return self.getTypedRuleContext(tucanParser.PuContext,0)


        def ra(self):
            return self.getTypedRuleContext(tucanParser.RaContext,0)


        def rb(self):
            return self.getTypedRuleContext(tucanParser.RbContext,0)


        def re(self):
            return self.getTypedRuleContext(tucanParser.ReContext,0)


        def rf(self):
            return self.getTypedRuleContext(tucanParser.RfContext,0)


        def rg(self):
            return self.getTypedRuleContext(tucanParser.RgContext,0)


        def rh(self):
            return self.getTypedRuleContext(tucanParser.RhContext,0)


        def rn(self):
            return self.getTypedRuleContext(tucanParser.RnContext,0)


        def ru(self):
            return self.getTypedRuleContext(tucanParser.RuContext,0)


        def s(self):
            return self.getTypedRuleContext(tucanParser.SContext,0)


        def sb(self):
            return self.getTypedRuleContext(tucanParser.SbContext,0)


        def sc(self):
            return self.getTypedRuleContext(tucanParser.ScContext,0)


        def se(self):
            return self.getTypedRuleContext(tucanParser.SeContext,0)


        def sg(self):
            return self.getTypedRuleContext(tucanParser.SgContext,0)


        def si(self):
            return self.getTypedRuleContext(tucanParser.SiContext,0)


        def sm(self):
            return self.getTypedRuleContext(tucanParser.SmContext,0)


        def sn(self):
            return self.getTypedRuleContext(tucanParser.SnContext,0)


        def sr(self):
            return self.getTypedRuleContext(tucanParser.SrContext,0)


        def ta(self):
            return self.getTypedRuleContext(tucanParser.TaContext,0)


        def tb(self):
            return self.getTypedRuleContext(tucanParser.TbContext,0)


        def tc(self):
            return self.getTypedRuleContext(tucanParser.TcContext,0)


        def te(self):
            return self.getTypedRuleContext(tucanParser.TeContext,0)


        def th(self):
            return self.getTypedRuleContext(tucanParser.ThContext,0)


        def ti(self):
            return self.getTypedRuleContext(tucanParser.TiContext,0)


        def tl(self):
            return self.getTypedRuleContext(tucanParser.TlContext,0)


        def tm(self):
            return self.getTypedRuleContext(tucanParser.TmContext,0)


        def ts(self):
            return self.getTypedRuleContext(tucanParser.TsContext,0)


        def u(self):
            return self.getTypedRuleContext(tucanParser.UContext,0)


        def v(self):
            return self.getTypedRuleContext(tucanParser.VContext,0)


        def w(self):
            return self.getTypedRuleContext(tucanParser.WContext,0)


        def xe(self):
            return self.getTypedRuleContext(tucanParser.XeContext,0)


        def y(self):
            return self.getTypedRuleContext(tucanParser.YContext,0)


        def yb(self):
            return self.getTypedRuleContext(tucanParser.YbContext,0)


        def zn(self):
            return self.getTypedRuleContext(tucanParser.ZnContext,0)


        def zr(self):
            return self.getTypedRuleContext(tucanParser.ZrContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_without_carbon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithout_carbon" ):
                listener.enterWithout_carbon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithout_carbon" ):
                listener.exitWithout_carbon(self)




    def without_carbon(self):

        localctx = tucanParser.Without_carbonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_without_carbon)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==89:
                self.state = 605
                self.ac()


            self.state = 609
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 608
                self.ag()


            self.state = 612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 611
                self.al()


            self.state = 615
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==95:
                self.state = 614
                self.am()


            self.state = 618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 617
                self.ar()


            self.state = 621
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==33:
                self.state = 620
                self.as_()


            self.state = 624
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==85:
                self.state = 623
                self.at()


            self.state = 627
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==79:
                self.state = 626
                self.au()


            self.state = 630
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 629
                self.b()


            self.state = 633
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 632
                self.ba()


            self.state = 636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==4:
                self.state = 635
                self.be()


            self.state = 639
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==107:
                self.state = 638
                self.bh()


            self.state = 642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==83:
                self.state = 641
                self.bi()


            self.state = 645
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==97:
                self.state = 644
                self.bk()


            self.state = 648
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 647
                self.br()


            self.state = 651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 650
                self.ca()


            self.state = 654
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 653
                self.cd()


            self.state = 657
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 656
                self.ce()


            self.state = 660
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98:
                self.state = 659
                self.cf()


            self.state = 663
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 662
                self.cl()


            self.state = 666
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==96:
                self.state = 665
                self.cm()


            self.state = 669
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==112:
                self.state = 668
                self.cn()


            self.state = 672
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==27:
                self.state = 671
                self.co()


            self.state = 675
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24:
                self.state = 674
                self.cr()


            self.state = 678
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==55:
                self.state = 677
                self.cs()


            self.state = 681
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==29:
                self.state = 680
                self.cu()


            self.state = 684
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==105:
                self.state = 683
                self.db()


            self.state = 687
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==110:
                self.state = 686
                self.ds()


            self.state = 690
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 689
                self.dy()


            self.state = 693
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 692
                self.er()


            self.state = 696
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==99:
                self.state = 695
                self.es()


            self.state = 699
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 698
                self.eu()


            self.state = 702
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 701
                self.f()


            self.state = 705
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 704
                self.fe()


            self.state = 708
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==114:
                self.state = 707
                self.fl()


            self.state = 711
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==100:
                self.state = 710
                self.fm()


            self.state = 714
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==87:
                self.state = 713
                self.fr()


            self.state = 717
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==31:
                self.state = 716
                self.ga()


            self.state = 720
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==64:
                self.state = 719
                self.gd()


            self.state = 723
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 722
                self.ge()


            self.state = 726
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 725
                self.h()


            self.state = 729
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 728
                self.he()


            self.state = 732
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==72:
                self.state = 731
                self.hf()


            self.state = 735
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==80:
                self.state = 734
                self.hg()


            self.state = 738
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67:
                self.state = 737
                self.ho()


            self.state = 741
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==108:
                self.state = 740
                self.hs()


            self.state = 744
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 743
                self.i()


            self.state = 747
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 746
                self.in_()


            self.state = 750
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 749
                self.ir()


            self.state = 753
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 752
                self.k()


            self.state = 756
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==36:
                self.state = 755
                self.kr()


            self.state = 759
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 758
                self.la()


            self.state = 762
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 761
                self.li()


            self.state = 765
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==103:
                self.state = 764
                self.lr()


            self.state = 768
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 767
                self.lu()


            self.state = 771
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==116:
                self.state = 770
                self.lv()


            self.state = 774
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==115:
                self.state = 773
                self.mc()


            self.state = 777
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==101:
                self.state = 776
                self.md()


            self.state = 780
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 779
                self.mg()


            self.state = 783
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==25:
                self.state = 782
                self.mn()


            self.state = 786
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42:
                self.state = 785
                self.mo()


            self.state = 789
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==109:
                self.state = 788
                self.mt()


            self.state = 792
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 791
                self.n()


            self.state = 795
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 794
                self.na()


            self.state = 798
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==41:
                self.state = 797
                self.nb()


            self.state = 801
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 800
                self.nd()


            self.state = 804
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 803
                self.ne()


            self.state = 807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==113:
                self.state = 806
                self.nh()


            self.state = 810
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==28:
                self.state = 809
                self.ni()


            self.state = 813
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==102:
                self.state = 812
                self.no()


            self.state = 816
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==93:
                self.state = 815
                self.np()


            self.state = 819
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 818
                self.o()


            self.state = 822
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==118:
                self.state = 821
                self.og()


            self.state = 825
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==76:
                self.state = 824
                self.os()


            self.state = 828
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==15:
                self.state = 827
                self.p()


            self.state = 831
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==91:
                self.state = 830
                self.pa()


            self.state = 834
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82:
                self.state = 833
                self.pb()


            self.state = 837
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 836
                self.pd()


            self.state = 840
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==61:
                self.state = 839
                self.pm()


            self.state = 843
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==84:
                self.state = 842
                self.po()


            self.state = 846
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 845
                self.pr()


            self.state = 849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78:
                self.state = 848
                self.pt()


            self.state = 852
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==94:
                self.state = 851
                self.pu()


            self.state = 855
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==88:
                self.state = 854
                self.ra()


            self.state = 858
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==37:
                self.state = 857
                self.rb()


            self.state = 861
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75:
                self.state = 860
                self.re()


            self.state = 864
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==104:
                self.state = 863
                self.rf()


            self.state = 867
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 866
                self.rg()


            self.state = 870
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 869
                self.rh()


            self.state = 873
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 872
                self.rn()


            self.state = 876
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==44:
                self.state = 875
                self.ru()


            self.state = 879
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 878
                self.s()


            self.state = 882
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51:
                self.state = 881
                self.sb()


            self.state = 885
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21:
                self.state = 884
                self.sc()


            self.state = 888
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 887
                self.se()


            self.state = 891
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==106:
                self.state = 890
                self.sg()


            self.state = 894
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 893
                self.si()


            self.state = 897
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 896
                self.sm()


            self.state = 900
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 899
                self.sn()


            self.state = 903
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==38:
                self.state = 902
                self.sr()


            self.state = 906
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73:
                self.state = 905
                self.ta()


            self.state = 909
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 908
                self.tb()


            self.state = 912
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==43:
                self.state = 911
                self.tc()


            self.state = 915
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 914
                self.te()


            self.state = 918
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 917
                self.th()


            self.state = 921
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 920
                self.ti()


            self.state = 924
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 923
                self.tl()


            self.state = 927
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==69:
                self.state = 926
                self.tm()


            self.state = 930
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==117:
                self.state = 929
                self.ts()


            self.state = 933
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 932
                self.u()


            self.state = 936
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23:
                self.state = 935
                self.v()


            self.state = 939
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==74:
                self.state = 938
                self.w()


            self.state = 942
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==54:
                self.state = 941
                self.xe()


            self.state = 945
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==39:
                self.state = 944
                self.y()


            self.state = 948
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==70:
                self.state = 947
                self.yb()


            self.state = 951
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==30:
                self.state = 950
                self.zn()


            self.state = 954
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==40:
                self.state = 953
                self.zr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_h

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterH" ):
                listener.enterH(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitH" ):
                listener.exitH(self)




    def h(self):

        localctx = tucanParser.HContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_h)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 956
            self.match(tucanParser.T__0)
            self.state = 958
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 957
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_he

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHe" ):
                listener.enterHe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHe" ):
                listener.exitHe(self)




    def he(self):

        localctx = tucanParser.HeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_he)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 960
            self.match(tucanParser.T__1)
            self.state = 962
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 961
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_li

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLi" ):
                listener.enterLi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLi" ):
                listener.exitLi(self)




    def li(self):

        localctx = tucanParser.LiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_li)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 964
            self.match(tucanParser.T__2)
            self.state = 966
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 965
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_be

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBe" ):
                listener.enterBe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBe" ):
                listener.exitBe(self)




    def be(self):

        localctx = tucanParser.BeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_be)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 968
            self.match(tucanParser.T__3)
            self.state = 970
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 969
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_b

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterB" ):
                listener.enterB(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitB" ):
                listener.exitB(self)




    def b(self):

        localctx = tucanParser.BContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_b)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 972
            self.match(tucanParser.T__4)
            self.state = 974
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 973
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_c

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterC" ):
                listener.enterC(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitC" ):
                listener.exitC(self)




    def c(self):

        localctx = tucanParser.CContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_c)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 976
            self.match(tucanParser.T__5)
            self.state = 978
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 977
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_n

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterN" ):
                listener.enterN(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitN" ):
                listener.exitN(self)




    def n(self):

        localctx = tucanParser.NContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_n)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 980
            self.match(tucanParser.T__6)
            self.state = 982
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 981
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_o

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterO" ):
                listener.enterO(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitO" ):
                listener.exitO(self)




    def o(self):

        localctx = tucanParser.OContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_o)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 984
            self.match(tucanParser.T__7)
            self.state = 986
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 985
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_f

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterF" ):
                listener.enterF(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitF" ):
                listener.exitF(self)




    def f(self):

        localctx = tucanParser.FContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_f)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 988
            self.match(tucanParser.T__8)
            self.state = 990
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 989
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ne

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNe" ):
                listener.enterNe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNe" ):
                listener.exitNe(self)




    def ne(self):

        localctx = tucanParser.NeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_ne)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 992
            self.match(tucanParser.T__9)
            self.state = 994
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 993
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_na

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNa" ):
                listener.enterNa(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNa" ):
                listener.exitNa(self)




    def na(self):

        localctx = tucanParser.NaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_na)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 996
            self.match(tucanParser.T__10)
            self.state = 998
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 997
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_mg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMg" ):
                listener.enterMg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMg" ):
                listener.exitMg(self)




    def mg(self):

        localctx = tucanParser.MgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_mg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1000
            self.match(tucanParser.T__11)
            self.state = 1002
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1001
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_al

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAl" ):
                listener.enterAl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAl" ):
                listener.exitAl(self)




    def al(self):

        localctx = tucanParser.AlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_al)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1004
            self.match(tucanParser.T__12)
            self.state = 1006
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1005
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_si

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSi" ):
                listener.enterSi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSi" ):
                listener.exitSi(self)




    def si(self):

        localctx = tucanParser.SiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_si)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1008
            self.match(tucanParser.T__13)
            self.state = 1010
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1009
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_p

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterP" ):
                listener.enterP(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitP" ):
                listener.exitP(self)




    def p(self):

        localctx = tucanParser.PContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1012
            self.match(tucanParser.T__14)
            self.state = 1014
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1013
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_s

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS" ):
                listener.enterS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS" ):
                listener.exitS(self)




    def s(self):

        localctx = tucanParser.SContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_s)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1016
            self.match(tucanParser.T__15)
            self.state = 1018
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1017
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_cl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCl" ):
                listener.enterCl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCl" ):
                listener.exitCl(self)




    def cl(self):

        localctx = tucanParser.ClContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_cl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1020
            self.match(tucanParser.T__16)
            self.state = 1022
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1021
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAr" ):
                listener.enterAr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAr" ):
                listener.exitAr(self)




    def ar(self):

        localctx = tucanParser.ArContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_ar)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1024
            self.match(tucanParser.T__17)
            self.state = 1026
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1025
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_k

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterK" ):
                listener.enterK(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitK" ):
                listener.exitK(self)




    def k(self):

        localctx = tucanParser.KContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_k)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1028
            self.match(tucanParser.T__18)
            self.state = 1030
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1029
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ca

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCa" ):
                listener.enterCa(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCa" ):
                listener.exitCa(self)




    def ca(self):

        localctx = tucanParser.CaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_ca)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1032
            self.match(tucanParser.T__19)
            self.state = 1034
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1033
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_sc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSc" ):
                listener.enterSc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSc" ):
                listener.exitSc(self)




    def sc(self):

        localctx = tucanParser.ScContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_sc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1036
            self.match(tucanParser.T__20)
            self.state = 1038
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1037
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ti

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTi" ):
                listener.enterTi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTi" ):
                listener.exitTi(self)




    def ti(self):

        localctx = tucanParser.TiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_ti)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1040
            self.match(tucanParser.T__21)
            self.state = 1042
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1041
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_v

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterV" ):
                listener.enterV(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitV" ):
                listener.exitV(self)




    def v(self):

        localctx = tucanParser.VContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_v)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1044
            self.match(tucanParser.T__22)
            self.state = 1046
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1045
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_cr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCr" ):
                listener.enterCr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCr" ):
                listener.exitCr(self)




    def cr(self):

        localctx = tucanParser.CrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_cr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1048
            self.match(tucanParser.T__23)
            self.state = 1050
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1049
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_mn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMn" ):
                listener.enterMn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMn" ):
                listener.exitMn(self)




    def mn(self):

        localctx = tucanParser.MnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_mn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1052
            self.match(tucanParser.T__24)
            self.state = 1054
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1053
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_fe

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFe" ):
                listener.enterFe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFe" ):
                listener.exitFe(self)




    def fe(self):

        localctx = tucanParser.FeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_fe)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1056
            self.match(tucanParser.T__25)
            self.state = 1058
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1057
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_co

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCo" ):
                listener.enterCo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCo" ):
                listener.exitCo(self)




    def co(self):

        localctx = tucanParser.CoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_co)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1060
            self.match(tucanParser.T__26)
            self.state = 1062
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1061
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ni

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNi" ):
                listener.enterNi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNi" ):
                listener.exitNi(self)




    def ni(self):

        localctx = tucanParser.NiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_ni)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1064
            self.match(tucanParser.T__27)
            self.state = 1066
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1065
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CuContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_cu

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCu" ):
                listener.enterCu(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCu" ):
                listener.exitCu(self)




    def cu(self):

        localctx = tucanParser.CuContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_cu)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1068
            self.match(tucanParser.T__28)
            self.state = 1070
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1069
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ZnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_zn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterZn" ):
                listener.enterZn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitZn" ):
                listener.exitZn(self)




    def zn(self):

        localctx = tucanParser.ZnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_zn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1072
            self.match(tucanParser.T__29)
            self.state = 1074
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1073
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ga

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGa" ):
                listener.enterGa(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGa" ):
                listener.exitGa(self)




    def ga(self):

        localctx = tucanParser.GaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_ga)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1076
            self.match(tucanParser.T__30)
            self.state = 1078
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1077
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ge

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGe" ):
                listener.enterGe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGe" ):
                listener.exitGe(self)




    def ge(self):

        localctx = tucanParser.GeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_ge)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1080
            self.match(tucanParser.T__31)
            self.state = 1082
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1081
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_as

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAs" ):
                listener.enterAs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAs" ):
                listener.exitAs(self)




    def as_(self):

        localctx = tucanParser.AsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_as)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1084
            self.match(tucanParser.T__32)
            self.state = 1086
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1085
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_se

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSe" ):
                listener.enterSe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSe" ):
                listener.exitSe(self)




    def se(self):

        localctx = tucanParser.SeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_se)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1088
            self.match(tucanParser.T__33)
            self.state = 1090
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1089
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_br

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBr" ):
                listener.enterBr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBr" ):
                listener.exitBr(self)




    def br(self):

        localctx = tucanParser.BrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_br)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1092
            self.match(tucanParser.T__34)
            self.state = 1094
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1093
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_kr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKr" ):
                listener.enterKr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKr" ):
                listener.exitKr(self)




    def kr(self):

        localctx = tucanParser.KrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_kr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1096
            self.match(tucanParser.T__35)
            self.state = 1098
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1097
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RbContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_rb

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRb" ):
                listener.enterRb(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRb" ):
                listener.exitRb(self)




    def rb(self):

        localctx = tucanParser.RbContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_rb)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1100
            self.match(tucanParser.T__36)
            self.state = 1102
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1101
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_sr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSr" ):
                listener.enterSr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSr" ):
                listener.exitSr(self)




    def sr(self):

        localctx = tucanParser.SrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_sr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1104
            self.match(tucanParser.T__37)
            self.state = 1106
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1105
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_y

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterY" ):
                listener.enterY(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitY" ):
                listener.exitY(self)




    def y(self):

        localctx = tucanParser.YContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_y)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1108
            self.match(tucanParser.T__38)
            self.state = 1110
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1109
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ZrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_zr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterZr" ):
                listener.enterZr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitZr" ):
                listener.exitZr(self)




    def zr(self):

        localctx = tucanParser.ZrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_zr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1112
            self.match(tucanParser.T__39)
            self.state = 1114
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1113
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NbContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_nb

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNb" ):
                listener.enterNb(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNb" ):
                listener.exitNb(self)




    def nb(self):

        localctx = tucanParser.NbContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_nb)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1116
            self.match(tucanParser.T__40)
            self.state = 1118
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1117
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_mo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMo" ):
                listener.enterMo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMo" ):
                listener.exitMo(self)




    def mo(self):

        localctx = tucanParser.MoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_mo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1120
            self.match(tucanParser.T__41)
            self.state = 1122
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1121
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_tc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTc" ):
                listener.enterTc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTc" ):
                listener.exitTc(self)




    def tc(self):

        localctx = tucanParser.TcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_tc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1124
            self.match(tucanParser.T__42)
            self.state = 1126
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1125
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ru

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRu" ):
                listener.enterRu(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRu" ):
                listener.exitRu(self)




    def ru(self):

        localctx = tucanParser.RuContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_ru)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1128
            self.match(tucanParser.T__43)
            self.state = 1130
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1129
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RhContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_rh

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRh" ):
                listener.enterRh(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRh" ):
                listener.exitRh(self)




    def rh(self):

        localctx = tucanParser.RhContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_rh)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1132
            self.match(tucanParser.T__44)
            self.state = 1134
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1133
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_pd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPd" ):
                listener.enterPd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPd" ):
                listener.exitPd(self)




    def pd(self):

        localctx = tucanParser.PdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_pd)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1136
            self.match(tucanParser.T__45)
            self.state = 1138
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1137
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAg" ):
                listener.enterAg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAg" ):
                listener.exitAg(self)




    def ag(self):

        localctx = tucanParser.AgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_ag)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1140
            self.match(tucanParser.T__46)
            self.state = 1142
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1141
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_cd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCd" ):
                listener.enterCd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCd" ):
                listener.exitCd(self)




    def cd(self):

        localctx = tucanParser.CdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_cd)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1144
            self.match(tucanParser.T__47)
            self.state = 1146
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1145
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_in

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIn" ):
                listener.enterIn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIn" ):
                listener.exitIn(self)




    def in_(self):

        localctx = tucanParser.InContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_in)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1148
            self.match(tucanParser.T__48)
            self.state = 1150
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1149
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_sn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSn" ):
                listener.enterSn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSn" ):
                listener.exitSn(self)




    def sn(self):

        localctx = tucanParser.SnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_sn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1152
            self.match(tucanParser.T__49)
            self.state = 1154
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1153
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SbContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_sb

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSb" ):
                listener.enterSb(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSb" ):
                listener.exitSb(self)




    def sb(self):

        localctx = tucanParser.SbContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_sb)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1156
            self.match(tucanParser.T__50)
            self.state = 1158
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1157
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_te

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTe" ):
                listener.enterTe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTe" ):
                listener.exitTe(self)




    def te(self):

        localctx = tucanParser.TeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_te)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1160
            self.match(tucanParser.T__51)
            self.state = 1162
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1161
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_i

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterI" ):
                listener.enterI(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitI" ):
                listener.exitI(self)




    def i(self):

        localctx = tucanParser.IContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_i)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1164
            self.match(tucanParser.T__52)
            self.state = 1166
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1165
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_xe

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXe" ):
                listener.enterXe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXe" ):
                listener.exitXe(self)




    def xe(self):

        localctx = tucanParser.XeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_xe)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1168
            self.match(tucanParser.T__53)
            self.state = 1170
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1169
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_cs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCs" ):
                listener.enterCs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCs" ):
                listener.exitCs(self)




    def cs(self):

        localctx = tucanParser.CsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_cs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1172
            self.match(tucanParser.T__54)
            self.state = 1174
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1173
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ba

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBa" ):
                listener.enterBa(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBa" ):
                listener.exitBa(self)




    def ba(self):

        localctx = tucanParser.BaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_ba)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1176
            self.match(tucanParser.T__55)
            self.state = 1178
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1177
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_la

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLa" ):
                listener.enterLa(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLa" ):
                listener.exitLa(self)




    def la(self):

        localctx = tucanParser.LaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_la)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1180
            self.match(tucanParser.T__56)
            self.state = 1182
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1181
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ce

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCe" ):
                listener.enterCe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCe" ):
                listener.exitCe(self)




    def ce(self):

        localctx = tucanParser.CeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_ce)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1184
            self.match(tucanParser.T__57)
            self.state = 1186
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1185
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_pr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPr" ):
                listener.enterPr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPr" ):
                listener.exitPr(self)




    def pr(self):

        localctx = tucanParser.PrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_pr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1188
            self.match(tucanParser.T__58)
            self.state = 1190
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1189
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_nd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNd" ):
                listener.enterNd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNd" ):
                listener.exitNd(self)




    def nd(self):

        localctx = tucanParser.NdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_nd)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1192
            self.match(tucanParser.T__59)
            self.state = 1194
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1193
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_pm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPm" ):
                listener.enterPm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPm" ):
                listener.exitPm(self)




    def pm(self):

        localctx = tucanParser.PmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_pm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1196
            self.match(tucanParser.T__60)
            self.state = 1198
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1197
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_sm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSm" ):
                listener.enterSm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSm" ):
                listener.exitSm(self)




    def sm(self):

        localctx = tucanParser.SmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_sm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1200
            self.match(tucanParser.T__61)
            self.state = 1202
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1201
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EuContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_eu

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEu" ):
                listener.enterEu(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEu" ):
                listener.exitEu(self)




    def eu(self):

        localctx = tucanParser.EuContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_eu)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1204
            self.match(tucanParser.T__62)
            self.state = 1206
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1205
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_gd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGd" ):
                listener.enterGd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGd" ):
                listener.exitGd(self)




    def gd(self):

        localctx = tucanParser.GdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_gd)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1208
            self.match(tucanParser.T__63)
            self.state = 1210
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1209
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TbContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_tb

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTb" ):
                listener.enterTb(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTb" ):
                listener.exitTb(self)




    def tb(self):

        localctx = tucanParser.TbContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_tb)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1212
            self.match(tucanParser.T__64)
            self.state = 1214
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1213
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_dy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDy" ):
                listener.enterDy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDy" ):
                listener.exitDy(self)




    def dy(self):

        localctx = tucanParser.DyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_dy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1216
            self.match(tucanParser.T__65)
            self.state = 1218
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1217
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ho

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHo" ):
                listener.enterHo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHo" ):
                listener.exitHo(self)




    def ho(self):

        localctx = tucanParser.HoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_ho)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1220
            self.match(tucanParser.T__66)
            self.state = 1222
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1221
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_er

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEr" ):
                listener.enterEr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEr" ):
                listener.exitEr(self)




    def er(self):

        localctx = tucanParser.ErContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_er)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1224
            self.match(tucanParser.T__67)
            self.state = 1226
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1225
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_tm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTm" ):
                listener.enterTm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTm" ):
                listener.exitTm(self)




    def tm(self):

        localctx = tucanParser.TmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_tm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1228
            self.match(tucanParser.T__68)
            self.state = 1230
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1229
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YbContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_yb

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYb" ):
                listener.enterYb(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYb" ):
                listener.exitYb(self)




    def yb(self):

        localctx = tucanParser.YbContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_yb)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1232
            self.match(tucanParser.T__69)
            self.state = 1234
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1233
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LuContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_lu

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLu" ):
                listener.enterLu(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLu" ):
                listener.exitLu(self)




    def lu(self):

        localctx = tucanParser.LuContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_lu)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1236
            self.match(tucanParser.T__70)
            self.state = 1238
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1237
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_hf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHf" ):
                listener.enterHf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHf" ):
                listener.exitHf(self)




    def hf(self):

        localctx = tucanParser.HfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_hf)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1240
            self.match(tucanParser.T__71)
            self.state = 1242
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1241
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ta

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTa" ):
                listener.enterTa(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTa" ):
                listener.exitTa(self)




    def ta(self):

        localctx = tucanParser.TaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_ta)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1244
            self.match(tucanParser.T__72)
            self.state = 1246
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1245
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_w

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterW" ):
                listener.enterW(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitW" ):
                listener.exitW(self)




    def w(self):

        localctx = tucanParser.WContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_w)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1248
            self.match(tucanParser.T__73)
            self.state = 1250
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1249
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_re

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRe" ):
                listener.enterRe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRe" ):
                listener.exitRe(self)




    def re(self):

        localctx = tucanParser.ReContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_re)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1252
            self.match(tucanParser.T__74)
            self.state = 1254
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1253
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_os

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOs" ):
                listener.enterOs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOs" ):
                listener.exitOs(self)




    def os(self):

        localctx = tucanParser.OsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_os)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1256
            self.match(tucanParser.T__75)
            self.state = 1258
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1257
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ir

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIr" ):
                listener.enterIr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIr" ):
                listener.exitIr(self)




    def ir(self):

        localctx = tucanParser.IrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_ir)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1260
            self.match(tucanParser.T__76)
            self.state = 1262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1261
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_pt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPt" ):
                listener.enterPt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPt" ):
                listener.exitPt(self)




    def pt(self):

        localctx = tucanParser.PtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_pt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1264
            self.match(tucanParser.T__77)
            self.state = 1266
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1265
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_au

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAu" ):
                listener.enterAu(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAu" ):
                listener.exitAu(self)




    def au(self):

        localctx = tucanParser.AuContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_au)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1268
            self.match(tucanParser.T__78)
            self.state = 1270
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1269
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_hg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHg" ):
                listener.enterHg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHg" ):
                listener.exitHg(self)




    def hg(self):

        localctx = tucanParser.HgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_hg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1272
            self.match(tucanParser.T__79)
            self.state = 1274
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1273
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_tl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTl" ):
                listener.enterTl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTl" ):
                listener.exitTl(self)




    def tl(self):

        localctx = tucanParser.TlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_tl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1276
            self.match(tucanParser.T__80)
            self.state = 1278
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1277
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PbContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_pb

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPb" ):
                listener.enterPb(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPb" ):
                listener.exitPb(self)




    def pb(self):

        localctx = tucanParser.PbContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_pb)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1280
            self.match(tucanParser.T__81)
            self.state = 1282
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1281
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_bi

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBi" ):
                listener.enterBi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBi" ):
                listener.exitBi(self)




    def bi(self):

        localctx = tucanParser.BiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_bi)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1284
            self.match(tucanParser.T__82)
            self.state = 1286
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1285
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_po

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPo" ):
                listener.enterPo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPo" ):
                listener.exitPo(self)




    def po(self):

        localctx = tucanParser.PoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_po)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1288
            self.match(tucanParser.T__83)
            self.state = 1290
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1289
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_at

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAt" ):
                listener.enterAt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAt" ):
                listener.exitAt(self)




    def at(self):

        localctx = tucanParser.AtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_at)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1292
            self.match(tucanParser.T__84)
            self.state = 1294
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1293
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_rn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRn" ):
                listener.enterRn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRn" ):
                listener.exitRn(self)




    def rn(self):

        localctx = tucanParser.RnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_rn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1296
            self.match(tucanParser.T__85)
            self.state = 1298
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1297
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_fr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFr" ):
                listener.enterFr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFr" ):
                listener.exitFr(self)




    def fr(self):

        localctx = tucanParser.FrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_fr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1300
            self.match(tucanParser.T__86)
            self.state = 1302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1301
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ra

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRa" ):
                listener.enterRa(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRa" ):
                listener.exitRa(self)




    def ra(self):

        localctx = tucanParser.RaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_ra)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1304
            self.match(tucanParser.T__87)
            self.state = 1306
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1305
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ac

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAc" ):
                listener.enterAc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAc" ):
                listener.exitAc(self)




    def ac(self):

        localctx = tucanParser.AcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_ac)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1308
            self.match(tucanParser.T__88)
            self.state = 1310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1309
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_th

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTh" ):
                listener.enterTh(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTh" ):
                listener.exitTh(self)




    def th(self):

        localctx = tucanParser.ThContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_th)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1312
            self.match(tucanParser.T__89)
            self.state = 1314
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1313
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_pa

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPa" ):
                listener.enterPa(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPa" ):
                listener.exitPa(self)




    def pa(self):

        localctx = tucanParser.PaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_pa)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1316
            self.match(tucanParser.T__90)
            self.state = 1318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1317
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_u

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterU" ):
                listener.enterU(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitU" ):
                listener.exitU(self)




    def u(self):

        localctx = tucanParser.UContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_u)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1320
            self.match(tucanParser.T__91)
            self.state = 1322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1321
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_np

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNp" ):
                listener.enterNp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNp" ):
                listener.exitNp(self)




    def np(self):

        localctx = tucanParser.NpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_np)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1324
            self.match(tucanParser.T__92)
            self.state = 1326
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1325
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PuContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_pu

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPu" ):
                listener.enterPu(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPu" ):
                listener.exitPu(self)




    def pu(self):

        localctx = tucanParser.PuContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_pu)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1328
            self.match(tucanParser.T__93)
            self.state = 1330
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1329
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_am

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAm" ):
                listener.enterAm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAm" ):
                listener.exitAm(self)




    def am(self):

        localctx = tucanParser.AmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_am)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1332
            self.match(tucanParser.T__94)
            self.state = 1334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1333
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_cm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCm" ):
                listener.enterCm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCm" ):
                listener.exitCm(self)




    def cm(self):

        localctx = tucanParser.CmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_cm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1336
            self.match(tucanParser.T__95)
            self.state = 1338
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1337
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_bk

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBk" ):
                listener.enterBk(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBk" ):
                listener.exitBk(self)




    def bk(self):

        localctx = tucanParser.BkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_bk)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1340
            self.match(tucanParser.T__96)
            self.state = 1342
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1341
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_cf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCf" ):
                listener.enterCf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCf" ):
                listener.exitCf(self)




    def cf(self):

        localctx = tucanParser.CfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_cf)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1344
            self.match(tucanParser.T__97)
            self.state = 1346
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1345
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_es

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEs" ):
                listener.enterEs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEs" ):
                listener.exitEs(self)




    def es(self):

        localctx = tucanParser.EsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_es)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1348
            self.match(tucanParser.T__98)
            self.state = 1350
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1349
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_fm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFm" ):
                listener.enterFm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFm" ):
                listener.exitFm(self)




    def fm(self):

        localctx = tucanParser.FmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_fm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1352
            self.match(tucanParser.T__99)
            self.state = 1354
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1353
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_md

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMd" ):
                listener.enterMd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMd" ):
                listener.exitMd(self)




    def md(self):

        localctx = tucanParser.MdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_md)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1356
            self.match(tucanParser.T__100)
            self.state = 1358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1357
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_no

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNo" ):
                listener.enterNo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNo" ):
                listener.exitNo(self)




    def no(self):

        localctx = tucanParser.NoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_no)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1360
            self.match(tucanParser.T__101)
            self.state = 1362
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1361
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_lr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLr" ):
                listener.enterLr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLr" ):
                listener.exitLr(self)




    def lr(self):

        localctx = tucanParser.LrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_lr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1364
            self.match(tucanParser.T__102)
            self.state = 1366
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1365
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_rf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRf" ):
                listener.enterRf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRf" ):
                listener.exitRf(self)




    def rf(self):

        localctx = tucanParser.RfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_rf)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1368
            self.match(tucanParser.T__103)
            self.state = 1370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1369
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DbContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_db

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDb" ):
                listener.enterDb(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDb" ):
                listener.exitDb(self)




    def db(self):

        localctx = tucanParser.DbContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_db)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1372
            self.match(tucanParser.T__104)
            self.state = 1374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1373
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_sg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSg" ):
                listener.enterSg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSg" ):
                listener.exitSg(self)




    def sg(self):

        localctx = tucanParser.SgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_sg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1376
            self.match(tucanParser.T__105)
            self.state = 1378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1377
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BhContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_bh

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBh" ):
                listener.enterBh(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBh" ):
                listener.exitBh(self)




    def bh(self):

        localctx = tucanParser.BhContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_bh)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1380
            self.match(tucanParser.T__106)
            self.state = 1382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1381
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_hs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHs" ):
                listener.enterHs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHs" ):
                listener.exitHs(self)




    def hs(self):

        localctx = tucanParser.HsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_hs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1384
            self.match(tucanParser.T__107)
            self.state = 1386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1385
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_mt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMt" ):
                listener.enterMt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMt" ):
                listener.exitMt(self)




    def mt(self):

        localctx = tucanParser.MtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_mt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1388
            self.match(tucanParser.T__108)
            self.state = 1390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1389
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ds

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDs" ):
                listener.enterDs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDs" ):
                listener.exitDs(self)




    def ds(self):

        localctx = tucanParser.DsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_ds)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1392
            self.match(tucanParser.T__109)
            self.state = 1394
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1393
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_rg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRg" ):
                listener.enterRg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRg" ):
                listener.exitRg(self)




    def rg(self):

        localctx = tucanParser.RgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_rg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1396
            self.match(tucanParser.T__110)
            self.state = 1398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1397
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_cn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCn" ):
                listener.enterCn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCn" ):
                listener.exitCn(self)




    def cn(self):

        localctx = tucanParser.CnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_cn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1400
            self.match(tucanParser.T__111)
            self.state = 1402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1401
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NhContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_nh

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNh" ):
                listener.enterNh(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNh" ):
                listener.exitNh(self)




    def nh(self):

        localctx = tucanParser.NhContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_nh)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1404
            self.match(tucanParser.T__112)
            self.state = 1406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1405
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_fl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFl" ):
                listener.enterFl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFl" ):
                listener.exitFl(self)




    def fl(self):

        localctx = tucanParser.FlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_fl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1408
            self.match(tucanParser.T__113)
            self.state = 1410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1409
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class McContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_mc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMc" ):
                listener.enterMc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMc" ):
                listener.exitMc(self)




    def mc(self):

        localctx = tucanParser.McContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_mc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1412
            self.match(tucanParser.T__114)
            self.state = 1414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1413
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LvContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_lv

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLv" ):
                listener.enterLv(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLv" ):
                listener.exitLv(self)




    def lv(self):

        localctx = tucanParser.LvContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_lv)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1416
            self.match(tucanParser.T__115)
            self.state = 1418
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1417
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTs" ):
                listener.enterTs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTs" ):
                listener.exitTs(self)




    def ts(self):

        localctx = tucanParser.TsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_ts)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1420
            self.match(tucanParser.T__116)
            self.state = 1422
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1421
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_og

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOg" ):
                listener.enterOg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOg" ):
                listener.exitOg(self)




    def og(self):

        localctx = tucanParser.OgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_og)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1424
            self.match(tucanParser.T__117)
            self.state = 1426
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119 or _la==120:
                self.state = 1425
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CountContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TWO_TO_NINE(self):
            return self.getToken(tucanParser.TWO_TO_NINE, 0)

        def GREATER_THAN_NINE(self):
            return self.getToken(tucanParser.GREATER_THAN_NINE, 0)

        def getRuleIndex(self):
            return tucanParser.RULE_count

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCount" ):
                listener.enterCount(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCount" ):
                listener.exitCount(self)




    def count(self):

        localctx = tucanParser.CountContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_count)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1428
            _la = self._input.LA(1)
            if not(_la==119 or _la==120):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





