# Generated from tucan.g4 by ANTLR 4.11.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,131,1456,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,1,0,5,0,256,8,0,10,0,12,0,259,9,0,1,1,1,1,1,1,1,2,1,
        2,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,3,4,274,8,4,1,5,1,5,1,5,1,6,1,
        6,3,6,281,8,6,1,6,3,6,284,8,6,1,6,3,6,287,8,6,1,6,3,6,290,8,6,1,
        6,3,6,293,8,6,1,6,3,6,296,8,6,1,6,3,6,299,8,6,1,6,3,6,302,8,6,1,
        6,3,6,305,8,6,1,6,3,6,308,8,6,1,6,3,6,311,8,6,1,6,3,6,314,8,6,1,
        6,3,6,317,8,6,1,6,3,6,320,8,6,1,6,3,6,323,8,6,1,6,3,6,326,8,6,1,
        6,3,6,329,8,6,1,6,3,6,332,8,6,1,6,3,6,335,8,6,1,6,3,6,338,8,6,1,
        6,3,6,341,8,6,1,6,3,6,344,8,6,1,6,3,6,347,8,6,1,6,3,6,350,8,6,1,
        6,3,6,353,8,6,1,6,3,6,356,8,6,1,6,3,6,359,8,6,1,6,3,6,362,8,6,1,
        6,3,6,365,8,6,1,6,3,6,368,8,6,1,6,3,6,371,8,6,1,6,3,6,374,8,6,1,
        6,3,6,377,8,6,1,6,3,6,380,8,6,1,6,3,6,383,8,6,1,6,3,6,386,8,6,1,
        6,3,6,389,8,6,1,6,3,6,392,8,6,1,6,3,6,395,8,6,1,6,3,6,398,8,6,1,
        6,3,6,401,8,6,1,6,3,6,404,8,6,1,6,3,6,407,8,6,1,6,3,6,410,8,6,1,
        6,3,6,413,8,6,1,6,3,6,416,8,6,1,6,3,6,419,8,6,1,6,3,6,422,8,6,1,
        6,3,6,425,8,6,1,6,3,6,428,8,6,1,6,3,6,431,8,6,1,6,3,6,434,8,6,1,
        6,3,6,437,8,6,1,6,3,6,440,8,6,1,6,3,6,443,8,6,1,6,3,6,446,8,6,1,
        6,3,6,449,8,6,1,6,3,6,452,8,6,1,6,3,6,455,8,6,1,6,3,6,458,8,6,1,
        6,3,6,461,8,6,1,6,3,6,464,8,6,1,6,3,6,467,8,6,1,6,3,6,470,8,6,1,
        6,3,6,473,8,6,1,6,3,6,476,8,6,1,6,3,6,479,8,6,1,6,3,6,482,8,6,1,
        6,3,6,485,8,6,1,6,3,6,488,8,6,1,6,3,6,491,8,6,1,6,3,6,494,8,6,1,
        6,3,6,497,8,6,1,6,3,6,500,8,6,1,6,3,6,503,8,6,1,6,3,6,506,8,6,1,
        6,3,6,509,8,6,1,6,3,6,512,8,6,1,6,3,6,515,8,6,1,6,3,6,518,8,6,1,
        6,3,6,521,8,6,1,6,3,6,524,8,6,1,6,3,6,527,8,6,1,6,3,6,530,8,6,1,
        6,3,6,533,8,6,1,6,3,6,536,8,6,1,6,3,6,539,8,6,1,6,3,6,542,8,6,1,
        6,3,6,545,8,6,1,6,3,6,548,8,6,1,6,3,6,551,8,6,1,6,3,6,554,8,6,1,
        6,3,6,557,8,6,1,6,3,6,560,8,6,1,6,3,6,563,8,6,1,6,3,6,566,8,6,1,
        6,3,6,569,8,6,1,6,3,6,572,8,6,1,6,3,6,575,8,6,1,6,3,6,578,8,6,1,
        6,3,6,581,8,6,1,6,3,6,584,8,6,1,6,3,6,587,8,6,1,6,3,6,590,8,6,1,
        6,3,6,593,8,6,1,6,3,6,596,8,6,1,6,3,6,599,8,6,1,6,3,6,602,8,6,1,
        6,3,6,605,8,6,1,6,3,6,608,8,6,1,6,3,6,611,8,6,1,6,3,6,614,8,6,1,
        6,3,6,617,8,6,1,6,3,6,620,8,6,1,6,3,6,623,8,6,1,6,3,6,626,8,6,1,
        6,3,6,629,8,6,1,7,3,7,632,8,7,1,7,3,7,635,8,7,1,7,3,7,638,8,7,1,
        7,3,7,641,8,7,1,7,3,7,644,8,7,1,7,3,7,647,8,7,1,7,3,7,650,8,7,1,
        7,3,7,653,8,7,1,7,3,7,656,8,7,1,7,3,7,659,8,7,1,7,3,7,662,8,7,1,
        7,3,7,665,8,7,1,7,3,7,668,8,7,1,7,3,7,671,8,7,1,7,3,7,674,8,7,1,
        7,3,7,677,8,7,1,7,3,7,680,8,7,1,7,3,7,683,8,7,1,7,3,7,686,8,7,1,
        7,3,7,689,8,7,1,7,3,7,692,8,7,1,7,3,7,695,8,7,1,7,3,7,698,8,7,1,
        7,3,7,701,8,7,1,7,3,7,704,8,7,1,7,3,7,707,8,7,1,7,3,7,710,8,7,1,
        7,3,7,713,8,7,1,7,3,7,716,8,7,1,7,3,7,719,8,7,1,7,3,7,722,8,7,1,
        7,3,7,725,8,7,1,7,3,7,728,8,7,1,7,3,7,731,8,7,1,7,3,7,734,8,7,1,
        7,3,7,737,8,7,1,7,3,7,740,8,7,1,7,3,7,743,8,7,1,7,3,7,746,8,7,1,
        7,3,7,749,8,7,1,7,3,7,752,8,7,1,7,3,7,755,8,7,1,7,3,7,758,8,7,1,
        7,3,7,761,8,7,1,7,3,7,764,8,7,1,7,3,7,767,8,7,1,7,3,7,770,8,7,1,
        7,3,7,773,8,7,1,7,3,7,776,8,7,1,7,3,7,779,8,7,1,7,3,7,782,8,7,1,
        7,3,7,785,8,7,1,7,3,7,788,8,7,1,7,3,7,791,8,7,1,7,3,7,794,8,7,1,
        7,3,7,797,8,7,1,7,3,7,800,8,7,1,7,3,7,803,8,7,1,7,3,7,806,8,7,1,
        7,3,7,809,8,7,1,7,3,7,812,8,7,1,7,3,7,815,8,7,1,7,3,7,818,8,7,1,
        7,3,7,821,8,7,1,7,3,7,824,8,7,1,7,3,7,827,8,7,1,7,3,7,830,8,7,1,
        7,3,7,833,8,7,1,7,3,7,836,8,7,1,7,3,7,839,8,7,1,7,3,7,842,8,7,1,
        7,3,7,845,8,7,1,7,3,7,848,8,7,1,7,3,7,851,8,7,1,7,3,7,854,8,7,1,
        7,3,7,857,8,7,1,7,3,7,860,8,7,1,7,3,7,863,8,7,1,7,3,7,866,8,7,1,
        7,3,7,869,8,7,1,7,3,7,872,8,7,1,7,3,7,875,8,7,1,7,3,7,878,8,7,1,
        7,3,7,881,8,7,1,7,3,7,884,8,7,1,7,3,7,887,8,7,1,7,3,7,890,8,7,1,
        7,3,7,893,8,7,1,7,3,7,896,8,7,1,7,3,7,899,8,7,1,7,3,7,902,8,7,1,
        7,3,7,905,8,7,1,7,3,7,908,8,7,1,7,3,7,911,8,7,1,7,3,7,914,8,7,1,
        7,3,7,917,8,7,1,7,3,7,920,8,7,1,7,3,7,923,8,7,1,7,3,7,926,8,7,1,
        7,3,7,929,8,7,1,7,3,7,932,8,7,1,7,3,7,935,8,7,1,7,3,7,938,8,7,1,
        7,3,7,941,8,7,1,7,3,7,944,8,7,1,7,3,7,947,8,7,1,7,3,7,950,8,7,1,
        7,3,7,953,8,7,1,7,3,7,956,8,7,1,7,3,7,959,8,7,1,7,3,7,962,8,7,1,
        7,3,7,965,8,7,1,7,3,7,968,8,7,1,7,3,7,971,8,7,1,7,3,7,974,8,7,1,
        7,3,7,977,8,7,1,7,3,7,980,8,7,1,8,1,8,3,8,984,8,8,1,9,1,9,3,9,988,
        8,9,1,10,1,10,3,10,992,8,10,1,11,1,11,3,11,996,8,11,1,12,1,12,3,
        12,1000,8,12,1,13,1,13,3,13,1004,8,13,1,14,1,14,3,14,1008,8,14,1,
        15,1,15,3,15,1012,8,15,1,16,1,16,3,16,1016,8,16,1,17,1,17,3,17,1020,
        8,17,1,18,1,18,3,18,1024,8,18,1,19,1,19,3,19,1028,8,19,1,20,1,20,
        3,20,1032,8,20,1,21,1,21,3,21,1036,8,21,1,22,1,22,3,22,1040,8,22,
        1,23,1,23,3,23,1044,8,23,1,24,1,24,3,24,1048,8,24,1,25,1,25,3,25,
        1052,8,25,1,26,1,26,3,26,1056,8,26,1,27,1,27,3,27,1060,8,27,1,28,
        1,28,3,28,1064,8,28,1,29,1,29,3,29,1068,8,29,1,30,1,30,3,30,1072,
        8,30,1,31,1,31,3,31,1076,8,31,1,32,1,32,3,32,1080,8,32,1,33,1,33,
        3,33,1084,8,33,1,34,1,34,3,34,1088,8,34,1,35,1,35,3,35,1092,8,35,
        1,36,1,36,3,36,1096,8,36,1,37,1,37,3,37,1100,8,37,1,38,1,38,3,38,
        1104,8,38,1,39,1,39,3,39,1108,8,39,1,40,1,40,3,40,1112,8,40,1,41,
        1,41,3,41,1116,8,41,1,42,1,42,3,42,1120,8,42,1,43,1,43,3,43,1124,
        8,43,1,44,1,44,3,44,1128,8,44,1,45,1,45,3,45,1132,8,45,1,46,1,46,
        3,46,1136,8,46,1,47,1,47,3,47,1140,8,47,1,48,1,48,3,48,1144,8,48,
        1,49,1,49,3,49,1148,8,49,1,50,1,50,3,50,1152,8,50,1,51,1,51,3,51,
        1156,8,51,1,52,1,52,3,52,1160,8,52,1,53,1,53,3,53,1164,8,53,1,54,
        1,54,3,54,1168,8,54,1,55,1,55,3,55,1172,8,55,1,56,1,56,3,56,1176,
        8,56,1,57,1,57,3,57,1180,8,57,1,58,1,58,3,58,1184,8,58,1,59,1,59,
        3,59,1188,8,59,1,60,1,60,3,60,1192,8,60,1,61,1,61,3,61,1196,8,61,
        1,62,1,62,3,62,1200,8,62,1,63,1,63,3,63,1204,8,63,1,64,1,64,3,64,
        1208,8,64,1,65,1,65,3,65,1212,8,65,1,66,1,66,3,66,1216,8,66,1,67,
        1,67,3,67,1220,8,67,1,68,1,68,3,68,1224,8,68,1,69,1,69,3,69,1228,
        8,69,1,70,1,70,3,70,1232,8,70,1,71,1,71,3,71,1236,8,71,1,72,1,72,
        3,72,1240,8,72,1,73,1,73,3,73,1244,8,73,1,74,1,74,3,74,1248,8,74,
        1,75,1,75,3,75,1252,8,75,1,76,1,76,3,76,1256,8,76,1,77,1,77,3,77,
        1260,8,77,1,78,1,78,3,78,1264,8,78,1,79,1,79,3,79,1268,8,79,1,80,
        1,80,3,80,1272,8,80,1,81,1,81,3,81,1276,8,81,1,82,1,82,3,82,1280,
        8,82,1,83,1,83,3,83,1284,8,83,1,84,1,84,3,84,1288,8,84,1,85,1,85,
        3,85,1292,8,85,1,86,1,86,3,86,1296,8,86,1,87,1,87,3,87,1300,8,87,
        1,88,1,88,3,88,1304,8,88,1,89,1,89,3,89,1308,8,89,1,90,1,90,3,90,
        1312,8,90,1,91,1,91,3,91,1316,8,91,1,92,1,92,3,92,1320,8,92,1,93,
        1,93,3,93,1324,8,93,1,94,1,94,3,94,1328,8,94,1,95,1,95,3,95,1332,
        8,95,1,96,1,96,3,96,1336,8,96,1,97,1,97,3,97,1340,8,97,1,98,1,98,
        3,98,1344,8,98,1,99,1,99,3,99,1348,8,99,1,100,1,100,3,100,1352,8,
        100,1,101,1,101,3,101,1356,8,101,1,102,1,102,3,102,1360,8,102,1,
        103,1,103,3,103,1364,8,103,1,104,1,104,3,104,1368,8,104,1,105,1,
        105,3,105,1372,8,105,1,106,1,106,3,106,1376,8,106,1,107,1,107,3,
        107,1380,8,107,1,108,1,108,3,108,1384,8,108,1,109,1,109,3,109,1388,
        8,109,1,110,1,110,3,110,1392,8,110,1,111,1,111,3,111,1396,8,111,
        1,112,1,112,3,112,1400,8,112,1,113,1,113,3,113,1404,8,113,1,114,
        1,114,3,114,1408,8,114,1,115,1,115,3,115,1412,8,115,1,116,1,116,
        3,116,1416,8,116,1,117,1,117,3,117,1420,8,117,1,118,1,118,3,118,
        1424,8,118,1,119,1,119,3,119,1428,8,119,1,120,1,120,3,120,1432,8,
        120,1,121,1,121,3,121,1436,8,121,1,122,1,122,3,122,1440,8,122,1,
        123,1,123,3,123,1444,8,123,1,124,1,124,3,124,1448,8,124,1,125,1,
        125,3,125,1452,8,125,1,126,1,126,1,126,0,0,127,0,2,4,6,8,10,12,14,
        16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,
        60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
        102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,
        134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,
        166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,
        198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,
        230,232,234,236,238,240,242,244,246,248,250,252,0,2,2,0,4,12,131,
        131,2,0,5,12,131,131,1682,0,257,1,0,0,0,2,260,1,0,0,0,4,263,1,0,
        0,0,6,269,1,0,0,0,8,273,1,0,0,0,10,275,1,0,0,0,12,278,1,0,0,0,14,
        631,1,0,0,0,16,981,1,0,0,0,18,985,1,0,0,0,20,989,1,0,0,0,22,993,
        1,0,0,0,24,997,1,0,0,0,26,1001,1,0,0,0,28,1005,1,0,0,0,30,1009,1,
        0,0,0,32,1013,1,0,0,0,34,1017,1,0,0,0,36,1021,1,0,0,0,38,1025,1,
        0,0,0,40,1029,1,0,0,0,42,1033,1,0,0,0,44,1037,1,0,0,0,46,1041,1,
        0,0,0,48,1045,1,0,0,0,50,1049,1,0,0,0,52,1053,1,0,0,0,54,1057,1,
        0,0,0,56,1061,1,0,0,0,58,1065,1,0,0,0,60,1069,1,0,0,0,62,1073,1,
        0,0,0,64,1077,1,0,0,0,66,1081,1,0,0,0,68,1085,1,0,0,0,70,1089,1,
        0,0,0,72,1093,1,0,0,0,74,1097,1,0,0,0,76,1101,1,0,0,0,78,1105,1,
        0,0,0,80,1109,1,0,0,0,82,1113,1,0,0,0,84,1117,1,0,0,0,86,1121,1,
        0,0,0,88,1125,1,0,0,0,90,1129,1,0,0,0,92,1133,1,0,0,0,94,1137,1,
        0,0,0,96,1141,1,0,0,0,98,1145,1,0,0,0,100,1149,1,0,0,0,102,1153,
        1,0,0,0,104,1157,1,0,0,0,106,1161,1,0,0,0,108,1165,1,0,0,0,110,1169,
        1,0,0,0,112,1173,1,0,0,0,114,1177,1,0,0,0,116,1181,1,0,0,0,118,1185,
        1,0,0,0,120,1189,1,0,0,0,122,1193,1,0,0,0,124,1197,1,0,0,0,126,1201,
        1,0,0,0,128,1205,1,0,0,0,130,1209,1,0,0,0,132,1213,1,0,0,0,134,1217,
        1,0,0,0,136,1221,1,0,0,0,138,1225,1,0,0,0,140,1229,1,0,0,0,142,1233,
        1,0,0,0,144,1237,1,0,0,0,146,1241,1,0,0,0,148,1245,1,0,0,0,150,1249,
        1,0,0,0,152,1253,1,0,0,0,154,1257,1,0,0,0,156,1261,1,0,0,0,158,1265,
        1,0,0,0,160,1269,1,0,0,0,162,1273,1,0,0,0,164,1277,1,0,0,0,166,1281,
        1,0,0,0,168,1285,1,0,0,0,170,1289,1,0,0,0,172,1293,1,0,0,0,174,1297,
        1,0,0,0,176,1301,1,0,0,0,178,1305,1,0,0,0,180,1309,1,0,0,0,182,1313,
        1,0,0,0,184,1317,1,0,0,0,186,1321,1,0,0,0,188,1325,1,0,0,0,190,1329,
        1,0,0,0,192,1333,1,0,0,0,194,1337,1,0,0,0,196,1341,1,0,0,0,198,1345,
        1,0,0,0,200,1349,1,0,0,0,202,1353,1,0,0,0,204,1357,1,0,0,0,206,1361,
        1,0,0,0,208,1365,1,0,0,0,210,1369,1,0,0,0,212,1373,1,0,0,0,214,1377,
        1,0,0,0,216,1381,1,0,0,0,218,1385,1,0,0,0,220,1389,1,0,0,0,222,1393,
        1,0,0,0,224,1397,1,0,0,0,226,1401,1,0,0,0,228,1405,1,0,0,0,230,1409,
        1,0,0,0,232,1413,1,0,0,0,234,1417,1,0,0,0,236,1421,1,0,0,0,238,1425,
        1,0,0,0,240,1429,1,0,0,0,242,1433,1,0,0,0,244,1437,1,0,0,0,246,1441,
        1,0,0,0,248,1445,1,0,0,0,250,1449,1,0,0,0,252,1453,1,0,0,0,254,256,
        3,4,2,0,255,254,1,0,0,0,256,259,1,0,0,0,257,255,1,0,0,0,257,258,
        1,0,0,0,258,1,1,0,0,0,259,257,1,0,0,0,260,261,3,0,0,0,261,262,5,
        0,0,1,262,3,1,0,0,0,263,264,5,1,0,0,264,265,3,6,3,0,265,266,5,2,
        0,0,266,267,3,6,3,0,267,268,5,3,0,0,268,5,1,0,0,0,269,270,7,0,0,
        0,270,7,1,0,0,0,271,274,3,12,6,0,272,274,3,14,7,0,273,271,1,0,0,
        0,273,272,1,0,0,0,274,9,1,0,0,0,275,276,3,8,4,0,276,277,5,0,0,1,
        277,11,1,0,0,0,278,280,3,26,13,0,279,281,3,16,8,0,280,279,1,0,0,
        0,280,281,1,0,0,0,281,283,1,0,0,0,282,284,3,192,96,0,283,282,1,0,
        0,0,283,284,1,0,0,0,284,286,1,0,0,0,285,287,3,108,54,0,286,285,1,
        0,0,0,286,287,1,0,0,0,287,289,1,0,0,0,288,290,3,40,20,0,289,288,
        1,0,0,0,289,290,1,0,0,0,290,292,1,0,0,0,291,293,3,204,102,0,292,
        291,1,0,0,0,292,293,1,0,0,0,293,295,1,0,0,0,294,296,3,50,25,0,295,
        294,1,0,0,0,295,296,1,0,0,0,296,298,1,0,0,0,297,299,3,80,40,0,298,
        297,1,0,0,0,298,299,1,0,0,0,299,301,1,0,0,0,300,302,3,184,92,0,301,
        300,1,0,0,0,301,302,1,0,0,0,302,304,1,0,0,0,303,305,3,172,86,0,304,
        303,1,0,0,0,304,305,1,0,0,0,305,307,1,0,0,0,306,308,3,24,12,0,307,
        306,1,0,0,0,307,308,1,0,0,0,308,310,1,0,0,0,309,311,3,126,63,0,310,
        309,1,0,0,0,310,311,1,0,0,0,311,313,1,0,0,0,312,314,3,22,11,0,313,
        312,1,0,0,0,313,314,1,0,0,0,314,316,1,0,0,0,315,317,3,228,114,0,
        316,315,1,0,0,0,316,317,1,0,0,0,317,319,1,0,0,0,318,320,3,180,90,
        0,319,318,1,0,0,0,319,320,1,0,0,0,320,322,1,0,0,0,321,323,3,208,
        104,0,322,321,1,0,0,0,322,323,1,0,0,0,323,325,1,0,0,0,324,326,3,
        84,42,0,325,324,1,0,0,0,325,326,1,0,0,0,326,328,1,0,0,0,327,329,
        3,54,27,0,328,327,1,0,0,0,328,329,1,0,0,0,329,331,1,0,0,0,330,332,
        3,110,55,0,331,330,1,0,0,0,331,332,1,0,0,0,332,334,1,0,0,0,333,335,
        3,130,65,0,334,333,1,0,0,0,334,335,1,0,0,0,335,337,1,0,0,0,336,338,
        3,210,105,0,337,336,1,0,0,0,337,338,1,0,0,0,338,340,1,0,0,0,339,
        341,3,48,24,0,340,339,1,0,0,0,340,341,1,0,0,0,341,343,1,0,0,0,342,
        344,3,206,103,0,343,342,1,0,0,0,343,344,1,0,0,0,344,346,1,0,0,0,
        345,347,3,238,119,0,346,345,1,0,0,0,346,347,1,0,0,0,347,349,1,0,
        0,0,348,350,3,68,34,0,349,348,1,0,0,0,349,350,1,0,0,0,350,352,1,
        0,0,0,351,353,3,62,31,0,352,351,1,0,0,0,352,353,1,0,0,0,353,355,
        1,0,0,0,354,356,3,124,62,0,355,354,1,0,0,0,355,356,1,0,0,0,356,358,
        1,0,0,0,357,359,3,72,36,0,358,357,1,0,0,0,358,359,1,0,0,0,359,361,
        1,0,0,0,360,362,3,224,112,0,361,360,1,0,0,0,361,362,1,0,0,0,362,
        364,1,0,0,0,363,365,3,234,117,0,364,363,1,0,0,0,364,365,1,0,0,0,
        365,367,1,0,0,0,366,368,3,146,73,0,367,366,1,0,0,0,367,368,1,0,0,
        0,368,370,1,0,0,0,369,371,3,150,75,0,370,369,1,0,0,0,370,371,1,0,
        0,0,371,373,1,0,0,0,372,374,3,212,106,0,373,372,1,0,0,0,373,374,
        1,0,0,0,374,376,1,0,0,0,375,377,3,140,70,0,376,375,1,0,0,0,376,377,
        1,0,0,0,377,379,1,0,0,0,378,380,3,32,16,0,379,378,1,0,0,0,379,380,
        1,0,0,0,380,382,1,0,0,0,381,383,3,66,33,0,382,381,1,0,0,0,382,383,
        1,0,0,0,383,385,1,0,0,0,384,386,3,242,121,0,385,384,1,0,0,0,385,
        386,1,0,0,0,386,388,1,0,0,0,387,389,3,214,107,0,388,387,1,0,0,0,
        388,389,1,0,0,0,389,391,1,0,0,0,390,392,3,188,94,0,391,390,1,0,0,
        0,391,392,1,0,0,0,392,394,1,0,0,0,393,395,3,76,38,0,394,393,1,0,
        0,0,394,395,1,0,0,0,395,397,1,0,0,0,396,398,3,142,71,0,397,396,1,
        0,0,0,397,398,1,0,0,0,398,400,1,0,0,0,399,401,3,78,39,0,400,399,
        1,0,0,0,400,401,1,0,0,0,401,403,1,0,0,0,402,404,3,18,9,0,403,402,
        1,0,0,0,403,404,1,0,0,0,404,406,1,0,0,0,405,407,3,158,79,0,406,405,
        1,0,0,0,406,407,1,0,0,0,407,409,1,0,0,0,408,410,3,174,87,0,409,408,
        1,0,0,0,409,410,1,0,0,0,410,412,1,0,0,0,411,413,3,148,74,0,412,411,
        1,0,0,0,412,413,1,0,0,0,413,415,1,0,0,0,414,416,3,230,115,0,415,
        414,1,0,0,0,415,416,1,0,0,0,416,418,1,0,0,0,417,419,3,120,60,0,418,
        417,1,0,0,0,418,419,1,0,0,0,419,421,1,0,0,0,420,422,3,112,56,0,421,
        420,1,0,0,0,421,422,1,0,0,0,422,424,1,0,0,0,423,425,3,168,84,0,424,
        423,1,0,0,0,424,425,1,0,0,0,425,427,1,0,0,0,426,428,3,52,26,0,427,
        426,1,0,0,0,427,428,1,0,0,0,428,430,1,0,0,0,429,431,3,86,43,0,430,
        429,1,0,0,0,430,431,1,0,0,0,431,433,1,0,0,0,432,434,3,128,64,0,433,
        432,1,0,0,0,433,434,1,0,0,0,434,436,1,0,0,0,435,437,3,20,10,0,436,
        435,1,0,0,0,436,437,1,0,0,0,437,439,1,0,0,0,438,440,3,220,110,0,
        439,438,1,0,0,0,439,440,1,0,0,0,440,442,1,0,0,0,441,443,3,156,78,
        0,442,441,1,0,0,0,442,443,1,0,0,0,443,445,1,0,0,0,444,446,3,246,
        123,0,445,444,1,0,0,0,445,446,1,0,0,0,446,448,1,0,0,0,447,449,3,
        244,122,0,448,447,1,0,0,0,448,449,1,0,0,0,449,451,1,0,0,0,450,452,
        3,216,108,0,451,450,1,0,0,0,451,452,1,0,0,0,452,454,1,0,0,0,453,
        455,3,38,19,0,454,453,1,0,0,0,454,455,1,0,0,0,455,457,1,0,0,0,456,
        458,3,64,32,0,457,456,1,0,0,0,457,458,1,0,0,0,458,460,1,0,0,0,459,
        461,3,98,49,0,460,459,1,0,0,0,460,461,1,0,0,0,461,463,1,0,0,0,462,
        464,3,232,116,0,463,462,1,0,0,0,463,464,1,0,0,0,464,466,1,0,0,0,
        465,467,3,28,14,0,466,465,1,0,0,0,466,467,1,0,0,0,467,469,1,0,0,
        0,468,470,3,36,18,0,469,468,1,0,0,0,469,470,1,0,0,0,470,472,1,0,
        0,0,471,473,3,96,48,0,472,471,1,0,0,0,472,473,1,0,0,0,473,475,1,
        0,0,0,474,476,3,134,67,0,475,474,1,0,0,0,475,476,1,0,0,0,476,478,
        1,0,0,0,477,479,3,34,17,0,478,477,1,0,0,0,478,479,1,0,0,0,479,481,
        1,0,0,0,480,482,3,240,120,0,481,480,1,0,0,0,481,482,1,0,0,0,482,
        484,1,0,0,0,483,485,3,70,35,0,484,483,1,0,0,0,484,485,1,0,0,0,485,
        487,1,0,0,0,486,488,3,218,109,0,487,486,1,0,0,0,487,488,1,0,0,0,
        488,490,1,0,0,0,489,491,3,200,100,0,490,489,1,0,0,0,490,491,1,0,
        0,0,491,493,1,0,0,0,492,494,3,30,15,0,493,492,1,0,0,0,493,494,1,
        0,0,0,494,496,1,0,0,0,495,497,3,250,125,0,496,495,1,0,0,0,496,497,
        1,0,0,0,497,499,1,0,0,0,498,500,3,166,83,0,499,498,1,0,0,0,499,500,
        1,0,0,0,500,502,1,0,0,0,501,503,3,44,22,0,502,501,1,0,0,0,502,503,
        1,0,0,0,503,505,1,0,0,0,504,506,3,196,98,0,505,504,1,0,0,0,505,506,
        1,0,0,0,506,508,1,0,0,0,507,509,3,178,89,0,508,507,1,0,0,0,508,509,
        1,0,0,0,509,511,1,0,0,0,510,512,3,106,53,0,511,510,1,0,0,0,511,512,
        1,0,0,0,512,514,1,0,0,0,513,515,3,136,68,0,514,513,1,0,0,0,514,515,
        1,0,0,0,515,517,1,0,0,0,516,518,3,182,91,0,517,516,1,0,0,0,517,518,
        1,0,0,0,518,520,1,0,0,0,519,521,3,132,66,0,520,519,1,0,0,0,520,521,
        1,0,0,0,521,523,1,0,0,0,522,524,3,170,85,0,523,522,1,0,0,0,523,524,
        1,0,0,0,524,526,1,0,0,0,525,527,3,202,101,0,526,525,1,0,0,0,526,
        527,1,0,0,0,527,529,1,0,0,0,528,530,3,190,95,0,529,528,1,0,0,0,529,
        530,1,0,0,0,530,532,1,0,0,0,531,533,3,88,44,0,532,531,1,0,0,0,532,
        533,1,0,0,0,533,535,1,0,0,0,534,536,3,164,82,0,535,534,1,0,0,0,535,
        536,1,0,0,0,536,538,1,0,0,0,537,539,3,222,111,0,538,537,1,0,0,0,
        538,539,1,0,0,0,539,541,1,0,0,0,540,542,3,236,118,0,541,540,1,0,
        0,0,541,542,1,0,0,0,542,544,1,0,0,0,543,545,3,104,52,0,544,543,1,
        0,0,0,544,545,1,0,0,0,545,547,1,0,0,0,546,548,3,186,93,0,547,546,
        1,0,0,0,547,548,1,0,0,0,548,550,1,0,0,0,549,551,3,102,51,0,550,549,
        1,0,0,0,550,551,1,0,0,0,551,553,1,0,0,0,552,554,3,46,23,0,553,552,
        1,0,0,0,553,554,1,0,0,0,554,556,1,0,0,0,555,557,3,116,58,0,556,555,
        1,0,0,0,556,557,1,0,0,0,557,559,1,0,0,0,558,560,3,56,28,0,559,558,
        1,0,0,0,559,560,1,0,0,0,560,562,1,0,0,0,561,563,3,82,41,0,562,561,
        1,0,0,0,562,563,1,0,0,0,563,565,1,0,0,0,564,566,3,226,113,0,565,
        564,1,0,0,0,565,566,1,0,0,0,566,568,1,0,0,0,567,569,3,42,21,0,568,
        567,1,0,0,0,568,569,1,0,0,0,569,571,1,0,0,0,570,572,3,138,69,0,571,
        570,1,0,0,0,571,572,1,0,0,0,572,574,1,0,0,0,573,575,3,114,57,0,574,
        573,1,0,0,0,574,575,1,0,0,0,575,577,1,0,0,0,576,578,3,90,45,0,577,
        576,1,0,0,0,577,578,1,0,0,0,578,580,1,0,0,0,579,581,3,160,80,0,580,
        579,1,0,0,0,580,581,1,0,0,0,581,583,1,0,0,0,582,584,3,144,72,0,583,
        582,1,0,0,0,583,584,1,0,0,0,584,586,1,0,0,0,585,587,3,100,50,0,586,
        585,1,0,0,0,586,587,1,0,0,0,587,589,1,0,0,0,588,590,3,118,59,0,589,
        588,1,0,0,0,589,590,1,0,0,0,590,592,1,0,0,0,591,593,3,194,97,0,592,
        591,1,0,0,0,592,593,1,0,0,0,593,595,1,0,0,0,594,596,3,58,29,0,595,
        594,1,0,0,0,595,596,1,0,0,0,596,598,1,0,0,0,597,599,3,176,88,0,598,
        597,1,0,0,0,598,599,1,0,0,0,599,601,1,0,0,0,600,602,3,152,76,0,601,
        600,1,0,0,0,601,602,1,0,0,0,602,604,1,0,0,0,603,605,3,248,124,0,
        604,603,1,0,0,0,604,605,1,0,0,0,605,607,1,0,0,0,606,608,3,198,99,
        0,607,606,1,0,0,0,607,608,1,0,0,0,608,610,1,0,0,0,609,611,3,60,30,
        0,610,609,1,0,0,0,610,611,1,0,0,0,611,613,1,0,0,0,612,614,3,162,
        81,0,613,612,1,0,0,0,613,614,1,0,0,0,614,616,1,0,0,0,615,617,3,122,
        61,0,616,615,1,0,0,0,616,617,1,0,0,0,617,619,1,0,0,0,618,620,3,92,
        46,0,619,618,1,0,0,0,619,620,1,0,0,0,620,622,1,0,0,0,621,623,3,154,
        77,0,622,621,1,0,0,0,622,623,1,0,0,0,623,625,1,0,0,0,624,626,3,74,
        37,0,625,624,1,0,0,0,625,626,1,0,0,0,626,628,1,0,0,0,627,629,3,94,
        47,0,628,627,1,0,0,0,628,629,1,0,0,0,629,13,1,0,0,0,630,632,3,192,
        96,0,631,630,1,0,0,0,631,632,1,0,0,0,632,634,1,0,0,0,633,635,3,108,
        54,0,634,633,1,0,0,0,634,635,1,0,0,0,635,637,1,0,0,0,636,638,3,40,
        20,0,637,636,1,0,0,0,637,638,1,0,0,0,638,640,1,0,0,0,639,641,3,204,
        102,0,640,639,1,0,0,0,640,641,1,0,0,0,641,643,1,0,0,0,642,644,3,
        50,25,0,643,642,1,0,0,0,643,644,1,0,0,0,644,646,1,0,0,0,645,647,
        3,80,40,0,646,645,1,0,0,0,646,647,1,0,0,0,647,649,1,0,0,0,648,650,
        3,184,92,0,649,648,1,0,0,0,649,650,1,0,0,0,650,652,1,0,0,0,651,653,
        3,172,86,0,652,651,1,0,0,0,652,653,1,0,0,0,653,655,1,0,0,0,654,656,
        3,24,12,0,655,654,1,0,0,0,655,656,1,0,0,0,656,658,1,0,0,0,657,659,
        3,126,63,0,658,657,1,0,0,0,658,659,1,0,0,0,659,661,1,0,0,0,660,662,
        3,22,11,0,661,660,1,0,0,0,661,662,1,0,0,0,662,664,1,0,0,0,663,665,
        3,228,114,0,664,663,1,0,0,0,664,665,1,0,0,0,665,667,1,0,0,0,666,
        668,3,180,90,0,667,666,1,0,0,0,667,668,1,0,0,0,668,670,1,0,0,0,669,
        671,3,208,104,0,670,669,1,0,0,0,670,671,1,0,0,0,671,673,1,0,0,0,
        672,674,3,84,42,0,673,672,1,0,0,0,673,674,1,0,0,0,674,676,1,0,0,
        0,675,677,3,54,27,0,676,675,1,0,0,0,676,677,1,0,0,0,677,679,1,0,
        0,0,678,680,3,110,55,0,679,678,1,0,0,0,679,680,1,0,0,0,680,682,1,
        0,0,0,681,683,3,130,65,0,682,681,1,0,0,0,682,683,1,0,0,0,683,685,
        1,0,0,0,684,686,3,210,105,0,685,684,1,0,0,0,685,686,1,0,0,0,686,
        688,1,0,0,0,687,689,3,48,24,0,688,687,1,0,0,0,688,689,1,0,0,0,689,
        691,1,0,0,0,690,692,3,206,103,0,691,690,1,0,0,0,691,692,1,0,0,0,
        692,694,1,0,0,0,693,695,3,238,119,0,694,693,1,0,0,0,694,695,1,0,
        0,0,695,697,1,0,0,0,696,698,3,68,34,0,697,696,1,0,0,0,697,698,1,
        0,0,0,698,700,1,0,0,0,699,701,3,62,31,0,700,699,1,0,0,0,700,701,
        1,0,0,0,701,703,1,0,0,0,702,704,3,124,62,0,703,702,1,0,0,0,703,704,
        1,0,0,0,704,706,1,0,0,0,705,707,3,72,36,0,706,705,1,0,0,0,706,707,
        1,0,0,0,707,709,1,0,0,0,708,710,3,224,112,0,709,708,1,0,0,0,709,
        710,1,0,0,0,710,712,1,0,0,0,711,713,3,234,117,0,712,711,1,0,0,0,
        712,713,1,0,0,0,713,715,1,0,0,0,714,716,3,146,73,0,715,714,1,0,0,
        0,715,716,1,0,0,0,716,718,1,0,0,0,717,719,3,150,75,0,718,717,1,0,
        0,0,718,719,1,0,0,0,719,721,1,0,0,0,720,722,3,212,106,0,721,720,
        1,0,0,0,721,722,1,0,0,0,722,724,1,0,0,0,723,725,3,140,70,0,724,723,
        1,0,0,0,724,725,1,0,0,0,725,727,1,0,0,0,726,728,3,32,16,0,727,726,
        1,0,0,0,727,728,1,0,0,0,728,730,1,0,0,0,729,731,3,66,33,0,730,729,
        1,0,0,0,730,731,1,0,0,0,731,733,1,0,0,0,732,734,3,242,121,0,733,
        732,1,0,0,0,733,734,1,0,0,0,734,736,1,0,0,0,735,737,3,214,107,0,
        736,735,1,0,0,0,736,737,1,0,0,0,737,739,1,0,0,0,738,740,3,188,94,
        0,739,738,1,0,0,0,739,740,1,0,0,0,740,742,1,0,0,0,741,743,3,76,38,
        0,742,741,1,0,0,0,742,743,1,0,0,0,743,745,1,0,0,0,744,746,3,142,
        71,0,745,744,1,0,0,0,745,746,1,0,0,0,746,748,1,0,0,0,747,749,3,78,
        39,0,748,747,1,0,0,0,748,749,1,0,0,0,749,751,1,0,0,0,750,752,3,16,
        8,0,751,750,1,0,0,0,751,752,1,0,0,0,752,754,1,0,0,0,753,755,3,18,
        9,0,754,753,1,0,0,0,754,755,1,0,0,0,755,757,1,0,0,0,756,758,3,158,
        79,0,757,756,1,0,0,0,757,758,1,0,0,0,758,760,1,0,0,0,759,761,3,174,
        87,0,760,759,1,0,0,0,760,761,1,0,0,0,761,763,1,0,0,0,762,764,3,148,
        74,0,763,762,1,0,0,0,763,764,1,0,0,0,764,766,1,0,0,0,765,767,3,230,
        115,0,766,765,1,0,0,0,766,767,1,0,0,0,767,769,1,0,0,0,768,770,3,
        120,60,0,769,768,1,0,0,0,769,770,1,0,0,0,770,772,1,0,0,0,771,773,
        3,112,56,0,772,771,1,0,0,0,772,773,1,0,0,0,773,775,1,0,0,0,774,776,
        3,168,84,0,775,774,1,0,0,0,775,776,1,0,0,0,776,778,1,0,0,0,777,779,
        3,52,26,0,778,777,1,0,0,0,778,779,1,0,0,0,779,781,1,0,0,0,780,782,
        3,86,43,0,781,780,1,0,0,0,781,782,1,0,0,0,782,784,1,0,0,0,783,785,
        3,128,64,0,784,783,1,0,0,0,784,785,1,0,0,0,785,787,1,0,0,0,786,788,
        3,20,10,0,787,786,1,0,0,0,787,788,1,0,0,0,788,790,1,0,0,0,789,791,
        3,220,110,0,790,789,1,0,0,0,790,791,1,0,0,0,791,793,1,0,0,0,792,
        794,3,156,78,0,793,792,1,0,0,0,793,794,1,0,0,0,794,796,1,0,0,0,795,
        797,3,246,123,0,796,795,1,0,0,0,796,797,1,0,0,0,797,799,1,0,0,0,
        798,800,3,244,122,0,799,798,1,0,0,0,799,800,1,0,0,0,800,802,1,0,
        0,0,801,803,3,216,108,0,802,801,1,0,0,0,802,803,1,0,0,0,803,805,
        1,0,0,0,804,806,3,38,19,0,805,804,1,0,0,0,805,806,1,0,0,0,806,808,
        1,0,0,0,807,809,3,64,32,0,808,807,1,0,0,0,808,809,1,0,0,0,809,811,
        1,0,0,0,810,812,3,98,49,0,811,810,1,0,0,0,811,812,1,0,0,0,812,814,
        1,0,0,0,813,815,3,232,116,0,814,813,1,0,0,0,814,815,1,0,0,0,815,
        817,1,0,0,0,816,818,3,28,14,0,817,816,1,0,0,0,817,818,1,0,0,0,818,
        820,1,0,0,0,819,821,3,36,18,0,820,819,1,0,0,0,820,821,1,0,0,0,821,
        823,1,0,0,0,822,824,3,96,48,0,823,822,1,0,0,0,823,824,1,0,0,0,824,
        826,1,0,0,0,825,827,3,134,67,0,826,825,1,0,0,0,826,827,1,0,0,0,827,
        829,1,0,0,0,828,830,3,34,17,0,829,828,1,0,0,0,829,830,1,0,0,0,830,
        832,1,0,0,0,831,833,3,240,120,0,832,831,1,0,0,0,832,833,1,0,0,0,
        833,835,1,0,0,0,834,836,3,70,35,0,835,834,1,0,0,0,835,836,1,0,0,
        0,836,838,1,0,0,0,837,839,3,218,109,0,838,837,1,0,0,0,838,839,1,
        0,0,0,839,841,1,0,0,0,840,842,3,200,100,0,841,840,1,0,0,0,841,842,
        1,0,0,0,842,844,1,0,0,0,843,845,3,30,15,0,844,843,1,0,0,0,844,845,
        1,0,0,0,845,847,1,0,0,0,846,848,3,250,125,0,847,846,1,0,0,0,847,
        848,1,0,0,0,848,850,1,0,0,0,849,851,3,166,83,0,850,849,1,0,0,0,850,
        851,1,0,0,0,851,853,1,0,0,0,852,854,3,44,22,0,853,852,1,0,0,0,853,
        854,1,0,0,0,854,856,1,0,0,0,855,857,3,196,98,0,856,855,1,0,0,0,856,
        857,1,0,0,0,857,859,1,0,0,0,858,860,3,178,89,0,859,858,1,0,0,0,859,
        860,1,0,0,0,860,862,1,0,0,0,861,863,3,106,53,0,862,861,1,0,0,0,862,
        863,1,0,0,0,863,865,1,0,0,0,864,866,3,136,68,0,865,864,1,0,0,0,865,
        866,1,0,0,0,866,868,1,0,0,0,867,869,3,182,91,0,868,867,1,0,0,0,868,
        869,1,0,0,0,869,871,1,0,0,0,870,872,3,132,66,0,871,870,1,0,0,0,871,
        872,1,0,0,0,872,874,1,0,0,0,873,875,3,170,85,0,874,873,1,0,0,0,874,
        875,1,0,0,0,875,877,1,0,0,0,876,878,3,202,101,0,877,876,1,0,0,0,
        877,878,1,0,0,0,878,880,1,0,0,0,879,881,3,190,95,0,880,879,1,0,0,
        0,880,881,1,0,0,0,881,883,1,0,0,0,882,884,3,88,44,0,883,882,1,0,
        0,0,883,884,1,0,0,0,884,886,1,0,0,0,885,887,3,164,82,0,886,885,1,
        0,0,0,886,887,1,0,0,0,887,889,1,0,0,0,888,890,3,222,111,0,889,888,
        1,0,0,0,889,890,1,0,0,0,890,892,1,0,0,0,891,893,3,236,118,0,892,
        891,1,0,0,0,892,893,1,0,0,0,893,895,1,0,0,0,894,896,3,104,52,0,895,
        894,1,0,0,0,895,896,1,0,0,0,896,898,1,0,0,0,897,899,3,186,93,0,898,
        897,1,0,0,0,898,899,1,0,0,0,899,901,1,0,0,0,900,902,3,102,51,0,901,
        900,1,0,0,0,901,902,1,0,0,0,902,904,1,0,0,0,903,905,3,46,23,0,904,
        903,1,0,0,0,904,905,1,0,0,0,905,907,1,0,0,0,906,908,3,116,58,0,907,
        906,1,0,0,0,907,908,1,0,0,0,908,910,1,0,0,0,909,911,3,56,28,0,910,
        909,1,0,0,0,910,911,1,0,0,0,911,913,1,0,0,0,912,914,3,82,41,0,913,
        912,1,0,0,0,913,914,1,0,0,0,914,916,1,0,0,0,915,917,3,226,113,0,
        916,915,1,0,0,0,916,917,1,0,0,0,917,919,1,0,0,0,918,920,3,42,21,
        0,919,918,1,0,0,0,919,920,1,0,0,0,920,922,1,0,0,0,921,923,3,138,
        69,0,922,921,1,0,0,0,922,923,1,0,0,0,923,925,1,0,0,0,924,926,3,114,
        57,0,925,924,1,0,0,0,925,926,1,0,0,0,926,928,1,0,0,0,927,929,3,90,
        45,0,928,927,1,0,0,0,928,929,1,0,0,0,929,931,1,0,0,0,930,932,3,160,
        80,0,931,930,1,0,0,0,931,932,1,0,0,0,932,934,1,0,0,0,933,935,3,144,
        72,0,934,933,1,0,0,0,934,935,1,0,0,0,935,937,1,0,0,0,936,938,3,100,
        50,0,937,936,1,0,0,0,937,938,1,0,0,0,938,940,1,0,0,0,939,941,3,118,
        59,0,940,939,1,0,0,0,940,941,1,0,0,0,941,943,1,0,0,0,942,944,3,194,
        97,0,943,942,1,0,0,0,943,944,1,0,0,0,944,946,1,0,0,0,945,947,3,58,
        29,0,946,945,1,0,0,0,946,947,1,0,0,0,947,949,1,0,0,0,948,950,3,176,
        88,0,949,948,1,0,0,0,949,950,1,0,0,0,950,952,1,0,0,0,951,953,3,152,
        76,0,952,951,1,0,0,0,952,953,1,0,0,0,953,955,1,0,0,0,954,956,3,248,
        124,0,955,954,1,0,0,0,955,956,1,0,0,0,956,958,1,0,0,0,957,959,3,
        198,99,0,958,957,1,0,0,0,958,959,1,0,0,0,959,961,1,0,0,0,960,962,
        3,60,30,0,961,960,1,0,0,0,961,962,1,0,0,0,962,964,1,0,0,0,963,965,
        3,162,81,0,964,963,1,0,0,0,964,965,1,0,0,0,965,967,1,0,0,0,966,968,
        3,122,61,0,967,966,1,0,0,0,967,968,1,0,0,0,968,970,1,0,0,0,969,971,
        3,92,46,0,970,969,1,0,0,0,970,971,1,0,0,0,971,973,1,0,0,0,972,974,
        3,154,77,0,973,972,1,0,0,0,973,974,1,0,0,0,974,976,1,0,0,0,975,977,
        3,74,37,0,976,975,1,0,0,0,976,977,1,0,0,0,977,979,1,0,0,0,978,980,
        3,94,47,0,979,978,1,0,0,0,979,980,1,0,0,0,980,15,1,0,0,0,981,983,
        5,13,0,0,982,984,3,252,126,0,983,982,1,0,0,0,983,984,1,0,0,0,984,
        17,1,0,0,0,985,987,5,14,0,0,986,988,3,252,126,0,987,986,1,0,0,0,
        987,988,1,0,0,0,988,19,1,0,0,0,989,991,5,15,0,0,990,992,3,252,126,
        0,991,990,1,0,0,0,991,992,1,0,0,0,992,21,1,0,0,0,993,995,5,16,0,
        0,994,996,3,252,126,0,995,994,1,0,0,0,995,996,1,0,0,0,996,23,1,0,
        0,0,997,999,5,17,0,0,998,1000,3,252,126,0,999,998,1,0,0,0,999,1000,
        1,0,0,0,1000,25,1,0,0,0,1001,1003,5,18,0,0,1002,1004,3,252,126,0,
        1003,1002,1,0,0,0,1003,1004,1,0,0,0,1004,27,1,0,0,0,1005,1007,5,
        19,0,0,1006,1008,3,252,126,0,1007,1006,1,0,0,0,1007,1008,1,0,0,0,
        1008,29,1,0,0,0,1009,1011,5,20,0,0,1010,1012,3,252,126,0,1011,1010,
        1,0,0,0,1011,1012,1,0,0,0,1012,31,1,0,0,0,1013,1015,5,21,0,0,1014,
        1016,3,252,126,0,1015,1014,1,0,0,0,1015,1016,1,0,0,0,1016,33,1,0,
        0,0,1017,1019,5,22,0,0,1018,1020,3,252,126,0,1019,1018,1,0,0,0,1019,
        1020,1,0,0,0,1020,35,1,0,0,0,1021,1023,5,23,0,0,1022,1024,3,252,
        126,0,1023,1022,1,0,0,0,1023,1024,1,0,0,0,1024,37,1,0,0,0,1025,1027,
        5,24,0,0,1026,1028,3,252,126,0,1027,1026,1,0,0,0,1027,1028,1,0,0,
        0,1028,39,1,0,0,0,1029,1031,5,25,0,0,1030,1032,3,252,126,0,1031,
        1030,1,0,0,0,1031,1032,1,0,0,0,1032,41,1,0,0,0,1033,1035,5,26,0,
        0,1034,1036,3,252,126,0,1035,1034,1,0,0,0,1035,1036,1,0,0,0,1036,
        43,1,0,0,0,1037,1039,5,27,0,0,1038,1040,3,252,126,0,1039,1038,1,
        0,0,0,1039,1040,1,0,0,0,1040,45,1,0,0,0,1041,1043,5,28,0,0,1042,
        1044,3,252,126,0,1043,1042,1,0,0,0,1043,1044,1,0,0,0,1044,47,1,0,
        0,0,1045,1047,5,29,0,0,1046,1048,3,252,126,0,1047,1046,1,0,0,0,1047,
        1048,1,0,0,0,1048,49,1,0,0,0,1049,1051,5,30,0,0,1050,1052,3,252,
        126,0,1051,1050,1,0,0,0,1051,1052,1,0,0,0,1052,51,1,0,0,0,1053,1055,
        5,31,0,0,1054,1056,3,252,126,0,1055,1054,1,0,0,0,1055,1056,1,0,0,
        0,1056,53,1,0,0,0,1057,1059,5,32,0,0,1058,1060,3,252,126,0,1059,
        1058,1,0,0,0,1059,1060,1,0,0,0,1060,55,1,0,0,0,1061,1063,5,33,0,
        0,1062,1064,3,252,126,0,1063,1062,1,0,0,0,1063,1064,1,0,0,0,1064,
        57,1,0,0,0,1065,1067,5,34,0,0,1066,1068,3,252,126,0,1067,1066,1,
        0,0,0,1067,1068,1,0,0,0,1068,59,1,0,0,0,1069,1071,5,35,0,0,1070,
        1072,3,252,126,0,1071,1070,1,0,0,0,1071,1072,1,0,0,0,1072,61,1,0,
        0,0,1073,1075,5,36,0,0,1074,1076,3,252,126,0,1075,1074,1,0,0,0,1075,
        1076,1,0,0,0,1076,63,1,0,0,0,1077,1079,5,37,0,0,1078,1080,3,252,
        126,0,1079,1078,1,0,0,0,1079,1080,1,0,0,0,1080,65,1,0,0,0,1081,1083,
        5,38,0,0,1082,1084,3,252,126,0,1083,1082,1,0,0,0,1083,1084,1,0,0,
        0,1084,67,1,0,0,0,1085,1087,5,39,0,0,1086,1088,3,252,126,0,1087,
        1086,1,0,0,0,1087,1088,1,0,0,0,1088,69,1,0,0,0,1089,1091,5,40,0,
        0,1090,1092,3,252,126,0,1091,1090,1,0,0,0,1091,1092,1,0,0,0,1092,
        71,1,0,0,0,1093,1095,5,41,0,0,1094,1096,3,252,126,0,1095,1094,1,
        0,0,0,1095,1096,1,0,0,0,1096,73,1,0,0,0,1097,1099,5,42,0,0,1098,
        1100,3,252,126,0,1099,1098,1,0,0,0,1099,1100,1,0,0,0,1100,75,1,0,
        0,0,1101,1103,5,43,0,0,1102,1104,3,252,126,0,1103,1102,1,0,0,0,1103,
        1104,1,0,0,0,1104,77,1,0,0,0,1105,1107,5,44,0,0,1106,1108,3,252,
        126,0,1107,1106,1,0,0,0,1107,1108,1,0,0,0,1108,79,1,0,0,0,1109,1111,
        5,45,0,0,1110,1112,3,252,126,0,1111,1110,1,0,0,0,1111,1112,1,0,0,
        0,1112,81,1,0,0,0,1113,1115,5,46,0,0,1114,1116,3,252,126,0,1115,
        1114,1,0,0,0,1115,1116,1,0,0,0,1116,83,1,0,0,0,1117,1119,5,47,0,
        0,1118,1120,3,252,126,0,1119,1118,1,0,0,0,1119,1120,1,0,0,0,1120,
        85,1,0,0,0,1121,1123,5,48,0,0,1122,1124,3,252,126,0,1123,1122,1,
        0,0,0,1123,1124,1,0,0,0,1124,87,1,0,0,0,1125,1127,5,49,0,0,1126,
        1128,3,252,126,0,1127,1126,1,0,0,0,1127,1128,1,0,0,0,1128,89,1,0,
        0,0,1129,1131,5,50,0,0,1130,1132,3,252,126,0,1131,1130,1,0,0,0,1131,
        1132,1,0,0,0,1132,91,1,0,0,0,1133,1135,5,51,0,0,1134,1136,3,252,
        126,0,1135,1134,1,0,0,0,1135,1136,1,0,0,0,1136,93,1,0,0,0,1137,1139,
        5,52,0,0,1138,1140,3,252,126,0,1139,1138,1,0,0,0,1139,1140,1,0,0,
        0,1140,95,1,0,0,0,1141,1143,5,53,0,0,1142,1144,3,252,126,0,1143,
        1142,1,0,0,0,1143,1144,1,0,0,0,1144,97,1,0,0,0,1145,1147,5,54,0,
        0,1146,1148,3,252,126,0,1147,1146,1,0,0,0,1147,1148,1,0,0,0,1148,
        99,1,0,0,0,1149,1151,5,55,0,0,1150,1152,3,252,126,0,1151,1150,1,
        0,0,0,1151,1152,1,0,0,0,1152,101,1,0,0,0,1153,1155,5,56,0,0,1154,
        1156,3,252,126,0,1155,1154,1,0,0,0,1155,1156,1,0,0,0,1156,103,1,
        0,0,0,1157,1159,5,57,0,0,1158,1160,3,252,126,0,1159,1158,1,0,0,0,
        1159,1160,1,0,0,0,1160,105,1,0,0,0,1161,1163,5,58,0,0,1162,1164,
        3,252,126,0,1163,1162,1,0,0,0,1163,1164,1,0,0,0,1164,107,1,0,0,0,
        1165,1167,5,59,0,0,1166,1168,3,252,126,0,1167,1166,1,0,0,0,1167,
        1168,1,0,0,0,1168,109,1,0,0,0,1169,1171,5,60,0,0,1170,1172,3,252,
        126,0,1171,1170,1,0,0,0,1171,1172,1,0,0,0,1172,111,1,0,0,0,1173,
        1175,5,61,0,0,1174,1176,3,252,126,0,1175,1174,1,0,0,0,1175,1176,
        1,0,0,0,1176,113,1,0,0,0,1177,1179,5,62,0,0,1178,1180,3,252,126,
        0,1179,1178,1,0,0,0,1179,1180,1,0,0,0,1180,115,1,0,0,0,1181,1183,
        5,63,0,0,1182,1184,3,252,126,0,1183,1182,1,0,0,0,1183,1184,1,0,0,
        0,1184,117,1,0,0,0,1185,1187,5,64,0,0,1186,1188,3,252,126,0,1187,
        1186,1,0,0,0,1187,1188,1,0,0,0,1188,119,1,0,0,0,1189,1191,5,65,0,
        0,1190,1192,3,252,126,0,1191,1190,1,0,0,0,1191,1192,1,0,0,0,1192,
        121,1,0,0,0,1193,1195,5,66,0,0,1194,1196,3,252,126,0,1195,1194,1,
        0,0,0,1195,1196,1,0,0,0,1196,123,1,0,0,0,1197,1199,5,67,0,0,1198,
        1200,3,252,126,0,1199,1198,1,0,0,0,1199,1200,1,0,0,0,1200,125,1,
        0,0,0,1201,1203,5,68,0,0,1202,1204,3,252,126,0,1203,1202,1,0,0,0,
        1203,1204,1,0,0,0,1204,127,1,0,0,0,1205,1207,5,69,0,0,1206,1208,
        3,252,126,0,1207,1206,1,0,0,0,1207,1208,1,0,0,0,1208,129,1,0,0,0,
        1209,1211,5,70,0,0,1210,1212,3,252,126,0,1211,1210,1,0,0,0,1211,
        1212,1,0,0,0,1212,131,1,0,0,0,1213,1215,5,71,0,0,1214,1216,3,252,
        126,0,1215,1214,1,0,0,0,1215,1216,1,0,0,0,1216,133,1,0,0,0,1217,
        1219,5,72,0,0,1218,1220,3,252,126,0,1219,1218,1,0,0,0,1219,1220,
        1,0,0,0,1220,135,1,0,0,0,1221,1223,5,73,0,0,1222,1224,3,252,126,
        0,1223,1222,1,0,0,0,1223,1224,1,0,0,0,1224,137,1,0,0,0,1225,1227,
        5,74,0,0,1226,1228,3,252,126,0,1227,1226,1,0,0,0,1227,1228,1,0,0,
        0,1228,139,1,0,0,0,1229,1231,5,75,0,0,1230,1232,3,252,126,0,1231,
        1230,1,0,0,0,1231,1232,1,0,0,0,1232,141,1,0,0,0,1233,1235,5,76,0,
        0,1234,1236,3,252,126,0,1235,1234,1,0,0,0,1235,1236,1,0,0,0,1236,
        143,1,0,0,0,1237,1239,5,77,0,0,1238,1240,3,252,126,0,1239,1238,1,
        0,0,0,1239,1240,1,0,0,0,1240,145,1,0,0,0,1241,1243,5,78,0,0,1242,
        1244,3,252,126,0,1243,1242,1,0,0,0,1243,1244,1,0,0,0,1244,147,1,
        0,0,0,1245,1247,5,79,0,0,1246,1248,3,252,126,0,1247,1246,1,0,0,0,
        1247,1248,1,0,0,0,1248,149,1,0,0,0,1249,1251,5,80,0,0,1250,1252,
        3,252,126,0,1251,1250,1,0,0,0,1251,1252,1,0,0,0,1252,151,1,0,0,0,
        1253,1255,5,81,0,0,1254,1256,3,252,126,0,1255,1254,1,0,0,0,1255,
        1256,1,0,0,0,1256,153,1,0,0,0,1257,1259,5,82,0,0,1258,1260,3,252,
        126,0,1259,1258,1,0,0,0,1259,1260,1,0,0,0,1260,155,1,0,0,0,1261,
        1263,5,83,0,0,1262,1264,3,252,126,0,1263,1262,1,0,0,0,1263,1264,
        1,0,0,0,1264,157,1,0,0,0,1265,1267,5,84,0,0,1266,1268,3,252,126,
        0,1267,1266,1,0,0,0,1267,1268,1,0,0,0,1268,159,1,0,0,0,1269,1271,
        5,85,0,0,1270,1272,3,252,126,0,1271,1270,1,0,0,0,1271,1272,1,0,0,
        0,1272,161,1,0,0,0,1273,1275,5,86,0,0,1274,1276,3,252,126,0,1275,
        1274,1,0,0,0,1275,1276,1,0,0,0,1276,163,1,0,0,0,1277,1279,5,87,0,
        0,1278,1280,3,252,126,0,1279,1278,1,0,0,0,1279,1280,1,0,0,0,1280,
        165,1,0,0,0,1281,1283,5,88,0,0,1282,1284,3,252,126,0,1283,1282,1,
        0,0,0,1283,1284,1,0,0,0,1284,167,1,0,0,0,1285,1287,5,89,0,0,1286,
        1288,3,252,126,0,1287,1286,1,0,0,0,1287,1288,1,0,0,0,1288,169,1,
        0,0,0,1289,1291,5,90,0,0,1290,1292,3,252,126,0,1291,1290,1,0,0,0,
        1291,1292,1,0,0,0,1292,171,1,0,0,0,1293,1295,5,91,0,0,1294,1296,
        3,252,126,0,1295,1294,1,0,0,0,1295,1296,1,0,0,0,1296,173,1,0,0,0,
        1297,1299,5,92,0,0,1298,1300,3,252,126,0,1299,1298,1,0,0,0,1299,
        1300,1,0,0,0,1300,175,1,0,0,0,1301,1303,5,93,0,0,1302,1304,3,252,
        126,0,1303,1302,1,0,0,0,1303,1304,1,0,0,0,1304,177,1,0,0,0,1305,
        1307,5,94,0,0,1306,1308,3,252,126,0,1307,1306,1,0,0,0,1307,1308,
        1,0,0,0,1308,179,1,0,0,0,1309,1311,5,95,0,0,1310,1312,3,252,126,
        0,1311,1310,1,0,0,0,1311,1312,1,0,0,0,1312,181,1,0,0,0,1313,1315,
        5,96,0,0,1314,1316,3,252,126,0,1315,1314,1,0,0,0,1315,1316,1,0,0,
        0,1316,183,1,0,0,0,1317,1319,5,97,0,0,1318,1320,3,252,126,0,1319,
        1318,1,0,0,0,1319,1320,1,0,0,0,1320,185,1,0,0,0,1321,1323,5,98,0,
        0,1322,1324,3,252,126,0,1323,1322,1,0,0,0,1323,1324,1,0,0,0,1324,
        187,1,0,0,0,1325,1327,5,99,0,0,1326,1328,3,252,126,0,1327,1326,1,
        0,0,0,1327,1328,1,0,0,0,1328,189,1,0,0,0,1329,1331,5,100,0,0,1330,
        1332,3,252,126,0,1331,1330,1,0,0,0,1331,1332,1,0,0,0,1332,191,1,
        0,0,0,1333,1335,5,101,0,0,1334,1336,3,252,126,0,1335,1334,1,0,0,
        0,1335,1336,1,0,0,0,1336,193,1,0,0,0,1337,1339,5,102,0,0,1338,1340,
        3,252,126,0,1339,1338,1,0,0,0,1339,1340,1,0,0,0,1340,195,1,0,0,0,
        1341,1343,5,103,0,0,1342,1344,3,252,126,0,1343,1342,1,0,0,0,1343,
        1344,1,0,0,0,1344,197,1,0,0,0,1345,1347,5,104,0,0,1346,1348,3,252,
        126,0,1347,1346,1,0,0,0,1347,1348,1,0,0,0,1348,199,1,0,0,0,1349,
        1351,5,105,0,0,1350,1352,3,252,126,0,1351,1350,1,0,0,0,1351,1352,
        1,0,0,0,1352,201,1,0,0,0,1353,1355,5,106,0,0,1354,1356,3,252,126,
        0,1355,1354,1,0,0,0,1355,1356,1,0,0,0,1356,203,1,0,0,0,1357,1359,
        5,107,0,0,1358,1360,3,252,126,0,1359,1358,1,0,0,0,1359,1360,1,0,
        0,0,1360,205,1,0,0,0,1361,1363,5,108,0,0,1362,1364,3,252,126,0,1363,
        1362,1,0,0,0,1363,1364,1,0,0,0,1364,207,1,0,0,0,1365,1367,5,109,
        0,0,1366,1368,3,252,126,0,1367,1366,1,0,0,0,1367,1368,1,0,0,0,1368,
        209,1,0,0,0,1369,1371,5,110,0,0,1370,1372,3,252,126,0,1371,1370,
        1,0,0,0,1371,1372,1,0,0,0,1372,211,1,0,0,0,1373,1375,5,111,0,0,1374,
        1376,3,252,126,0,1375,1374,1,0,0,0,1375,1376,1,0,0,0,1376,213,1,
        0,0,0,1377,1379,5,112,0,0,1378,1380,3,252,126,0,1379,1378,1,0,0,
        0,1379,1380,1,0,0,0,1380,215,1,0,0,0,1381,1383,5,113,0,0,1382,1384,
        3,252,126,0,1383,1382,1,0,0,0,1383,1384,1,0,0,0,1384,217,1,0,0,0,
        1385,1387,5,114,0,0,1386,1388,3,252,126,0,1387,1386,1,0,0,0,1387,
        1388,1,0,0,0,1388,219,1,0,0,0,1389,1391,5,115,0,0,1390,1392,3,252,
        126,0,1391,1390,1,0,0,0,1391,1392,1,0,0,0,1392,221,1,0,0,0,1393,
        1395,5,116,0,0,1394,1396,3,252,126,0,1395,1394,1,0,0,0,1395,1396,
        1,0,0,0,1396,223,1,0,0,0,1397,1399,5,117,0,0,1398,1400,3,252,126,
        0,1399,1398,1,0,0,0,1399,1400,1,0,0,0,1400,225,1,0,0,0,1401,1403,
        5,118,0,0,1402,1404,3,252,126,0,1403,1402,1,0,0,0,1403,1404,1,0,
        0,0,1404,227,1,0,0,0,1405,1407,5,119,0,0,1406,1408,3,252,126,0,1407,
        1406,1,0,0,0,1407,1408,1,0,0,0,1408,229,1,0,0,0,1409,1411,5,120,
        0,0,1410,1412,3,252,126,0,1411,1410,1,0,0,0,1411,1412,1,0,0,0,1412,
        231,1,0,0,0,1413,1415,5,121,0,0,1414,1416,3,252,126,0,1415,1414,
        1,0,0,0,1415,1416,1,0,0,0,1416,233,1,0,0,0,1417,1419,5,122,0,0,1418,
        1420,3,252,126,0,1419,1418,1,0,0,0,1419,1420,1,0,0,0,1420,235,1,
        0,0,0,1421,1423,5,123,0,0,1422,1424,3,252,126,0,1423,1422,1,0,0,
        0,1423,1424,1,0,0,0,1424,237,1,0,0,0,1425,1427,5,124,0,0,1426,1428,
        3,252,126,0,1427,1426,1,0,0,0,1427,1428,1,0,0,0,1428,239,1,0,0,0,
        1429,1431,5,125,0,0,1430,1432,3,252,126,0,1431,1430,1,0,0,0,1431,
        1432,1,0,0,0,1432,241,1,0,0,0,1433,1435,5,126,0,0,1434,1436,3,252,
        126,0,1435,1434,1,0,0,0,1435,1436,1,0,0,0,1436,243,1,0,0,0,1437,
        1439,5,127,0,0,1438,1440,3,252,126,0,1439,1438,1,0,0,0,1439,1440,
        1,0,0,0,1440,245,1,0,0,0,1441,1443,5,128,0,0,1442,1444,3,252,126,
        0,1443,1442,1,0,0,0,1443,1444,1,0,0,0,1444,247,1,0,0,0,1445,1447,
        5,129,0,0,1446,1448,3,252,126,0,1447,1446,1,0,0,0,1447,1448,1,0,
        0,0,1448,249,1,0,0,0,1449,1451,5,130,0,0,1450,1452,3,252,126,0,1451,
        1450,1,0,0,0,1451,1452,1,0,0,0,1452,251,1,0,0,0,1453,1454,7,1,0,
        0,1454,253,1,0,0,0,354,257,273,280,283,286,289,292,295,298,301,304,
        307,310,313,316,319,322,325,328,331,334,337,340,343,346,349,352,
        355,358,361,364,367,370,373,376,379,382,385,388,391,394,397,400,
        403,406,409,412,415,418,421,424,427,430,433,436,439,442,445,448,
        451,454,457,460,463,466,469,472,475,478,481,484,487,490,493,496,
        499,502,505,508,511,514,517,520,523,526,529,532,535,538,541,544,
        547,550,553,556,559,562,565,568,571,574,577,580,583,586,589,592,
        595,598,601,604,607,610,613,616,619,622,625,628,631,634,637,640,
        643,646,649,652,655,658,661,664,667,670,673,676,679,682,685,688,
        691,694,697,700,703,706,709,712,715,718,721,724,727,730,733,736,
        739,742,745,748,751,754,757,760,763,766,769,772,775,778,781,784,
        787,790,793,796,799,802,805,808,811,814,817,820,823,826,829,832,
        835,838,841,844,847,850,853,856,859,862,865,868,871,874,877,880,
        883,886,889,892,895,898,901,904,907,910,913,916,919,922,925,928,
        931,934,937,940,943,946,949,952,955,958,961,964,967,970,973,976,
        979,983,987,991,995,999,1003,1007,1011,1015,1019,1023,1027,1031,
        1035,1039,1043,1047,1051,1055,1059,1063,1067,1071,1075,1079,1083,
        1087,1091,1095,1099,1103,1107,1111,1115,1119,1123,1127,1131,1135,
        1139,1143,1147,1151,1155,1159,1163,1167,1171,1175,1179,1183,1187,
        1191,1195,1199,1203,1207,1211,1215,1219,1223,1227,1231,1235,1239,
        1243,1247,1251,1255,1259,1263,1267,1271,1275,1279,1283,1287,1291,
        1295,1299,1303,1307,1311,1315,1319,1323,1327,1331,1335,1339,1343,
        1347,1351,1355,1359,1363,1367,1371,1375,1379,1383,1387,1391,1395,
        1399,1403,1407,1411,1415,1419,1423,1427,1431,1435,1439,1443,1447,
        1451
    ]

class tucanParser ( Parser ):

    grammarFileName = "tucan.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'('", "'-'", "')'", "'1'", "'2'", "'3'", 
                     "'4'", "'5'", "'6'", "'7'", "'8'", "'9'", "'H'", "'He'", 
                     "'Li'", "'Be'", "'B'", "'C'", "'N'", "'O'", "'F'", 
                     "'Ne'", "'Na'", "'Mg'", "'Al'", "'Si'", "'P'", "'S'", 
                     "'Cl'", "'Ar'", "'K'", "'Ca'", "'Sc'", "'Ti'", "'V'", 
                     "'Cr'", "'Mn'", "'Fe'", "'Co'", "'Ni'", "'Cu'", "'Zn'", 
                     "'Ga'", "'Ge'", "'As'", "'Se'", "'Br'", "'Kr'", "'Rb'", 
                     "'Sr'", "'Y'", "'Zr'", "'Nb'", "'Mo'", "'Tc'", "'Ru'", 
                     "'Rh'", "'Pd'", "'Ag'", "'Cd'", "'In'", "'Sn'", "'Sb'", 
                     "'Te'", "'I'", "'Xe'", "'Cs'", "'Ba'", "'La'", "'Ce'", 
                     "'Pr'", "'Nd'", "'Pm'", "'Sm'", "'Eu'", "'Gd'", "'Tb'", 
                     "'Dy'", "'Ho'", "'Er'", "'Tm'", "'Yb'", "'Lu'", "'Hf'", 
                     "'Ta'", "'W'", "'Re'", "'Os'", "'Ir'", "'Pt'", "'Au'", 
                     "'Hg'", "'Tl'", "'Pb'", "'Bi'", "'Po'", "'At'", "'Rn'", 
                     "'Fr'", "'Ra'", "'Ac'", "'Th'", "'Pa'", "'U'", "'Np'", 
                     "'Pu'", "'Am'", "'Cm'", "'Bk'", "'Cf'", "'Es'", "'Fm'", 
                     "'Md'", "'No'", "'Lr'", "'Rf'", "'Db'", "'Sg'", "'Bh'", 
                     "'Hs'", "'Mt'", "'Ds'", "'Rg'", "'Cn'", "'Nh'", "'Fl'", 
                     "'Mc'", "'Lv'", "'Ts'", "'Og'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "GREATER_THAN_NINE" ]

    RULE_tuples = 0
    RULE_tuples_start = 1
    RULE_tuple = 2
    RULE_node_index = 3
    RULE_sum_formula = 4
    RULE_sum_formula_start = 5
    RULE_with_carbon = 6
    RULE_without_carbon = 7
    RULE_h = 8
    RULE_he = 9
    RULE_li = 10
    RULE_be = 11
    RULE_b = 12
    RULE_c = 13
    RULE_n = 14
    RULE_o = 15
    RULE_f = 16
    RULE_ne = 17
    RULE_na = 18
    RULE_mg = 19
    RULE_al = 20
    RULE_si = 21
    RULE_p = 22
    RULE_s = 23
    RULE_cl = 24
    RULE_ar = 25
    RULE_k = 26
    RULE_ca = 27
    RULE_sc = 28
    RULE_ti = 29
    RULE_v = 30
    RULE_cr = 31
    RULE_mn = 32
    RULE_fe = 33
    RULE_co = 34
    RULE_ni = 35
    RULE_cu = 36
    RULE_zn = 37
    RULE_ga = 38
    RULE_ge = 39
    RULE_as = 40
    RULE_se = 41
    RULE_br = 42
    RULE_kr = 43
    RULE_rb = 44
    RULE_sr = 45
    RULE_y = 46
    RULE_zr = 47
    RULE_nb = 48
    RULE_mo = 49
    RULE_tc = 50
    RULE_ru = 51
    RULE_rh = 52
    RULE_pd = 53
    RULE_ag = 54
    RULE_cd = 55
    RULE_in = 56
    RULE_sn = 57
    RULE_sb = 58
    RULE_te = 59
    RULE_i = 60
    RULE_xe = 61
    RULE_cs = 62
    RULE_ba = 63
    RULE_la = 64
    RULE_ce = 65
    RULE_pr = 66
    RULE_nd = 67
    RULE_pm = 68
    RULE_sm = 69
    RULE_eu = 70
    RULE_gd = 71
    RULE_tb = 72
    RULE_dy = 73
    RULE_ho = 74
    RULE_er = 75
    RULE_tm = 76
    RULE_yb = 77
    RULE_lu = 78
    RULE_hf = 79
    RULE_ta = 80
    RULE_w = 81
    RULE_re = 82
    RULE_os = 83
    RULE_ir = 84
    RULE_pt = 85
    RULE_au = 86
    RULE_hg = 87
    RULE_tl = 88
    RULE_pb = 89
    RULE_bi = 90
    RULE_po = 91
    RULE_at = 92
    RULE_rn = 93
    RULE_fr = 94
    RULE_ra = 95
    RULE_ac = 96
    RULE_th = 97
    RULE_pa = 98
    RULE_u = 99
    RULE_np = 100
    RULE_pu = 101
    RULE_am = 102
    RULE_cm = 103
    RULE_bk = 104
    RULE_cf = 105
    RULE_es = 106
    RULE_fm = 107
    RULE_md = 108
    RULE_no = 109
    RULE_lr = 110
    RULE_rf = 111
    RULE_db = 112
    RULE_sg = 113
    RULE_bh = 114
    RULE_hs = 115
    RULE_mt = 116
    RULE_ds = 117
    RULE_rg = 118
    RULE_cn = 119
    RULE_nh = 120
    RULE_fl = 121
    RULE_mc = 122
    RULE_lv = 123
    RULE_ts = 124
    RULE_og = 125
    RULE_count = 126

    ruleNames =  [ "tuples", "tuples_start", "tuple", "node_index", "sum_formula", 
                   "sum_formula_start", "with_carbon", "without_carbon", 
                   "h", "he", "li", "be", "b", "c", "n", "o", "f", "ne", 
                   "na", "mg", "al", "si", "p", "s", "cl", "ar", "k", "ca", 
                   "sc", "ti", "v", "cr", "mn", "fe", "co", "ni", "cu", 
                   "zn", "ga", "ge", "as", "se", "br", "kr", "rb", "sr", 
                   "y", "zr", "nb", "mo", "tc", "ru", "rh", "pd", "ag", 
                   "cd", "in", "sn", "sb", "te", "i", "xe", "cs", "ba", 
                   "la", "ce", "pr", "nd", "pm", "sm", "eu", "gd", "tb", 
                   "dy", "ho", "er", "tm", "yb", "lu", "hf", "ta", "w", 
                   "re", "os", "ir", "pt", "au", "hg", "tl", "pb", "bi", 
                   "po", "at", "rn", "fr", "ra", "ac", "th", "pa", "u", 
                   "np", "pu", "am", "cm", "bk", "cf", "es", "fm", "md", 
                   "no", "lr", "rf", "db", "sg", "bh", "hs", "mt", "ds", 
                   "rg", "cn", "nh", "fl", "mc", "lv", "ts", "og", "count" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    T__92=93
    T__93=94
    T__94=95
    T__95=96
    T__96=97
    T__97=98
    T__98=99
    T__99=100
    T__100=101
    T__101=102
    T__102=103
    T__103=104
    T__104=105
    T__105=106
    T__106=107
    T__107=108
    T__108=109
    T__109=110
    T__110=111
    T__111=112
    T__112=113
    T__113=114
    T__114=115
    T__115=116
    T__116=117
    T__117=118
    T__118=119
    T__119=120
    T__120=121
    T__121=122
    T__122=123
    T__123=124
    T__124=125
    T__125=126
    T__126=127
    T__127=128
    T__128=129
    T__129=130
    GREATER_THAN_NINE=131

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class TuplesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tuple_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tucanParser.TupleContext)
            else:
                return self.getTypedRuleContext(tucanParser.TupleContext,i)


        def getRuleIndex(self):
            return tucanParser.RULE_tuples

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuples" ):
                listener.enterTuples(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuples" ):
                listener.exitTuples(self)




    def tuples(self):

        localctx = tucanParser.TuplesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_tuples)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 257
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 254
                self.tuple_()
                self.state = 259
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tuples_startContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tuples(self):
            return self.getTypedRuleContext(tucanParser.TuplesContext,0)


        def EOF(self):
            return self.getToken(tucanParser.EOF, 0)

        def getRuleIndex(self):
            return tucanParser.RULE_tuples_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuples_start" ):
                listener.enterTuples_start(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuples_start" ):
                listener.exitTuples_start(self)




    def tuples_start(self):

        localctx = tucanParser.Tuples_startContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_tuples_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 260
            self.tuples()
            self.state = 261
            self.match(tucanParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def node_index(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tucanParser.Node_indexContext)
            else:
                return self.getTypedRuleContext(tucanParser.Node_indexContext,i)


        def getRuleIndex(self):
            return tucanParser.RULE_tuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple" ):
                listener.enterTuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple" ):
                listener.exitTuple(self)




    def tuple_(self):

        localctx = tucanParser.TupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_tuple)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 263
            self.match(tucanParser.T__0)
            self.state = 264
            self.node_index()
            self.state = 265
            self.match(tucanParser.T__1)
            self.state = 266
            self.node_index()
            self.state = 267
            self.match(tucanParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Node_indexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GREATER_THAN_NINE(self):
            return self.getToken(tucanParser.GREATER_THAN_NINE, 0)

        def getRuleIndex(self):
            return tucanParser.RULE_node_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNode_index" ):
                listener.enterNode_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNode_index" ):
                listener.exitNode_index(self)




    def node_index(self):

        localctx = tucanParser.Node_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_node_index)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 269
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 8176) != 0 or _la==131):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sum_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def with_carbon(self):
            return self.getTypedRuleContext(tucanParser.With_carbonContext,0)


        def without_carbon(self):
            return self.getTypedRuleContext(tucanParser.Without_carbonContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_sum_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSum_formula" ):
                listener.enterSum_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSum_formula" ):
                listener.exitSum_formula(self)




    def sum_formula(self):

        localctx = tucanParser.Sum_formulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_sum_formula)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 273
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18]:
                self.state = 271
                self.with_carbon()
                pass
            elif token in [-1, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130]:
                self.state = 272
                self.without_carbon()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sum_formula_startContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sum_formula(self):
            return self.getTypedRuleContext(tucanParser.Sum_formulaContext,0)


        def EOF(self):
            return self.getToken(tucanParser.EOF, 0)

        def getRuleIndex(self):
            return tucanParser.RULE_sum_formula_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSum_formula_start" ):
                listener.enterSum_formula_start(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSum_formula_start" ):
                listener.exitSum_formula_start(self)




    def sum_formula_start(self):

        localctx = tucanParser.Sum_formula_startContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_sum_formula_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 275
            self.sum_formula()
            self.state = 276
            self.match(tucanParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_carbonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def c(self):
            return self.getTypedRuleContext(tucanParser.CContext,0)


        def h(self):
            return self.getTypedRuleContext(tucanParser.HContext,0)


        def ac(self):
            return self.getTypedRuleContext(tucanParser.AcContext,0)


        def ag(self):
            return self.getTypedRuleContext(tucanParser.AgContext,0)


        def al(self):
            return self.getTypedRuleContext(tucanParser.AlContext,0)


        def am(self):
            return self.getTypedRuleContext(tucanParser.AmContext,0)


        def ar(self):
            return self.getTypedRuleContext(tucanParser.ArContext,0)


        def as_(self):
            return self.getTypedRuleContext(tucanParser.AsContext,0)


        def at(self):
            return self.getTypedRuleContext(tucanParser.AtContext,0)


        def au(self):
            return self.getTypedRuleContext(tucanParser.AuContext,0)


        def b(self):
            return self.getTypedRuleContext(tucanParser.BContext,0)


        def ba(self):
            return self.getTypedRuleContext(tucanParser.BaContext,0)


        def be(self):
            return self.getTypedRuleContext(tucanParser.BeContext,0)


        def bh(self):
            return self.getTypedRuleContext(tucanParser.BhContext,0)


        def bi(self):
            return self.getTypedRuleContext(tucanParser.BiContext,0)


        def bk(self):
            return self.getTypedRuleContext(tucanParser.BkContext,0)


        def br(self):
            return self.getTypedRuleContext(tucanParser.BrContext,0)


        def ca(self):
            return self.getTypedRuleContext(tucanParser.CaContext,0)


        def cd(self):
            return self.getTypedRuleContext(tucanParser.CdContext,0)


        def ce(self):
            return self.getTypedRuleContext(tucanParser.CeContext,0)


        def cf(self):
            return self.getTypedRuleContext(tucanParser.CfContext,0)


        def cl(self):
            return self.getTypedRuleContext(tucanParser.ClContext,0)


        def cm(self):
            return self.getTypedRuleContext(tucanParser.CmContext,0)


        def cn(self):
            return self.getTypedRuleContext(tucanParser.CnContext,0)


        def co(self):
            return self.getTypedRuleContext(tucanParser.CoContext,0)


        def cr(self):
            return self.getTypedRuleContext(tucanParser.CrContext,0)


        def cs(self):
            return self.getTypedRuleContext(tucanParser.CsContext,0)


        def cu(self):
            return self.getTypedRuleContext(tucanParser.CuContext,0)


        def db(self):
            return self.getTypedRuleContext(tucanParser.DbContext,0)


        def ds(self):
            return self.getTypedRuleContext(tucanParser.DsContext,0)


        def dy(self):
            return self.getTypedRuleContext(tucanParser.DyContext,0)


        def er(self):
            return self.getTypedRuleContext(tucanParser.ErContext,0)


        def es(self):
            return self.getTypedRuleContext(tucanParser.EsContext,0)


        def eu(self):
            return self.getTypedRuleContext(tucanParser.EuContext,0)


        def f(self):
            return self.getTypedRuleContext(tucanParser.FContext,0)


        def fe(self):
            return self.getTypedRuleContext(tucanParser.FeContext,0)


        def fl(self):
            return self.getTypedRuleContext(tucanParser.FlContext,0)


        def fm(self):
            return self.getTypedRuleContext(tucanParser.FmContext,0)


        def fr(self):
            return self.getTypedRuleContext(tucanParser.FrContext,0)


        def ga(self):
            return self.getTypedRuleContext(tucanParser.GaContext,0)


        def gd(self):
            return self.getTypedRuleContext(tucanParser.GdContext,0)


        def ge(self):
            return self.getTypedRuleContext(tucanParser.GeContext,0)


        def he(self):
            return self.getTypedRuleContext(tucanParser.HeContext,0)


        def hf(self):
            return self.getTypedRuleContext(tucanParser.HfContext,0)


        def hg(self):
            return self.getTypedRuleContext(tucanParser.HgContext,0)


        def ho(self):
            return self.getTypedRuleContext(tucanParser.HoContext,0)


        def hs(self):
            return self.getTypedRuleContext(tucanParser.HsContext,0)


        def i(self):
            return self.getTypedRuleContext(tucanParser.IContext,0)


        def in_(self):
            return self.getTypedRuleContext(tucanParser.InContext,0)


        def ir(self):
            return self.getTypedRuleContext(tucanParser.IrContext,0)


        def k(self):
            return self.getTypedRuleContext(tucanParser.KContext,0)


        def kr(self):
            return self.getTypedRuleContext(tucanParser.KrContext,0)


        def la(self):
            return self.getTypedRuleContext(tucanParser.LaContext,0)


        def li(self):
            return self.getTypedRuleContext(tucanParser.LiContext,0)


        def lr(self):
            return self.getTypedRuleContext(tucanParser.LrContext,0)


        def lu(self):
            return self.getTypedRuleContext(tucanParser.LuContext,0)


        def lv(self):
            return self.getTypedRuleContext(tucanParser.LvContext,0)


        def mc(self):
            return self.getTypedRuleContext(tucanParser.McContext,0)


        def md(self):
            return self.getTypedRuleContext(tucanParser.MdContext,0)


        def mg(self):
            return self.getTypedRuleContext(tucanParser.MgContext,0)


        def mn(self):
            return self.getTypedRuleContext(tucanParser.MnContext,0)


        def mo(self):
            return self.getTypedRuleContext(tucanParser.MoContext,0)


        def mt(self):
            return self.getTypedRuleContext(tucanParser.MtContext,0)


        def n(self):
            return self.getTypedRuleContext(tucanParser.NContext,0)


        def na(self):
            return self.getTypedRuleContext(tucanParser.NaContext,0)


        def nb(self):
            return self.getTypedRuleContext(tucanParser.NbContext,0)


        def nd(self):
            return self.getTypedRuleContext(tucanParser.NdContext,0)


        def ne(self):
            return self.getTypedRuleContext(tucanParser.NeContext,0)


        def nh(self):
            return self.getTypedRuleContext(tucanParser.NhContext,0)


        def ni(self):
            return self.getTypedRuleContext(tucanParser.NiContext,0)


        def no(self):
            return self.getTypedRuleContext(tucanParser.NoContext,0)


        def np(self):
            return self.getTypedRuleContext(tucanParser.NpContext,0)


        def o(self):
            return self.getTypedRuleContext(tucanParser.OContext,0)


        def og(self):
            return self.getTypedRuleContext(tucanParser.OgContext,0)


        def os(self):
            return self.getTypedRuleContext(tucanParser.OsContext,0)


        def p(self):
            return self.getTypedRuleContext(tucanParser.PContext,0)


        def pa(self):
            return self.getTypedRuleContext(tucanParser.PaContext,0)


        def pb(self):
            return self.getTypedRuleContext(tucanParser.PbContext,0)


        def pd(self):
            return self.getTypedRuleContext(tucanParser.PdContext,0)


        def pm(self):
            return self.getTypedRuleContext(tucanParser.PmContext,0)


        def po(self):
            return self.getTypedRuleContext(tucanParser.PoContext,0)


        def pr(self):
            return self.getTypedRuleContext(tucanParser.PrContext,0)


        def pt(self):
            return self.getTypedRuleContext(tucanParser.PtContext,0)


        def pu(self):
            return self.getTypedRuleContext(tucanParser.PuContext,0)


        def ra(self):
            return self.getTypedRuleContext(tucanParser.RaContext,0)


        def rb(self):
            return self.getTypedRuleContext(tucanParser.RbContext,0)


        def re(self):
            return self.getTypedRuleContext(tucanParser.ReContext,0)


        def rf(self):
            return self.getTypedRuleContext(tucanParser.RfContext,0)


        def rg(self):
            return self.getTypedRuleContext(tucanParser.RgContext,0)


        def rh(self):
            return self.getTypedRuleContext(tucanParser.RhContext,0)


        def rn(self):
            return self.getTypedRuleContext(tucanParser.RnContext,0)


        def ru(self):
            return self.getTypedRuleContext(tucanParser.RuContext,0)


        def s(self):
            return self.getTypedRuleContext(tucanParser.SContext,0)


        def sb(self):
            return self.getTypedRuleContext(tucanParser.SbContext,0)


        def sc(self):
            return self.getTypedRuleContext(tucanParser.ScContext,0)


        def se(self):
            return self.getTypedRuleContext(tucanParser.SeContext,0)


        def sg(self):
            return self.getTypedRuleContext(tucanParser.SgContext,0)


        def si(self):
            return self.getTypedRuleContext(tucanParser.SiContext,0)


        def sm(self):
            return self.getTypedRuleContext(tucanParser.SmContext,0)


        def sn(self):
            return self.getTypedRuleContext(tucanParser.SnContext,0)


        def sr(self):
            return self.getTypedRuleContext(tucanParser.SrContext,0)


        def ta(self):
            return self.getTypedRuleContext(tucanParser.TaContext,0)


        def tb(self):
            return self.getTypedRuleContext(tucanParser.TbContext,0)


        def tc(self):
            return self.getTypedRuleContext(tucanParser.TcContext,0)


        def te(self):
            return self.getTypedRuleContext(tucanParser.TeContext,0)


        def th(self):
            return self.getTypedRuleContext(tucanParser.ThContext,0)


        def ti(self):
            return self.getTypedRuleContext(tucanParser.TiContext,0)


        def tl(self):
            return self.getTypedRuleContext(tucanParser.TlContext,0)


        def tm(self):
            return self.getTypedRuleContext(tucanParser.TmContext,0)


        def ts(self):
            return self.getTypedRuleContext(tucanParser.TsContext,0)


        def u(self):
            return self.getTypedRuleContext(tucanParser.UContext,0)


        def v(self):
            return self.getTypedRuleContext(tucanParser.VContext,0)


        def w(self):
            return self.getTypedRuleContext(tucanParser.WContext,0)


        def xe(self):
            return self.getTypedRuleContext(tucanParser.XeContext,0)


        def y(self):
            return self.getTypedRuleContext(tucanParser.YContext,0)


        def yb(self):
            return self.getTypedRuleContext(tucanParser.YbContext,0)


        def zn(self):
            return self.getTypedRuleContext(tucanParser.ZnContext,0)


        def zr(self):
            return self.getTypedRuleContext(tucanParser.ZrContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_with_carbon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_carbon" ):
                listener.enterWith_carbon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_carbon" ):
                listener.exitWith_carbon(self)




    def with_carbon(self):

        localctx = tucanParser.With_carbonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_with_carbon)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 278
            self.c()
            self.state = 280
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 279
                self.h()


            self.state = 283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==101:
                self.state = 282
                self.ac()


            self.state = 286
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 285
                self.ag()


            self.state = 289
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==25:
                self.state = 288
                self.al()


            self.state = 292
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==107:
                self.state = 291
                self.am()


            self.state = 295
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==30:
                self.state = 294
                self.ar()


            self.state = 298
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 297
                self.as_()


            self.state = 301
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==97:
                self.state = 300
                self.at()


            self.state = 304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==91:
                self.state = 303
                self.au()


            self.state = 307
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 306
                self.b()


            self.state = 310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 309
                self.ba()


            self.state = 313
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 312
                self.be()


            self.state = 316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119:
                self.state = 315
                self.bh()


            self.state = 319
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==95:
                self.state = 318
                self.bi()


            self.state = 322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==109:
                self.state = 321
                self.bk()


            self.state = 325
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 324
                self.br()


            self.state = 328
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 327
                self.ca()


            self.state = 331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 330
                self.cd()


            self.state = 334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==70:
                self.state = 333
                self.ce()


            self.state = 337
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==110:
                self.state = 336
                self.cf()


            self.state = 340
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==29:
                self.state = 339
                self.cl()


            self.state = 343
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==108:
                self.state = 342
                self.cm()


            self.state = 346
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==124:
                self.state = 345
                self.cn()


            self.state = 349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==39:
                self.state = 348
                self.co()


            self.state = 352
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==36:
                self.state = 351
                self.cr()


            self.state = 355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67:
                self.state = 354
                self.cs()


            self.state = 358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==41:
                self.state = 357
                self.cu()


            self.state = 361
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==117:
                self.state = 360
                self.db()


            self.state = 364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==122:
                self.state = 363
                self.ds()


            self.state = 367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78:
                self.state = 366
                self.dy()


            self.state = 370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==80:
                self.state = 369
                self.er()


            self.state = 373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 372
                self.es()


            self.state = 376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75:
                self.state = 375
                self.eu()


            self.state = 379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21:
                self.state = 378
                self.f()


            self.state = 382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==38:
                self.state = 381
                self.fe()


            self.state = 385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==126:
                self.state = 384
                self.fl()


            self.state = 388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==112:
                self.state = 387
                self.fm()


            self.state = 391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==99:
                self.state = 390
                self.fr()


            self.state = 394
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==43:
                self.state = 393
                self.ga()


            self.state = 397
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==76:
                self.state = 396
                self.gd()


            self.state = 400
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==44:
                self.state = 399
                self.ge()


            self.state = 403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 402
                self.he()


            self.state = 406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==84:
                self.state = 405
                self.hf()


            self.state = 409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 408
                self.hg()


            self.state = 412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==79:
                self.state = 411
                self.ho()


            self.state = 415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==120:
                self.state = 414
                self.hs()


            self.state = 418
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 417
                self.i()


            self.state = 421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==61:
                self.state = 420
                self.in_()


            self.state = 424
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==89:
                self.state = 423
                self.ir()


            self.state = 427
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==31:
                self.state = 426
                self.k()


            self.state = 430
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 429
                self.kr()


            self.state = 433
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==69:
                self.state = 432
                self.la()


            self.state = 436
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==15:
                self.state = 435
                self.li()


            self.state = 439
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==115:
                self.state = 438
                self.lr()


            self.state = 442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==83:
                self.state = 441
                self.lu()


            self.state = 445
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==128:
                self.state = 444
                self.lv()


            self.state = 448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 447
                self.mc()


            self.state = 451
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==113:
                self.state = 450
                self.md()


            self.state = 454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24:
                self.state = 453
                self.mg()


            self.state = 457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==37:
                self.state = 456
                self.mn()


            self.state = 460
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==54:
                self.state = 459
                self.mo()


            self.state = 463
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==121:
                self.state = 462
                self.mt()


            self.state = 466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 465
                self.n()


            self.state = 469
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23:
                self.state = 468
                self.na()


            self.state = 472
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 471
                self.nb()


            self.state = 475
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==72:
                self.state = 474
                self.nd()


            self.state = 478
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 477
                self.ne()


            self.state = 481
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 480
                self.nh()


            self.state = 484
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==40:
                self.state = 483
                self.ni()


            self.state = 487
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==114:
                self.state = 486
                self.no()


            self.state = 490
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==105:
                self.state = 489
                self.np()


            self.state = 493
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 492
                self.o()


            self.state = 496
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==130:
                self.state = 495
                self.og()


            self.state = 499
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==88:
                self.state = 498
                self.os()


            self.state = 502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==27:
                self.state = 501
                self.p()


            self.state = 505
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==103:
                self.state = 504
                self.pa()


            self.state = 508
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==94:
                self.state = 507
                self.pb()


            self.state = 511
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 510
                self.pd()


            self.state = 514
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73:
                self.state = 513
                self.pm()


            self.state = 517
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==96:
                self.state = 516
                self.po()


            self.state = 520
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 519
                self.pr()


            self.state = 523
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 522
                self.pt()


            self.state = 526
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==106:
                self.state = 525
                self.pu()


            self.state = 529
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==100:
                self.state = 528
                self.ra()


            self.state = 532
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 531
                self.rb()


            self.state = 535
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==87:
                self.state = 534
                self.re()


            self.state = 538
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==116:
                self.state = 537
                self.rf()


            self.state = 541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==123:
                self.state = 540
                self.rg()


            self.state = 544
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 543
                self.rh()


            self.state = 547
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98:
                self.state = 546
                self.rn()


            self.state = 550
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 549
                self.ru()


            self.state = 553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==28:
                self.state = 552
                self.s()


            self.state = 556
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 555
                self.sb()


            self.state = 559
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==33:
                self.state = 558
                self.sc()


            self.state = 562
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 561
                self.se()


            self.state = 565
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==118:
                self.state = 564
                self.sg()


            self.state = 568
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 567
                self.si()


            self.state = 571
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==74:
                self.state = 570
                self.sm()


            self.state = 574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 573
                self.sn()


            self.state = 577
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 576
                self.sr()


            self.state = 580
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==85:
                self.state = 579
                self.ta()


            self.state = 583
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 582
                self.tb()


            self.state = 586
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==55:
                self.state = 585
                self.tc()


            self.state = 589
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==64:
                self.state = 588
                self.te()


            self.state = 592
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==102:
                self.state = 591
                self.th()


            self.state = 595
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 594
                self.ti()


            self.state = 598
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==93:
                self.state = 597
                self.tl()


            self.state = 601
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 600
                self.tm()


            self.state = 604
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 603
                self.ts()


            self.state = 607
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==104:
                self.state = 606
                self.u()


            self.state = 610
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 609
                self.v()


            self.state = 613
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 612
                self.w()


            self.state = 616
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 615
                self.xe()


            self.state = 619
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51:
                self.state = 618
                self.y()


            self.state = 622
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82:
                self.state = 621
                self.yb()


            self.state = 625
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42:
                self.state = 624
                self.zn()


            self.state = 628
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 627
                self.zr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Without_carbonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ac(self):
            return self.getTypedRuleContext(tucanParser.AcContext,0)


        def ag(self):
            return self.getTypedRuleContext(tucanParser.AgContext,0)


        def al(self):
            return self.getTypedRuleContext(tucanParser.AlContext,0)


        def am(self):
            return self.getTypedRuleContext(tucanParser.AmContext,0)


        def ar(self):
            return self.getTypedRuleContext(tucanParser.ArContext,0)


        def as_(self):
            return self.getTypedRuleContext(tucanParser.AsContext,0)


        def at(self):
            return self.getTypedRuleContext(tucanParser.AtContext,0)


        def au(self):
            return self.getTypedRuleContext(tucanParser.AuContext,0)


        def b(self):
            return self.getTypedRuleContext(tucanParser.BContext,0)


        def ba(self):
            return self.getTypedRuleContext(tucanParser.BaContext,0)


        def be(self):
            return self.getTypedRuleContext(tucanParser.BeContext,0)


        def bh(self):
            return self.getTypedRuleContext(tucanParser.BhContext,0)


        def bi(self):
            return self.getTypedRuleContext(tucanParser.BiContext,0)


        def bk(self):
            return self.getTypedRuleContext(tucanParser.BkContext,0)


        def br(self):
            return self.getTypedRuleContext(tucanParser.BrContext,0)


        def ca(self):
            return self.getTypedRuleContext(tucanParser.CaContext,0)


        def cd(self):
            return self.getTypedRuleContext(tucanParser.CdContext,0)


        def ce(self):
            return self.getTypedRuleContext(tucanParser.CeContext,0)


        def cf(self):
            return self.getTypedRuleContext(tucanParser.CfContext,0)


        def cl(self):
            return self.getTypedRuleContext(tucanParser.ClContext,0)


        def cm(self):
            return self.getTypedRuleContext(tucanParser.CmContext,0)


        def cn(self):
            return self.getTypedRuleContext(tucanParser.CnContext,0)


        def co(self):
            return self.getTypedRuleContext(tucanParser.CoContext,0)


        def cr(self):
            return self.getTypedRuleContext(tucanParser.CrContext,0)


        def cs(self):
            return self.getTypedRuleContext(tucanParser.CsContext,0)


        def cu(self):
            return self.getTypedRuleContext(tucanParser.CuContext,0)


        def db(self):
            return self.getTypedRuleContext(tucanParser.DbContext,0)


        def ds(self):
            return self.getTypedRuleContext(tucanParser.DsContext,0)


        def dy(self):
            return self.getTypedRuleContext(tucanParser.DyContext,0)


        def er(self):
            return self.getTypedRuleContext(tucanParser.ErContext,0)


        def es(self):
            return self.getTypedRuleContext(tucanParser.EsContext,0)


        def eu(self):
            return self.getTypedRuleContext(tucanParser.EuContext,0)


        def f(self):
            return self.getTypedRuleContext(tucanParser.FContext,0)


        def fe(self):
            return self.getTypedRuleContext(tucanParser.FeContext,0)


        def fl(self):
            return self.getTypedRuleContext(tucanParser.FlContext,0)


        def fm(self):
            return self.getTypedRuleContext(tucanParser.FmContext,0)


        def fr(self):
            return self.getTypedRuleContext(tucanParser.FrContext,0)


        def ga(self):
            return self.getTypedRuleContext(tucanParser.GaContext,0)


        def gd(self):
            return self.getTypedRuleContext(tucanParser.GdContext,0)


        def ge(self):
            return self.getTypedRuleContext(tucanParser.GeContext,0)


        def h(self):
            return self.getTypedRuleContext(tucanParser.HContext,0)


        def he(self):
            return self.getTypedRuleContext(tucanParser.HeContext,0)


        def hf(self):
            return self.getTypedRuleContext(tucanParser.HfContext,0)


        def hg(self):
            return self.getTypedRuleContext(tucanParser.HgContext,0)


        def ho(self):
            return self.getTypedRuleContext(tucanParser.HoContext,0)


        def hs(self):
            return self.getTypedRuleContext(tucanParser.HsContext,0)


        def i(self):
            return self.getTypedRuleContext(tucanParser.IContext,0)


        def in_(self):
            return self.getTypedRuleContext(tucanParser.InContext,0)


        def ir(self):
            return self.getTypedRuleContext(tucanParser.IrContext,0)


        def k(self):
            return self.getTypedRuleContext(tucanParser.KContext,0)


        def kr(self):
            return self.getTypedRuleContext(tucanParser.KrContext,0)


        def la(self):
            return self.getTypedRuleContext(tucanParser.LaContext,0)


        def li(self):
            return self.getTypedRuleContext(tucanParser.LiContext,0)


        def lr(self):
            return self.getTypedRuleContext(tucanParser.LrContext,0)


        def lu(self):
            return self.getTypedRuleContext(tucanParser.LuContext,0)


        def lv(self):
            return self.getTypedRuleContext(tucanParser.LvContext,0)


        def mc(self):
            return self.getTypedRuleContext(tucanParser.McContext,0)


        def md(self):
            return self.getTypedRuleContext(tucanParser.MdContext,0)


        def mg(self):
            return self.getTypedRuleContext(tucanParser.MgContext,0)


        def mn(self):
            return self.getTypedRuleContext(tucanParser.MnContext,0)


        def mo(self):
            return self.getTypedRuleContext(tucanParser.MoContext,0)


        def mt(self):
            return self.getTypedRuleContext(tucanParser.MtContext,0)


        def n(self):
            return self.getTypedRuleContext(tucanParser.NContext,0)


        def na(self):
            return self.getTypedRuleContext(tucanParser.NaContext,0)


        def nb(self):
            return self.getTypedRuleContext(tucanParser.NbContext,0)


        def nd(self):
            return self.getTypedRuleContext(tucanParser.NdContext,0)


        def ne(self):
            return self.getTypedRuleContext(tucanParser.NeContext,0)


        def nh(self):
            return self.getTypedRuleContext(tucanParser.NhContext,0)


        def ni(self):
            return self.getTypedRuleContext(tucanParser.NiContext,0)


        def no(self):
            return self.getTypedRuleContext(tucanParser.NoContext,0)


        def np(self):
            return self.getTypedRuleContext(tucanParser.NpContext,0)


        def o(self):
            return self.getTypedRuleContext(tucanParser.OContext,0)


        def og(self):
            return self.getTypedRuleContext(tucanParser.OgContext,0)


        def os(self):
            return self.getTypedRuleContext(tucanParser.OsContext,0)


        def p(self):
            return self.getTypedRuleContext(tucanParser.PContext,0)


        def pa(self):
            return self.getTypedRuleContext(tucanParser.PaContext,0)


        def pb(self):
            return self.getTypedRuleContext(tucanParser.PbContext,0)


        def pd(self):
            return self.getTypedRuleContext(tucanParser.PdContext,0)


        def pm(self):
            return self.getTypedRuleContext(tucanParser.PmContext,0)


        def po(self):
            return self.getTypedRuleContext(tucanParser.PoContext,0)


        def pr(self):
            return self.getTypedRuleContext(tucanParser.PrContext,0)


        def pt(self):
            return self.getTypedRuleContext(tucanParser.PtContext,0)


        def pu(self):
            return self.getTypedRuleContext(tucanParser.PuContext,0)


        def ra(self):
            return self.getTypedRuleContext(tucanParser.RaContext,0)


        def rb(self):
            return self.getTypedRuleContext(tucanParser.RbContext,0)


        def re(self):
            return self.getTypedRuleContext(tucanParser.ReContext,0)


        def rf(self):
            return self.getTypedRuleContext(tucanParser.RfContext,0)


        def rg(self):
            return self.getTypedRuleContext(tucanParser.RgContext,0)


        def rh(self):
            return self.getTypedRuleContext(tucanParser.RhContext,0)


        def rn(self):
            return self.getTypedRuleContext(tucanParser.RnContext,0)


        def ru(self):
            return self.getTypedRuleContext(tucanParser.RuContext,0)


        def s(self):
            return self.getTypedRuleContext(tucanParser.SContext,0)


        def sb(self):
            return self.getTypedRuleContext(tucanParser.SbContext,0)


        def sc(self):
            return self.getTypedRuleContext(tucanParser.ScContext,0)


        def se(self):
            return self.getTypedRuleContext(tucanParser.SeContext,0)


        def sg(self):
            return self.getTypedRuleContext(tucanParser.SgContext,0)


        def si(self):
            return self.getTypedRuleContext(tucanParser.SiContext,0)


        def sm(self):
            return self.getTypedRuleContext(tucanParser.SmContext,0)


        def sn(self):
            return self.getTypedRuleContext(tucanParser.SnContext,0)


        def sr(self):
            return self.getTypedRuleContext(tucanParser.SrContext,0)


        def ta(self):
            return self.getTypedRuleContext(tucanParser.TaContext,0)


        def tb(self):
            return self.getTypedRuleContext(tucanParser.TbContext,0)


        def tc(self):
            return self.getTypedRuleContext(tucanParser.TcContext,0)


        def te(self):
            return self.getTypedRuleContext(tucanParser.TeContext,0)


        def th(self):
            return self.getTypedRuleContext(tucanParser.ThContext,0)


        def ti(self):
            return self.getTypedRuleContext(tucanParser.TiContext,0)


        def tl(self):
            return self.getTypedRuleContext(tucanParser.TlContext,0)


        def tm(self):
            return self.getTypedRuleContext(tucanParser.TmContext,0)


        def ts(self):
            return self.getTypedRuleContext(tucanParser.TsContext,0)


        def u(self):
            return self.getTypedRuleContext(tucanParser.UContext,0)


        def v(self):
            return self.getTypedRuleContext(tucanParser.VContext,0)


        def w(self):
            return self.getTypedRuleContext(tucanParser.WContext,0)


        def xe(self):
            return self.getTypedRuleContext(tucanParser.XeContext,0)


        def y(self):
            return self.getTypedRuleContext(tucanParser.YContext,0)


        def yb(self):
            return self.getTypedRuleContext(tucanParser.YbContext,0)


        def zn(self):
            return self.getTypedRuleContext(tucanParser.ZnContext,0)


        def zr(self):
            return self.getTypedRuleContext(tucanParser.ZrContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_without_carbon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithout_carbon" ):
                listener.enterWithout_carbon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithout_carbon" ):
                listener.exitWithout_carbon(self)




    def without_carbon(self):

        localctx = tucanParser.Without_carbonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_without_carbon)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 631
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==101:
                self.state = 630
                self.ac()


            self.state = 634
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 633
                self.ag()


            self.state = 637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==25:
                self.state = 636
                self.al()


            self.state = 640
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==107:
                self.state = 639
                self.am()


            self.state = 643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==30:
                self.state = 642
                self.ar()


            self.state = 646
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 645
                self.as_()


            self.state = 649
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==97:
                self.state = 648
                self.at()


            self.state = 652
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==91:
                self.state = 651
                self.au()


            self.state = 655
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 654
                self.b()


            self.state = 658
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 657
                self.ba()


            self.state = 661
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 660
                self.be()


            self.state = 664
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119:
                self.state = 663
                self.bh()


            self.state = 667
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==95:
                self.state = 666
                self.bi()


            self.state = 670
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==109:
                self.state = 669
                self.bk()


            self.state = 673
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 672
                self.br()


            self.state = 676
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 675
                self.ca()


            self.state = 679
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 678
                self.cd()


            self.state = 682
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==70:
                self.state = 681
                self.ce()


            self.state = 685
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==110:
                self.state = 684
                self.cf()


            self.state = 688
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==29:
                self.state = 687
                self.cl()


            self.state = 691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==108:
                self.state = 690
                self.cm()


            self.state = 694
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==124:
                self.state = 693
                self.cn()


            self.state = 697
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==39:
                self.state = 696
                self.co()


            self.state = 700
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==36:
                self.state = 699
                self.cr()


            self.state = 703
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67:
                self.state = 702
                self.cs()


            self.state = 706
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==41:
                self.state = 705
                self.cu()


            self.state = 709
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==117:
                self.state = 708
                self.db()


            self.state = 712
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==122:
                self.state = 711
                self.ds()


            self.state = 715
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78:
                self.state = 714
                self.dy()


            self.state = 718
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==80:
                self.state = 717
                self.er()


            self.state = 721
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 720
                self.es()


            self.state = 724
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75:
                self.state = 723
                self.eu()


            self.state = 727
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21:
                self.state = 726
                self.f()


            self.state = 730
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==38:
                self.state = 729
                self.fe()


            self.state = 733
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==126:
                self.state = 732
                self.fl()


            self.state = 736
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==112:
                self.state = 735
                self.fm()


            self.state = 739
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==99:
                self.state = 738
                self.fr()


            self.state = 742
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==43:
                self.state = 741
                self.ga()


            self.state = 745
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==76:
                self.state = 744
                self.gd()


            self.state = 748
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==44:
                self.state = 747
                self.ge()


            self.state = 751
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 750
                self.h()


            self.state = 754
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 753
                self.he()


            self.state = 757
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==84:
                self.state = 756
                self.hf()


            self.state = 760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 759
                self.hg()


            self.state = 763
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==79:
                self.state = 762
                self.ho()


            self.state = 766
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==120:
                self.state = 765
                self.hs()


            self.state = 769
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 768
                self.i()


            self.state = 772
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==61:
                self.state = 771
                self.in_()


            self.state = 775
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==89:
                self.state = 774
                self.ir()


            self.state = 778
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==31:
                self.state = 777
                self.k()


            self.state = 781
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 780
                self.kr()


            self.state = 784
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==69:
                self.state = 783
                self.la()


            self.state = 787
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==15:
                self.state = 786
                self.li()


            self.state = 790
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==115:
                self.state = 789
                self.lr()


            self.state = 793
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==83:
                self.state = 792
                self.lu()


            self.state = 796
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==128:
                self.state = 795
                self.lv()


            self.state = 799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 798
                self.mc()


            self.state = 802
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==113:
                self.state = 801
                self.md()


            self.state = 805
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24:
                self.state = 804
                self.mg()


            self.state = 808
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==37:
                self.state = 807
                self.mn()


            self.state = 811
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==54:
                self.state = 810
                self.mo()


            self.state = 814
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==121:
                self.state = 813
                self.mt()


            self.state = 817
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 816
                self.n()


            self.state = 820
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23:
                self.state = 819
                self.na()


            self.state = 823
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 822
                self.nb()


            self.state = 826
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==72:
                self.state = 825
                self.nd()


            self.state = 829
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 828
                self.ne()


            self.state = 832
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 831
                self.nh()


            self.state = 835
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==40:
                self.state = 834
                self.ni()


            self.state = 838
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==114:
                self.state = 837
                self.no()


            self.state = 841
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==105:
                self.state = 840
                self.np()


            self.state = 844
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 843
                self.o()


            self.state = 847
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==130:
                self.state = 846
                self.og()


            self.state = 850
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==88:
                self.state = 849
                self.os()


            self.state = 853
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==27:
                self.state = 852
                self.p()


            self.state = 856
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==103:
                self.state = 855
                self.pa()


            self.state = 859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==94:
                self.state = 858
                self.pb()


            self.state = 862
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 861
                self.pd()


            self.state = 865
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73:
                self.state = 864
                self.pm()


            self.state = 868
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==96:
                self.state = 867
                self.po()


            self.state = 871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 870
                self.pr()


            self.state = 874
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 873
                self.pt()


            self.state = 877
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==106:
                self.state = 876
                self.pu()


            self.state = 880
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==100:
                self.state = 879
                self.ra()


            self.state = 883
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 882
                self.rb()


            self.state = 886
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==87:
                self.state = 885
                self.re()


            self.state = 889
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==116:
                self.state = 888
                self.rf()


            self.state = 892
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==123:
                self.state = 891
                self.rg()


            self.state = 895
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 894
                self.rh()


            self.state = 898
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98:
                self.state = 897
                self.rn()


            self.state = 901
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 900
                self.ru()


            self.state = 904
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==28:
                self.state = 903
                self.s()


            self.state = 907
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 906
                self.sb()


            self.state = 910
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==33:
                self.state = 909
                self.sc()


            self.state = 913
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 912
                self.se()


            self.state = 916
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==118:
                self.state = 915
                self.sg()


            self.state = 919
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 918
                self.si()


            self.state = 922
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==74:
                self.state = 921
                self.sm()


            self.state = 925
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 924
                self.sn()


            self.state = 928
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 927
                self.sr()


            self.state = 931
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==85:
                self.state = 930
                self.ta()


            self.state = 934
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 933
                self.tb()


            self.state = 937
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==55:
                self.state = 936
                self.tc()


            self.state = 940
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==64:
                self.state = 939
                self.te()


            self.state = 943
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==102:
                self.state = 942
                self.th()


            self.state = 946
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 945
                self.ti()


            self.state = 949
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==93:
                self.state = 948
                self.tl()


            self.state = 952
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 951
                self.tm()


            self.state = 955
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 954
                self.ts()


            self.state = 958
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==104:
                self.state = 957
                self.u()


            self.state = 961
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 960
                self.v()


            self.state = 964
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 963
                self.w()


            self.state = 967
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 966
                self.xe()


            self.state = 970
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51:
                self.state = 969
                self.y()


            self.state = 973
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82:
                self.state = 972
                self.yb()


            self.state = 976
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42:
                self.state = 975
                self.zn()


            self.state = 979
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 978
                self.zr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_h

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterH" ):
                listener.enterH(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitH" ):
                listener.exitH(self)




    def h(self):

        localctx = tucanParser.HContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_h)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 981
            self.match(tucanParser.T__12)
            self.state = 983
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 982
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_he

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHe" ):
                listener.enterHe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHe" ):
                listener.exitHe(self)




    def he(self):

        localctx = tucanParser.HeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_he)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 985
            self.match(tucanParser.T__13)
            self.state = 987
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 986
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_li

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLi" ):
                listener.enterLi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLi" ):
                listener.exitLi(self)




    def li(self):

        localctx = tucanParser.LiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_li)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 989
            self.match(tucanParser.T__14)
            self.state = 991
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 990
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_be

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBe" ):
                listener.enterBe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBe" ):
                listener.exitBe(self)




    def be(self):

        localctx = tucanParser.BeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_be)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 993
            self.match(tucanParser.T__15)
            self.state = 995
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 994
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_b

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterB" ):
                listener.enterB(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitB" ):
                listener.exitB(self)




    def b(self):

        localctx = tucanParser.BContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_b)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 997
            self.match(tucanParser.T__16)
            self.state = 999
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 998
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_c

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterC" ):
                listener.enterC(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitC" ):
                listener.exitC(self)




    def c(self):

        localctx = tucanParser.CContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_c)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1001
            self.match(tucanParser.T__17)
            self.state = 1003
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1002
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_n

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterN" ):
                listener.enterN(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitN" ):
                listener.exitN(self)




    def n(self):

        localctx = tucanParser.NContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_n)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1005
            self.match(tucanParser.T__18)
            self.state = 1007
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1006
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_o

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterO" ):
                listener.enterO(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitO" ):
                listener.exitO(self)




    def o(self):

        localctx = tucanParser.OContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_o)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1009
            self.match(tucanParser.T__19)
            self.state = 1011
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1010
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_f

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterF" ):
                listener.enterF(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitF" ):
                listener.exitF(self)




    def f(self):

        localctx = tucanParser.FContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_f)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1013
            self.match(tucanParser.T__20)
            self.state = 1015
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1014
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ne

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNe" ):
                listener.enterNe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNe" ):
                listener.exitNe(self)




    def ne(self):

        localctx = tucanParser.NeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_ne)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1017
            self.match(tucanParser.T__21)
            self.state = 1019
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1018
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_na

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNa" ):
                listener.enterNa(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNa" ):
                listener.exitNa(self)




    def na(self):

        localctx = tucanParser.NaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_na)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1021
            self.match(tucanParser.T__22)
            self.state = 1023
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1022
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_mg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMg" ):
                listener.enterMg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMg" ):
                listener.exitMg(self)




    def mg(self):

        localctx = tucanParser.MgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_mg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1025
            self.match(tucanParser.T__23)
            self.state = 1027
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1026
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_al

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAl" ):
                listener.enterAl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAl" ):
                listener.exitAl(self)




    def al(self):

        localctx = tucanParser.AlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_al)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1029
            self.match(tucanParser.T__24)
            self.state = 1031
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1030
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_si

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSi" ):
                listener.enterSi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSi" ):
                listener.exitSi(self)




    def si(self):

        localctx = tucanParser.SiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_si)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1033
            self.match(tucanParser.T__25)
            self.state = 1035
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1034
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_p

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterP" ):
                listener.enterP(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitP" ):
                listener.exitP(self)




    def p(self):

        localctx = tucanParser.PContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1037
            self.match(tucanParser.T__26)
            self.state = 1039
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1038
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_s

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS" ):
                listener.enterS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS" ):
                listener.exitS(self)




    def s(self):

        localctx = tucanParser.SContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_s)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1041
            self.match(tucanParser.T__27)
            self.state = 1043
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1042
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_cl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCl" ):
                listener.enterCl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCl" ):
                listener.exitCl(self)




    def cl(self):

        localctx = tucanParser.ClContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_cl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1045
            self.match(tucanParser.T__28)
            self.state = 1047
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1046
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAr" ):
                listener.enterAr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAr" ):
                listener.exitAr(self)




    def ar(self):

        localctx = tucanParser.ArContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_ar)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1049
            self.match(tucanParser.T__29)
            self.state = 1051
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1050
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_k

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterK" ):
                listener.enterK(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitK" ):
                listener.exitK(self)




    def k(self):

        localctx = tucanParser.KContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_k)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1053
            self.match(tucanParser.T__30)
            self.state = 1055
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1054
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ca

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCa" ):
                listener.enterCa(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCa" ):
                listener.exitCa(self)




    def ca(self):

        localctx = tucanParser.CaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_ca)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1057
            self.match(tucanParser.T__31)
            self.state = 1059
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1058
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_sc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSc" ):
                listener.enterSc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSc" ):
                listener.exitSc(self)




    def sc(self):

        localctx = tucanParser.ScContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_sc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1061
            self.match(tucanParser.T__32)
            self.state = 1063
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1062
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ti

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTi" ):
                listener.enterTi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTi" ):
                listener.exitTi(self)




    def ti(self):

        localctx = tucanParser.TiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_ti)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1065
            self.match(tucanParser.T__33)
            self.state = 1067
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1066
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_v

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterV" ):
                listener.enterV(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitV" ):
                listener.exitV(self)




    def v(self):

        localctx = tucanParser.VContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_v)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1069
            self.match(tucanParser.T__34)
            self.state = 1071
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1070
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_cr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCr" ):
                listener.enterCr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCr" ):
                listener.exitCr(self)




    def cr(self):

        localctx = tucanParser.CrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_cr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1073
            self.match(tucanParser.T__35)
            self.state = 1075
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1074
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_mn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMn" ):
                listener.enterMn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMn" ):
                listener.exitMn(self)




    def mn(self):

        localctx = tucanParser.MnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_mn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1077
            self.match(tucanParser.T__36)
            self.state = 1079
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1078
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_fe

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFe" ):
                listener.enterFe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFe" ):
                listener.exitFe(self)




    def fe(self):

        localctx = tucanParser.FeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_fe)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1081
            self.match(tucanParser.T__37)
            self.state = 1083
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1082
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_co

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCo" ):
                listener.enterCo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCo" ):
                listener.exitCo(self)




    def co(self):

        localctx = tucanParser.CoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_co)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1085
            self.match(tucanParser.T__38)
            self.state = 1087
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1086
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ni

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNi" ):
                listener.enterNi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNi" ):
                listener.exitNi(self)




    def ni(self):

        localctx = tucanParser.NiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_ni)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1089
            self.match(tucanParser.T__39)
            self.state = 1091
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1090
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CuContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_cu

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCu" ):
                listener.enterCu(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCu" ):
                listener.exitCu(self)




    def cu(self):

        localctx = tucanParser.CuContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_cu)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1093
            self.match(tucanParser.T__40)
            self.state = 1095
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1094
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ZnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_zn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterZn" ):
                listener.enterZn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitZn" ):
                listener.exitZn(self)




    def zn(self):

        localctx = tucanParser.ZnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_zn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1097
            self.match(tucanParser.T__41)
            self.state = 1099
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1098
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ga

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGa" ):
                listener.enterGa(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGa" ):
                listener.exitGa(self)




    def ga(self):

        localctx = tucanParser.GaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_ga)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1101
            self.match(tucanParser.T__42)
            self.state = 1103
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1102
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ge

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGe" ):
                listener.enterGe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGe" ):
                listener.exitGe(self)




    def ge(self):

        localctx = tucanParser.GeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_ge)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1105
            self.match(tucanParser.T__43)
            self.state = 1107
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1106
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_as

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAs" ):
                listener.enterAs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAs" ):
                listener.exitAs(self)




    def as_(self):

        localctx = tucanParser.AsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_as)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1109
            self.match(tucanParser.T__44)
            self.state = 1111
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1110
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_se

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSe" ):
                listener.enterSe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSe" ):
                listener.exitSe(self)




    def se(self):

        localctx = tucanParser.SeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_se)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1113
            self.match(tucanParser.T__45)
            self.state = 1115
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1114
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_br

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBr" ):
                listener.enterBr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBr" ):
                listener.exitBr(self)




    def br(self):

        localctx = tucanParser.BrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_br)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1117
            self.match(tucanParser.T__46)
            self.state = 1119
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1118
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_kr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKr" ):
                listener.enterKr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKr" ):
                listener.exitKr(self)




    def kr(self):

        localctx = tucanParser.KrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_kr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1121
            self.match(tucanParser.T__47)
            self.state = 1123
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1122
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RbContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_rb

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRb" ):
                listener.enterRb(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRb" ):
                listener.exitRb(self)




    def rb(self):

        localctx = tucanParser.RbContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_rb)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1125
            self.match(tucanParser.T__48)
            self.state = 1127
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1126
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_sr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSr" ):
                listener.enterSr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSr" ):
                listener.exitSr(self)




    def sr(self):

        localctx = tucanParser.SrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_sr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1129
            self.match(tucanParser.T__49)
            self.state = 1131
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1130
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_y

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterY" ):
                listener.enterY(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitY" ):
                listener.exitY(self)




    def y(self):

        localctx = tucanParser.YContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_y)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1133
            self.match(tucanParser.T__50)
            self.state = 1135
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1134
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ZrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_zr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterZr" ):
                listener.enterZr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitZr" ):
                listener.exitZr(self)




    def zr(self):

        localctx = tucanParser.ZrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_zr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1137
            self.match(tucanParser.T__51)
            self.state = 1139
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1138
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NbContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_nb

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNb" ):
                listener.enterNb(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNb" ):
                listener.exitNb(self)




    def nb(self):

        localctx = tucanParser.NbContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_nb)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1141
            self.match(tucanParser.T__52)
            self.state = 1143
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1142
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_mo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMo" ):
                listener.enterMo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMo" ):
                listener.exitMo(self)




    def mo(self):

        localctx = tucanParser.MoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_mo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1145
            self.match(tucanParser.T__53)
            self.state = 1147
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1146
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_tc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTc" ):
                listener.enterTc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTc" ):
                listener.exitTc(self)




    def tc(self):

        localctx = tucanParser.TcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_tc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1149
            self.match(tucanParser.T__54)
            self.state = 1151
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1150
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ru

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRu" ):
                listener.enterRu(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRu" ):
                listener.exitRu(self)




    def ru(self):

        localctx = tucanParser.RuContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_ru)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1153
            self.match(tucanParser.T__55)
            self.state = 1155
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1154
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RhContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_rh

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRh" ):
                listener.enterRh(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRh" ):
                listener.exitRh(self)




    def rh(self):

        localctx = tucanParser.RhContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_rh)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1157
            self.match(tucanParser.T__56)
            self.state = 1159
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1158
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_pd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPd" ):
                listener.enterPd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPd" ):
                listener.exitPd(self)




    def pd(self):

        localctx = tucanParser.PdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_pd)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1161
            self.match(tucanParser.T__57)
            self.state = 1163
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1162
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAg" ):
                listener.enterAg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAg" ):
                listener.exitAg(self)




    def ag(self):

        localctx = tucanParser.AgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_ag)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1165
            self.match(tucanParser.T__58)
            self.state = 1167
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1166
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_cd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCd" ):
                listener.enterCd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCd" ):
                listener.exitCd(self)




    def cd(self):

        localctx = tucanParser.CdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_cd)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1169
            self.match(tucanParser.T__59)
            self.state = 1171
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1170
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_in

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIn" ):
                listener.enterIn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIn" ):
                listener.exitIn(self)




    def in_(self):

        localctx = tucanParser.InContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_in)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1173
            self.match(tucanParser.T__60)
            self.state = 1175
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1174
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_sn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSn" ):
                listener.enterSn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSn" ):
                listener.exitSn(self)




    def sn(self):

        localctx = tucanParser.SnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_sn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1177
            self.match(tucanParser.T__61)
            self.state = 1179
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1178
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SbContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_sb

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSb" ):
                listener.enterSb(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSb" ):
                listener.exitSb(self)




    def sb(self):

        localctx = tucanParser.SbContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_sb)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1181
            self.match(tucanParser.T__62)
            self.state = 1183
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1182
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_te

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTe" ):
                listener.enterTe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTe" ):
                listener.exitTe(self)




    def te(self):

        localctx = tucanParser.TeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_te)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1185
            self.match(tucanParser.T__63)
            self.state = 1187
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1186
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_i

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterI" ):
                listener.enterI(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitI" ):
                listener.exitI(self)




    def i(self):

        localctx = tucanParser.IContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_i)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1189
            self.match(tucanParser.T__64)
            self.state = 1191
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1190
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_xe

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXe" ):
                listener.enterXe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXe" ):
                listener.exitXe(self)




    def xe(self):

        localctx = tucanParser.XeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_xe)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1193
            self.match(tucanParser.T__65)
            self.state = 1195
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1194
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_cs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCs" ):
                listener.enterCs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCs" ):
                listener.exitCs(self)




    def cs(self):

        localctx = tucanParser.CsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_cs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1197
            self.match(tucanParser.T__66)
            self.state = 1199
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1198
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ba

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBa" ):
                listener.enterBa(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBa" ):
                listener.exitBa(self)




    def ba(self):

        localctx = tucanParser.BaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_ba)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1201
            self.match(tucanParser.T__67)
            self.state = 1203
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1202
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_la

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLa" ):
                listener.enterLa(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLa" ):
                listener.exitLa(self)




    def la(self):

        localctx = tucanParser.LaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_la)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1205
            self.match(tucanParser.T__68)
            self.state = 1207
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1206
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ce

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCe" ):
                listener.enterCe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCe" ):
                listener.exitCe(self)




    def ce(self):

        localctx = tucanParser.CeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_ce)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1209
            self.match(tucanParser.T__69)
            self.state = 1211
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1210
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_pr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPr" ):
                listener.enterPr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPr" ):
                listener.exitPr(self)




    def pr(self):

        localctx = tucanParser.PrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_pr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1213
            self.match(tucanParser.T__70)
            self.state = 1215
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1214
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_nd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNd" ):
                listener.enterNd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNd" ):
                listener.exitNd(self)




    def nd(self):

        localctx = tucanParser.NdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_nd)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1217
            self.match(tucanParser.T__71)
            self.state = 1219
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1218
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_pm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPm" ):
                listener.enterPm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPm" ):
                listener.exitPm(self)




    def pm(self):

        localctx = tucanParser.PmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_pm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1221
            self.match(tucanParser.T__72)
            self.state = 1223
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1222
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_sm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSm" ):
                listener.enterSm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSm" ):
                listener.exitSm(self)




    def sm(self):

        localctx = tucanParser.SmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_sm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1225
            self.match(tucanParser.T__73)
            self.state = 1227
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1226
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EuContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_eu

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEu" ):
                listener.enterEu(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEu" ):
                listener.exitEu(self)




    def eu(self):

        localctx = tucanParser.EuContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_eu)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1229
            self.match(tucanParser.T__74)
            self.state = 1231
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1230
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_gd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGd" ):
                listener.enterGd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGd" ):
                listener.exitGd(self)




    def gd(self):

        localctx = tucanParser.GdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_gd)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1233
            self.match(tucanParser.T__75)
            self.state = 1235
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1234
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TbContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_tb

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTb" ):
                listener.enterTb(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTb" ):
                listener.exitTb(self)




    def tb(self):

        localctx = tucanParser.TbContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_tb)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1237
            self.match(tucanParser.T__76)
            self.state = 1239
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1238
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_dy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDy" ):
                listener.enterDy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDy" ):
                listener.exitDy(self)




    def dy(self):

        localctx = tucanParser.DyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_dy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1241
            self.match(tucanParser.T__77)
            self.state = 1243
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1242
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ho

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHo" ):
                listener.enterHo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHo" ):
                listener.exitHo(self)




    def ho(self):

        localctx = tucanParser.HoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_ho)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1245
            self.match(tucanParser.T__78)
            self.state = 1247
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1246
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_er

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEr" ):
                listener.enterEr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEr" ):
                listener.exitEr(self)




    def er(self):

        localctx = tucanParser.ErContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_er)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1249
            self.match(tucanParser.T__79)
            self.state = 1251
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1250
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_tm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTm" ):
                listener.enterTm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTm" ):
                listener.exitTm(self)




    def tm(self):

        localctx = tucanParser.TmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_tm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1253
            self.match(tucanParser.T__80)
            self.state = 1255
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1254
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YbContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_yb

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYb" ):
                listener.enterYb(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYb" ):
                listener.exitYb(self)




    def yb(self):

        localctx = tucanParser.YbContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_yb)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1257
            self.match(tucanParser.T__81)
            self.state = 1259
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1258
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LuContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_lu

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLu" ):
                listener.enterLu(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLu" ):
                listener.exitLu(self)




    def lu(self):

        localctx = tucanParser.LuContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_lu)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1261
            self.match(tucanParser.T__82)
            self.state = 1263
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1262
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_hf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHf" ):
                listener.enterHf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHf" ):
                listener.exitHf(self)




    def hf(self):

        localctx = tucanParser.HfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_hf)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1265
            self.match(tucanParser.T__83)
            self.state = 1267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1266
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ta

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTa" ):
                listener.enterTa(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTa" ):
                listener.exitTa(self)




    def ta(self):

        localctx = tucanParser.TaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_ta)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1269
            self.match(tucanParser.T__84)
            self.state = 1271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1270
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_w

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterW" ):
                listener.enterW(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitW" ):
                listener.exitW(self)




    def w(self):

        localctx = tucanParser.WContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_w)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1273
            self.match(tucanParser.T__85)
            self.state = 1275
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1274
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_re

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRe" ):
                listener.enterRe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRe" ):
                listener.exitRe(self)




    def re(self):

        localctx = tucanParser.ReContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_re)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1277
            self.match(tucanParser.T__86)
            self.state = 1279
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1278
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_os

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOs" ):
                listener.enterOs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOs" ):
                listener.exitOs(self)




    def os(self):

        localctx = tucanParser.OsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_os)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1281
            self.match(tucanParser.T__87)
            self.state = 1283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1282
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ir

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIr" ):
                listener.enterIr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIr" ):
                listener.exitIr(self)




    def ir(self):

        localctx = tucanParser.IrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_ir)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1285
            self.match(tucanParser.T__88)
            self.state = 1287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1286
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_pt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPt" ):
                listener.enterPt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPt" ):
                listener.exitPt(self)




    def pt(self):

        localctx = tucanParser.PtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_pt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1289
            self.match(tucanParser.T__89)
            self.state = 1291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1290
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_au

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAu" ):
                listener.enterAu(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAu" ):
                listener.exitAu(self)




    def au(self):

        localctx = tucanParser.AuContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_au)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1293
            self.match(tucanParser.T__90)
            self.state = 1295
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1294
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_hg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHg" ):
                listener.enterHg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHg" ):
                listener.exitHg(self)




    def hg(self):

        localctx = tucanParser.HgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_hg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1297
            self.match(tucanParser.T__91)
            self.state = 1299
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1298
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_tl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTl" ):
                listener.enterTl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTl" ):
                listener.exitTl(self)




    def tl(self):

        localctx = tucanParser.TlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_tl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1301
            self.match(tucanParser.T__92)
            self.state = 1303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1302
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PbContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_pb

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPb" ):
                listener.enterPb(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPb" ):
                listener.exitPb(self)




    def pb(self):

        localctx = tucanParser.PbContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_pb)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1305
            self.match(tucanParser.T__93)
            self.state = 1307
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1306
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_bi

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBi" ):
                listener.enterBi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBi" ):
                listener.exitBi(self)




    def bi(self):

        localctx = tucanParser.BiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_bi)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1309
            self.match(tucanParser.T__94)
            self.state = 1311
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1310
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_po

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPo" ):
                listener.enterPo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPo" ):
                listener.exitPo(self)




    def po(self):

        localctx = tucanParser.PoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_po)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1313
            self.match(tucanParser.T__95)
            self.state = 1315
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1314
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_at

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAt" ):
                listener.enterAt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAt" ):
                listener.exitAt(self)




    def at(self):

        localctx = tucanParser.AtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_at)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1317
            self.match(tucanParser.T__96)
            self.state = 1319
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1318
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_rn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRn" ):
                listener.enterRn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRn" ):
                listener.exitRn(self)




    def rn(self):

        localctx = tucanParser.RnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_rn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1321
            self.match(tucanParser.T__97)
            self.state = 1323
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1322
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_fr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFr" ):
                listener.enterFr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFr" ):
                listener.exitFr(self)




    def fr(self):

        localctx = tucanParser.FrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_fr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1325
            self.match(tucanParser.T__98)
            self.state = 1327
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1326
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ra

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRa" ):
                listener.enterRa(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRa" ):
                listener.exitRa(self)




    def ra(self):

        localctx = tucanParser.RaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_ra)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1329
            self.match(tucanParser.T__99)
            self.state = 1331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1330
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ac

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAc" ):
                listener.enterAc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAc" ):
                listener.exitAc(self)




    def ac(self):

        localctx = tucanParser.AcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_ac)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1333
            self.match(tucanParser.T__100)
            self.state = 1335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1334
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_th

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTh" ):
                listener.enterTh(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTh" ):
                listener.exitTh(self)




    def th(self):

        localctx = tucanParser.ThContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_th)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1337
            self.match(tucanParser.T__101)
            self.state = 1339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1338
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_pa

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPa" ):
                listener.enterPa(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPa" ):
                listener.exitPa(self)




    def pa(self):

        localctx = tucanParser.PaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_pa)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1341
            self.match(tucanParser.T__102)
            self.state = 1343
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1342
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_u

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterU" ):
                listener.enterU(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitU" ):
                listener.exitU(self)




    def u(self):

        localctx = tucanParser.UContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_u)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1345
            self.match(tucanParser.T__103)
            self.state = 1347
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1346
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_np

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNp" ):
                listener.enterNp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNp" ):
                listener.exitNp(self)




    def np(self):

        localctx = tucanParser.NpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_np)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1349
            self.match(tucanParser.T__104)
            self.state = 1351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1350
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PuContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_pu

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPu" ):
                listener.enterPu(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPu" ):
                listener.exitPu(self)




    def pu(self):

        localctx = tucanParser.PuContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_pu)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1353
            self.match(tucanParser.T__105)
            self.state = 1355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1354
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_am

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAm" ):
                listener.enterAm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAm" ):
                listener.exitAm(self)




    def am(self):

        localctx = tucanParser.AmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_am)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1357
            self.match(tucanParser.T__106)
            self.state = 1359
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1358
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_cm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCm" ):
                listener.enterCm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCm" ):
                listener.exitCm(self)




    def cm(self):

        localctx = tucanParser.CmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_cm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1361
            self.match(tucanParser.T__107)
            self.state = 1363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1362
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_bk

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBk" ):
                listener.enterBk(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBk" ):
                listener.exitBk(self)




    def bk(self):

        localctx = tucanParser.BkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_bk)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1365
            self.match(tucanParser.T__108)
            self.state = 1367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1366
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_cf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCf" ):
                listener.enterCf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCf" ):
                listener.exitCf(self)




    def cf(self):

        localctx = tucanParser.CfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_cf)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1369
            self.match(tucanParser.T__109)
            self.state = 1371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1370
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_es

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEs" ):
                listener.enterEs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEs" ):
                listener.exitEs(self)




    def es(self):

        localctx = tucanParser.EsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_es)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1373
            self.match(tucanParser.T__110)
            self.state = 1375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1374
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_fm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFm" ):
                listener.enterFm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFm" ):
                listener.exitFm(self)




    def fm(self):

        localctx = tucanParser.FmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_fm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1377
            self.match(tucanParser.T__111)
            self.state = 1379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1378
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_md

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMd" ):
                listener.enterMd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMd" ):
                listener.exitMd(self)




    def md(self):

        localctx = tucanParser.MdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_md)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1381
            self.match(tucanParser.T__112)
            self.state = 1383
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1382
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_no

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNo" ):
                listener.enterNo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNo" ):
                listener.exitNo(self)




    def no(self):

        localctx = tucanParser.NoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_no)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1385
            self.match(tucanParser.T__113)
            self.state = 1387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1386
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_lr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLr" ):
                listener.enterLr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLr" ):
                listener.exitLr(self)




    def lr(self):

        localctx = tucanParser.LrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_lr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1389
            self.match(tucanParser.T__114)
            self.state = 1391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1390
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_rf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRf" ):
                listener.enterRf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRf" ):
                listener.exitRf(self)




    def rf(self):

        localctx = tucanParser.RfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_rf)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1393
            self.match(tucanParser.T__115)
            self.state = 1395
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1394
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DbContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_db

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDb" ):
                listener.enterDb(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDb" ):
                listener.exitDb(self)




    def db(self):

        localctx = tucanParser.DbContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_db)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1397
            self.match(tucanParser.T__116)
            self.state = 1399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1398
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_sg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSg" ):
                listener.enterSg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSg" ):
                listener.exitSg(self)




    def sg(self):

        localctx = tucanParser.SgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_sg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1401
            self.match(tucanParser.T__117)
            self.state = 1403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1402
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BhContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_bh

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBh" ):
                listener.enterBh(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBh" ):
                listener.exitBh(self)




    def bh(self):

        localctx = tucanParser.BhContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_bh)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1405
            self.match(tucanParser.T__118)
            self.state = 1407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1406
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_hs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHs" ):
                listener.enterHs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHs" ):
                listener.exitHs(self)




    def hs(self):

        localctx = tucanParser.HsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_hs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1409
            self.match(tucanParser.T__119)
            self.state = 1411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1410
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_mt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMt" ):
                listener.enterMt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMt" ):
                listener.exitMt(self)




    def mt(self):

        localctx = tucanParser.MtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_mt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1413
            self.match(tucanParser.T__120)
            self.state = 1415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1414
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ds

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDs" ):
                listener.enterDs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDs" ):
                listener.exitDs(self)




    def ds(self):

        localctx = tucanParser.DsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_ds)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1417
            self.match(tucanParser.T__121)
            self.state = 1419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1418
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_rg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRg" ):
                listener.enterRg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRg" ):
                listener.exitRg(self)




    def rg(self):

        localctx = tucanParser.RgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_rg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1421
            self.match(tucanParser.T__122)
            self.state = 1423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1422
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_cn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCn" ):
                listener.enterCn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCn" ):
                listener.exitCn(self)




    def cn(self):

        localctx = tucanParser.CnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_cn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1425
            self.match(tucanParser.T__123)
            self.state = 1427
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1426
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NhContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_nh

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNh" ):
                listener.enterNh(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNh" ):
                listener.exitNh(self)




    def nh(self):

        localctx = tucanParser.NhContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_nh)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1429
            self.match(tucanParser.T__124)
            self.state = 1431
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1430
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_fl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFl" ):
                listener.enterFl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFl" ):
                listener.exitFl(self)




    def fl(self):

        localctx = tucanParser.FlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_fl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1433
            self.match(tucanParser.T__125)
            self.state = 1435
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1434
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class McContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_mc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMc" ):
                listener.enterMc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMc" ):
                listener.exitMc(self)




    def mc(self):

        localctx = tucanParser.McContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_mc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1437
            self.match(tucanParser.T__126)
            self.state = 1439
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1438
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LvContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_lv

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLv" ):
                listener.enterLv(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLv" ):
                listener.exitLv(self)




    def lv(self):

        localctx = tucanParser.LvContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_lv)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1441
            self.match(tucanParser.T__127)
            self.state = 1443
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1442
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTs" ):
                listener.enterTs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTs" ):
                listener.exitTs(self)




    def ts(self):

        localctx = tucanParser.TsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_ts)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1445
            self.match(tucanParser.T__128)
            self.state = 1447
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1446
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_og

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOg" ):
                listener.enterOg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOg" ):
                listener.exitOg(self)




    def og(self):

        localctx = tucanParser.OgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_og)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1449
            self.match(tucanParser.T__129)
            self.state = 1451
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131:
                self.state = 1450
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CountContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GREATER_THAN_NINE(self):
            return self.getToken(tucanParser.GREATER_THAN_NINE, 0)

        def getRuleIndex(self):
            return tucanParser.RULE_count

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCount" ):
                listener.enterCount(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCount" ):
                listener.exitCount(self)




    def count(self):

        localctx = tucanParser.CountContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_count)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1453
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0 or _la==131):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





