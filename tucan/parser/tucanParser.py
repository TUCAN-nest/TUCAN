# Generated from tucan.g4 by ANTLR 4.11.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,137,1519,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,1,0,1,0,1,
        0,1,0,1,0,3,0,278,8,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,3,2,287,8,2,1,
        3,1,3,3,3,291,8,3,1,3,3,3,294,8,3,1,3,3,3,297,8,3,1,3,3,3,300,8,
        3,1,3,3,3,303,8,3,1,3,3,3,306,8,3,1,3,3,3,309,8,3,1,3,3,3,312,8,
        3,1,3,3,3,315,8,3,1,3,3,3,318,8,3,1,3,3,3,321,8,3,1,3,3,3,324,8,
        3,1,3,3,3,327,8,3,1,3,3,3,330,8,3,1,3,3,3,333,8,3,1,3,3,3,336,8,
        3,1,3,3,3,339,8,3,1,3,3,3,342,8,3,1,3,3,3,345,8,3,1,3,3,3,348,8,
        3,1,3,3,3,351,8,3,1,3,3,3,354,8,3,1,3,3,3,357,8,3,1,3,3,3,360,8,
        3,1,3,3,3,363,8,3,1,3,3,3,366,8,3,1,3,3,3,369,8,3,1,3,3,3,372,8,
        3,1,3,3,3,375,8,3,1,3,3,3,378,8,3,1,3,3,3,381,8,3,1,3,3,3,384,8,
        3,1,3,3,3,387,8,3,1,3,3,3,390,8,3,1,3,3,3,393,8,3,1,3,3,3,396,8,
        3,1,3,3,3,399,8,3,1,3,3,3,402,8,3,1,3,3,3,405,8,3,1,3,3,3,408,8,
        3,1,3,3,3,411,8,3,1,3,3,3,414,8,3,1,3,3,3,417,8,3,1,3,3,3,420,8,
        3,1,3,3,3,423,8,3,1,3,3,3,426,8,3,1,3,3,3,429,8,3,1,3,3,3,432,8,
        3,1,3,3,3,435,8,3,1,3,3,3,438,8,3,1,3,3,3,441,8,3,1,3,3,3,444,8,
        3,1,3,3,3,447,8,3,1,3,3,3,450,8,3,1,3,3,3,453,8,3,1,3,3,3,456,8,
        3,1,3,3,3,459,8,3,1,3,3,3,462,8,3,1,3,3,3,465,8,3,1,3,3,3,468,8,
        3,1,3,3,3,471,8,3,1,3,3,3,474,8,3,1,3,3,3,477,8,3,1,3,3,3,480,8,
        3,1,3,3,3,483,8,3,1,3,3,3,486,8,3,1,3,3,3,489,8,3,1,3,3,3,492,8,
        3,1,3,3,3,495,8,3,1,3,3,3,498,8,3,1,3,3,3,501,8,3,1,3,3,3,504,8,
        3,1,3,3,3,507,8,3,1,3,3,3,510,8,3,1,3,3,3,513,8,3,1,3,3,3,516,8,
        3,1,3,3,3,519,8,3,1,3,3,3,522,8,3,1,3,3,3,525,8,3,1,3,3,3,528,8,
        3,1,3,3,3,531,8,3,1,3,3,3,534,8,3,1,3,3,3,537,8,3,1,3,3,3,540,8,
        3,1,3,3,3,543,8,3,1,3,3,3,546,8,3,1,3,3,3,549,8,3,1,3,3,3,552,8,
        3,1,3,3,3,555,8,3,1,3,3,3,558,8,3,1,3,3,3,561,8,3,1,3,3,3,564,8,
        3,1,3,3,3,567,8,3,1,3,3,3,570,8,3,1,3,3,3,573,8,3,1,3,3,3,576,8,
        3,1,3,3,3,579,8,3,1,3,3,3,582,8,3,1,3,3,3,585,8,3,1,3,3,3,588,8,
        3,1,3,3,3,591,8,3,1,3,3,3,594,8,3,1,3,3,3,597,8,3,1,3,3,3,600,8,
        3,1,3,3,3,603,8,3,1,3,3,3,606,8,3,1,3,3,3,609,8,3,1,3,3,3,612,8,
        3,1,3,3,3,615,8,3,1,3,3,3,618,8,3,1,3,3,3,621,8,3,1,3,3,3,624,8,
        3,1,3,3,3,627,8,3,1,3,3,3,630,8,3,1,3,3,3,633,8,3,1,3,3,3,636,8,
        3,1,3,3,3,639,8,3,1,4,3,4,642,8,4,1,4,3,4,645,8,4,1,4,3,4,648,8,
        4,1,4,3,4,651,8,4,1,4,3,4,654,8,4,1,4,3,4,657,8,4,1,4,3,4,660,8,
        4,1,4,3,4,663,8,4,1,4,3,4,666,8,4,1,4,3,4,669,8,4,1,4,3,4,672,8,
        4,1,4,3,4,675,8,4,1,4,3,4,678,8,4,1,4,3,4,681,8,4,1,4,3,4,684,8,
        4,1,4,3,4,687,8,4,1,4,3,4,690,8,4,1,4,3,4,693,8,4,1,4,3,4,696,8,
        4,1,4,3,4,699,8,4,1,4,3,4,702,8,4,1,4,3,4,705,8,4,1,4,3,4,708,8,
        4,1,4,3,4,711,8,4,1,4,3,4,714,8,4,1,4,3,4,717,8,4,1,4,3,4,720,8,
        4,1,4,3,4,723,8,4,1,4,3,4,726,8,4,1,4,3,4,729,8,4,1,4,3,4,732,8,
        4,1,4,3,4,735,8,4,1,4,3,4,738,8,4,1,4,3,4,741,8,4,1,4,3,4,744,8,
        4,1,4,3,4,747,8,4,1,4,3,4,750,8,4,1,4,3,4,753,8,4,1,4,3,4,756,8,
        4,1,4,3,4,759,8,4,1,4,3,4,762,8,4,1,4,3,4,765,8,4,1,4,3,4,768,8,
        4,1,4,3,4,771,8,4,1,4,3,4,774,8,4,1,4,3,4,777,8,4,1,4,3,4,780,8,
        4,1,4,3,4,783,8,4,1,4,3,4,786,8,4,1,4,3,4,789,8,4,1,4,3,4,792,8,
        4,1,4,3,4,795,8,4,1,4,3,4,798,8,4,1,4,3,4,801,8,4,1,4,3,4,804,8,
        4,1,4,3,4,807,8,4,1,4,3,4,810,8,4,1,4,3,4,813,8,4,1,4,3,4,816,8,
        4,1,4,3,4,819,8,4,1,4,3,4,822,8,4,1,4,3,4,825,8,4,1,4,3,4,828,8,
        4,1,4,3,4,831,8,4,1,4,3,4,834,8,4,1,4,3,4,837,8,4,1,4,3,4,840,8,
        4,1,4,3,4,843,8,4,1,4,3,4,846,8,4,1,4,3,4,849,8,4,1,4,3,4,852,8,
        4,1,4,3,4,855,8,4,1,4,3,4,858,8,4,1,4,3,4,861,8,4,1,4,3,4,864,8,
        4,1,4,3,4,867,8,4,1,4,3,4,870,8,4,1,4,3,4,873,8,4,1,4,3,4,876,8,
        4,1,4,3,4,879,8,4,1,4,3,4,882,8,4,1,4,3,4,885,8,4,1,4,3,4,888,8,
        4,1,4,3,4,891,8,4,1,4,3,4,894,8,4,1,4,3,4,897,8,4,1,4,3,4,900,8,
        4,1,4,3,4,903,8,4,1,4,3,4,906,8,4,1,4,3,4,909,8,4,1,4,3,4,912,8,
        4,1,4,3,4,915,8,4,1,4,3,4,918,8,4,1,4,3,4,921,8,4,1,4,3,4,924,8,
        4,1,4,3,4,927,8,4,1,4,3,4,930,8,4,1,4,3,4,933,8,4,1,4,3,4,936,8,
        4,1,4,3,4,939,8,4,1,4,3,4,942,8,4,1,4,3,4,945,8,4,1,4,3,4,948,8,
        4,1,4,3,4,951,8,4,1,4,3,4,954,8,4,1,4,3,4,957,8,4,1,4,3,4,960,8,
        4,1,4,3,4,963,8,4,1,4,3,4,966,8,4,1,4,3,4,969,8,4,1,4,3,4,972,8,
        4,1,4,3,4,975,8,4,1,4,3,4,978,8,4,1,4,3,4,981,8,4,1,4,3,4,984,8,
        4,1,4,3,4,987,8,4,1,4,3,4,990,8,4,1,5,1,5,3,5,994,8,5,1,6,1,6,3,
        6,998,8,6,1,7,1,7,3,7,1002,8,7,1,8,1,8,3,8,1006,8,8,1,9,1,9,3,9,
        1010,8,9,1,10,1,10,3,10,1014,8,10,1,11,1,11,3,11,1018,8,11,1,12,
        1,12,3,12,1022,8,12,1,13,1,13,3,13,1026,8,13,1,14,1,14,3,14,1030,
        8,14,1,15,1,15,3,15,1034,8,15,1,16,1,16,3,16,1038,8,16,1,17,1,17,
        3,17,1042,8,17,1,18,1,18,3,18,1046,8,18,1,19,1,19,3,19,1050,8,19,
        1,20,1,20,3,20,1054,8,20,1,21,1,21,3,21,1058,8,21,1,22,1,22,3,22,
        1062,8,22,1,23,1,23,3,23,1066,8,23,1,24,1,24,3,24,1070,8,24,1,25,
        1,25,3,25,1074,8,25,1,26,1,26,3,26,1078,8,26,1,27,1,27,3,27,1082,
        8,27,1,28,1,28,3,28,1086,8,28,1,29,1,29,3,29,1090,8,29,1,30,1,30,
        3,30,1094,8,30,1,31,1,31,3,31,1098,8,31,1,32,1,32,3,32,1102,8,32,
        1,33,1,33,3,33,1106,8,33,1,34,1,34,3,34,1110,8,34,1,35,1,35,3,35,
        1114,8,35,1,36,1,36,3,36,1118,8,36,1,37,1,37,3,37,1122,8,37,1,38,
        1,38,3,38,1126,8,38,1,39,1,39,3,39,1130,8,39,1,40,1,40,3,40,1134,
        8,40,1,41,1,41,3,41,1138,8,41,1,42,1,42,3,42,1142,8,42,1,43,1,43,
        3,43,1146,8,43,1,44,1,44,3,44,1150,8,44,1,45,1,45,3,45,1154,8,45,
        1,46,1,46,3,46,1158,8,46,1,47,1,47,3,47,1162,8,47,1,48,1,48,3,48,
        1166,8,48,1,49,1,49,3,49,1170,8,49,1,50,1,50,3,50,1174,8,50,1,51,
        1,51,3,51,1178,8,51,1,52,1,52,3,52,1182,8,52,1,53,1,53,3,53,1186,
        8,53,1,54,1,54,3,54,1190,8,54,1,55,1,55,3,55,1194,8,55,1,56,1,56,
        3,56,1198,8,56,1,57,1,57,3,57,1202,8,57,1,58,1,58,3,58,1206,8,58,
        1,59,1,59,3,59,1210,8,59,1,60,1,60,3,60,1214,8,60,1,61,1,61,3,61,
        1218,8,61,1,62,1,62,3,62,1222,8,62,1,63,1,63,3,63,1226,8,63,1,64,
        1,64,3,64,1230,8,64,1,65,1,65,3,65,1234,8,65,1,66,1,66,3,66,1238,
        8,66,1,67,1,67,3,67,1242,8,67,1,68,1,68,3,68,1246,8,68,1,69,1,69,
        3,69,1250,8,69,1,70,1,70,3,70,1254,8,70,1,71,1,71,3,71,1258,8,71,
        1,72,1,72,3,72,1262,8,72,1,73,1,73,3,73,1266,8,73,1,74,1,74,3,74,
        1270,8,74,1,75,1,75,3,75,1274,8,75,1,76,1,76,3,76,1278,8,76,1,77,
        1,77,3,77,1282,8,77,1,78,1,78,3,78,1286,8,78,1,79,1,79,3,79,1290,
        8,79,1,80,1,80,3,80,1294,8,80,1,81,1,81,3,81,1298,8,81,1,82,1,82,
        3,82,1302,8,82,1,83,1,83,3,83,1306,8,83,1,84,1,84,3,84,1310,8,84,
        1,85,1,85,3,85,1314,8,85,1,86,1,86,3,86,1318,8,86,1,87,1,87,3,87,
        1322,8,87,1,88,1,88,3,88,1326,8,88,1,89,1,89,3,89,1330,8,89,1,90,
        1,90,3,90,1334,8,90,1,91,1,91,3,91,1338,8,91,1,92,1,92,3,92,1342,
        8,92,1,93,1,93,3,93,1346,8,93,1,94,1,94,3,94,1350,8,94,1,95,1,95,
        3,95,1354,8,95,1,96,1,96,3,96,1358,8,96,1,97,1,97,3,97,1362,8,97,
        1,98,1,98,3,98,1366,8,98,1,99,1,99,3,99,1370,8,99,1,100,1,100,3,
        100,1374,8,100,1,101,1,101,3,101,1378,8,101,1,102,1,102,3,102,1382,
        8,102,1,103,1,103,3,103,1386,8,103,1,104,1,104,3,104,1390,8,104,
        1,105,1,105,3,105,1394,8,105,1,106,1,106,3,106,1398,8,106,1,107,
        1,107,3,107,1402,8,107,1,108,1,108,3,108,1406,8,108,1,109,1,109,
        3,109,1410,8,109,1,110,1,110,3,110,1414,8,110,1,111,1,111,3,111,
        1418,8,111,1,112,1,112,3,112,1422,8,112,1,113,1,113,3,113,1426,8,
        113,1,114,1,114,3,114,1430,8,114,1,115,1,115,3,115,1434,8,115,1,
        116,1,116,3,116,1438,8,116,1,117,1,117,3,117,1442,8,117,1,118,1,
        118,3,118,1446,8,118,1,119,1,119,3,119,1450,8,119,1,120,1,120,3,
        120,1454,8,120,1,121,1,121,3,121,1458,8,121,1,122,1,122,3,122,1462,
        8,122,1,123,1,123,1,124,1,124,1,124,1,125,5,125,1470,8,125,10,125,
        12,125,1473,9,125,1,126,1,126,1,126,1,126,1,126,1,126,1,127,1,127,
        1,128,1,128,1,128,1,129,5,129,1487,8,129,10,129,12,129,1490,9,129,
        1,130,1,130,1,130,1,130,1,130,1,130,5,130,1498,8,130,10,130,12,130,
        1501,9,130,1,130,1,130,1,131,1,131,1,131,1,131,1,132,1,132,1,133,
        1,133,1,134,1,134,3,134,1515,8,134,1,135,1,135,1,135,0,0,136,0,2,
        4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,
        50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,
        94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,
        128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,
        160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,
        192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,
        224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,
        256,258,260,262,264,266,268,270,0,2,1,0,126,127,1,0,129,137,1740,
        0,272,1,0,0,0,2,281,1,0,0,0,4,286,1,0,0,0,6,288,1,0,0,0,8,641,1,
        0,0,0,10,991,1,0,0,0,12,995,1,0,0,0,14,999,1,0,0,0,16,1003,1,0,0,
        0,18,1007,1,0,0,0,20,1011,1,0,0,0,22,1015,1,0,0,0,24,1019,1,0,0,
        0,26,1023,1,0,0,0,28,1027,1,0,0,0,30,1031,1,0,0,0,32,1035,1,0,0,
        0,34,1039,1,0,0,0,36,1043,1,0,0,0,38,1047,1,0,0,0,40,1051,1,0,0,
        0,42,1055,1,0,0,0,44,1059,1,0,0,0,46,1063,1,0,0,0,48,1067,1,0,0,
        0,50,1071,1,0,0,0,52,1075,1,0,0,0,54,1079,1,0,0,0,56,1083,1,0,0,
        0,58,1087,1,0,0,0,60,1091,1,0,0,0,62,1095,1,0,0,0,64,1099,1,0,0,
        0,66,1103,1,0,0,0,68,1107,1,0,0,0,70,1111,1,0,0,0,72,1115,1,0,0,
        0,74,1119,1,0,0,0,76,1123,1,0,0,0,78,1127,1,0,0,0,80,1131,1,0,0,
        0,82,1135,1,0,0,0,84,1139,1,0,0,0,86,1143,1,0,0,0,88,1147,1,0,0,
        0,90,1151,1,0,0,0,92,1155,1,0,0,0,94,1159,1,0,0,0,96,1163,1,0,0,
        0,98,1167,1,0,0,0,100,1171,1,0,0,0,102,1175,1,0,0,0,104,1179,1,0,
        0,0,106,1183,1,0,0,0,108,1187,1,0,0,0,110,1191,1,0,0,0,112,1195,
        1,0,0,0,114,1199,1,0,0,0,116,1203,1,0,0,0,118,1207,1,0,0,0,120,1211,
        1,0,0,0,122,1215,1,0,0,0,124,1219,1,0,0,0,126,1223,1,0,0,0,128,1227,
        1,0,0,0,130,1231,1,0,0,0,132,1235,1,0,0,0,134,1239,1,0,0,0,136,1243,
        1,0,0,0,138,1247,1,0,0,0,140,1251,1,0,0,0,142,1255,1,0,0,0,144,1259,
        1,0,0,0,146,1263,1,0,0,0,148,1267,1,0,0,0,150,1271,1,0,0,0,152,1275,
        1,0,0,0,154,1279,1,0,0,0,156,1283,1,0,0,0,158,1287,1,0,0,0,160,1291,
        1,0,0,0,162,1295,1,0,0,0,164,1299,1,0,0,0,166,1303,1,0,0,0,168,1307,
        1,0,0,0,170,1311,1,0,0,0,172,1315,1,0,0,0,174,1319,1,0,0,0,176,1323,
        1,0,0,0,178,1327,1,0,0,0,180,1331,1,0,0,0,182,1335,1,0,0,0,184,1339,
        1,0,0,0,186,1343,1,0,0,0,188,1347,1,0,0,0,190,1351,1,0,0,0,192,1355,
        1,0,0,0,194,1359,1,0,0,0,196,1363,1,0,0,0,198,1367,1,0,0,0,200,1371,
        1,0,0,0,202,1375,1,0,0,0,204,1379,1,0,0,0,206,1383,1,0,0,0,208,1387,
        1,0,0,0,210,1391,1,0,0,0,212,1395,1,0,0,0,214,1399,1,0,0,0,216,1403,
        1,0,0,0,218,1407,1,0,0,0,220,1411,1,0,0,0,222,1415,1,0,0,0,224,1419,
        1,0,0,0,226,1423,1,0,0,0,228,1427,1,0,0,0,230,1431,1,0,0,0,232,1435,
        1,0,0,0,234,1439,1,0,0,0,236,1443,1,0,0,0,238,1447,1,0,0,0,240,1451,
        1,0,0,0,242,1455,1,0,0,0,244,1459,1,0,0,0,246,1463,1,0,0,0,248,1465,
        1,0,0,0,250,1471,1,0,0,0,252,1474,1,0,0,0,254,1480,1,0,0,0,256,1482,
        1,0,0,0,258,1488,1,0,0,0,260,1491,1,0,0,0,262,1504,1,0,0,0,264,1508,
        1,0,0,0,266,1510,1,0,0,0,268,1514,1,0,0,0,270,1516,1,0,0,0,272,273,
        3,4,2,0,273,274,5,1,0,0,274,277,3,250,125,0,275,276,5,1,0,0,276,
        278,3,258,129,0,277,275,1,0,0,0,277,278,1,0,0,0,278,279,1,0,0,0,
        279,280,5,0,0,1,280,1,1,0,0,0,281,282,3,4,2,0,282,283,5,0,0,1,283,
        3,1,0,0,0,284,287,3,6,3,0,285,287,3,8,4,0,286,284,1,0,0,0,286,285,
        1,0,0,0,287,5,1,0,0,0,288,290,3,20,10,0,289,291,3,10,5,0,290,289,
        1,0,0,0,290,291,1,0,0,0,291,293,1,0,0,0,292,294,3,186,93,0,293,292,
        1,0,0,0,293,294,1,0,0,0,294,296,1,0,0,0,295,297,3,102,51,0,296,295,
        1,0,0,0,296,297,1,0,0,0,297,299,1,0,0,0,298,300,3,34,17,0,299,298,
        1,0,0,0,299,300,1,0,0,0,300,302,1,0,0,0,301,303,3,198,99,0,302,301,
        1,0,0,0,302,303,1,0,0,0,303,305,1,0,0,0,304,306,3,44,22,0,305,304,
        1,0,0,0,305,306,1,0,0,0,306,308,1,0,0,0,307,309,3,74,37,0,308,307,
        1,0,0,0,308,309,1,0,0,0,309,311,1,0,0,0,310,312,3,178,89,0,311,310,
        1,0,0,0,311,312,1,0,0,0,312,314,1,0,0,0,313,315,3,166,83,0,314,313,
        1,0,0,0,314,315,1,0,0,0,315,317,1,0,0,0,316,318,3,18,9,0,317,316,
        1,0,0,0,317,318,1,0,0,0,318,320,1,0,0,0,319,321,3,120,60,0,320,319,
        1,0,0,0,320,321,1,0,0,0,321,323,1,0,0,0,322,324,3,16,8,0,323,322,
        1,0,0,0,323,324,1,0,0,0,324,326,1,0,0,0,325,327,3,222,111,0,326,
        325,1,0,0,0,326,327,1,0,0,0,327,329,1,0,0,0,328,330,3,174,87,0,329,
        328,1,0,0,0,329,330,1,0,0,0,330,332,1,0,0,0,331,333,3,202,101,0,
        332,331,1,0,0,0,332,333,1,0,0,0,333,335,1,0,0,0,334,336,3,78,39,
        0,335,334,1,0,0,0,335,336,1,0,0,0,336,338,1,0,0,0,337,339,3,48,24,
        0,338,337,1,0,0,0,338,339,1,0,0,0,339,341,1,0,0,0,340,342,3,104,
        52,0,341,340,1,0,0,0,341,342,1,0,0,0,342,344,1,0,0,0,343,345,3,124,
        62,0,344,343,1,0,0,0,344,345,1,0,0,0,345,347,1,0,0,0,346,348,3,204,
        102,0,347,346,1,0,0,0,347,348,1,0,0,0,348,350,1,0,0,0,349,351,3,
        42,21,0,350,349,1,0,0,0,350,351,1,0,0,0,351,353,1,0,0,0,352,354,
        3,200,100,0,353,352,1,0,0,0,353,354,1,0,0,0,354,356,1,0,0,0,355,
        357,3,232,116,0,356,355,1,0,0,0,356,357,1,0,0,0,357,359,1,0,0,0,
        358,360,3,62,31,0,359,358,1,0,0,0,359,360,1,0,0,0,360,362,1,0,0,
        0,361,363,3,56,28,0,362,361,1,0,0,0,362,363,1,0,0,0,363,365,1,0,
        0,0,364,366,3,118,59,0,365,364,1,0,0,0,365,366,1,0,0,0,366,368,1,
        0,0,0,367,369,3,66,33,0,368,367,1,0,0,0,368,369,1,0,0,0,369,371,
        1,0,0,0,370,372,3,218,109,0,371,370,1,0,0,0,371,372,1,0,0,0,372,
        374,1,0,0,0,373,375,3,228,114,0,374,373,1,0,0,0,374,375,1,0,0,0,
        375,377,1,0,0,0,376,378,3,140,70,0,377,376,1,0,0,0,377,378,1,0,0,
        0,378,380,1,0,0,0,379,381,3,144,72,0,380,379,1,0,0,0,380,381,1,0,
        0,0,381,383,1,0,0,0,382,384,3,206,103,0,383,382,1,0,0,0,383,384,
        1,0,0,0,384,386,1,0,0,0,385,387,3,134,67,0,386,385,1,0,0,0,386,387,
        1,0,0,0,387,389,1,0,0,0,388,390,3,26,13,0,389,388,1,0,0,0,389,390,
        1,0,0,0,390,392,1,0,0,0,391,393,3,60,30,0,392,391,1,0,0,0,392,393,
        1,0,0,0,393,395,1,0,0,0,394,396,3,236,118,0,395,394,1,0,0,0,395,
        396,1,0,0,0,396,398,1,0,0,0,397,399,3,208,104,0,398,397,1,0,0,0,
        398,399,1,0,0,0,399,401,1,0,0,0,400,402,3,182,91,0,401,400,1,0,0,
        0,401,402,1,0,0,0,402,404,1,0,0,0,403,405,3,70,35,0,404,403,1,0,
        0,0,404,405,1,0,0,0,405,407,1,0,0,0,406,408,3,136,68,0,407,406,1,
        0,0,0,407,408,1,0,0,0,408,410,1,0,0,0,409,411,3,72,36,0,410,409,
        1,0,0,0,410,411,1,0,0,0,411,413,1,0,0,0,412,414,3,12,6,0,413,412,
        1,0,0,0,413,414,1,0,0,0,414,416,1,0,0,0,415,417,3,152,76,0,416,415,
        1,0,0,0,416,417,1,0,0,0,417,419,1,0,0,0,418,420,3,168,84,0,419,418,
        1,0,0,0,419,420,1,0,0,0,420,422,1,0,0,0,421,423,3,142,71,0,422,421,
        1,0,0,0,422,423,1,0,0,0,423,425,1,0,0,0,424,426,3,224,112,0,425,
        424,1,0,0,0,425,426,1,0,0,0,426,428,1,0,0,0,427,429,3,114,57,0,428,
        427,1,0,0,0,428,429,1,0,0,0,429,431,1,0,0,0,430,432,3,106,53,0,431,
        430,1,0,0,0,431,432,1,0,0,0,432,434,1,0,0,0,433,435,3,162,81,0,434,
        433,1,0,0,0,434,435,1,0,0,0,435,437,1,0,0,0,436,438,3,46,23,0,437,
        436,1,0,0,0,437,438,1,0,0,0,438,440,1,0,0,0,439,441,3,80,40,0,440,
        439,1,0,0,0,440,441,1,0,0,0,441,443,1,0,0,0,442,444,3,122,61,0,443,
        442,1,0,0,0,443,444,1,0,0,0,444,446,1,0,0,0,445,447,3,14,7,0,446,
        445,1,0,0,0,446,447,1,0,0,0,447,449,1,0,0,0,448,450,3,214,107,0,
        449,448,1,0,0,0,449,450,1,0,0,0,450,452,1,0,0,0,451,453,3,150,75,
        0,452,451,1,0,0,0,452,453,1,0,0,0,453,455,1,0,0,0,454,456,3,240,
        120,0,455,454,1,0,0,0,455,456,1,0,0,0,456,458,1,0,0,0,457,459,3,
        238,119,0,458,457,1,0,0,0,458,459,1,0,0,0,459,461,1,0,0,0,460,462,
        3,210,105,0,461,460,1,0,0,0,461,462,1,0,0,0,462,464,1,0,0,0,463,
        465,3,32,16,0,464,463,1,0,0,0,464,465,1,0,0,0,465,467,1,0,0,0,466,
        468,3,58,29,0,467,466,1,0,0,0,467,468,1,0,0,0,468,470,1,0,0,0,469,
        471,3,92,46,0,470,469,1,0,0,0,470,471,1,0,0,0,471,473,1,0,0,0,472,
        474,3,226,113,0,473,472,1,0,0,0,473,474,1,0,0,0,474,476,1,0,0,0,
        475,477,3,22,11,0,476,475,1,0,0,0,476,477,1,0,0,0,477,479,1,0,0,
        0,478,480,3,30,15,0,479,478,1,0,0,0,479,480,1,0,0,0,480,482,1,0,
        0,0,481,483,3,90,45,0,482,481,1,0,0,0,482,483,1,0,0,0,483,485,1,
        0,0,0,484,486,3,128,64,0,485,484,1,0,0,0,485,486,1,0,0,0,486,488,
        1,0,0,0,487,489,3,28,14,0,488,487,1,0,0,0,488,489,1,0,0,0,489,491,
        1,0,0,0,490,492,3,234,117,0,491,490,1,0,0,0,491,492,1,0,0,0,492,
        494,1,0,0,0,493,495,3,64,32,0,494,493,1,0,0,0,494,495,1,0,0,0,495,
        497,1,0,0,0,496,498,3,212,106,0,497,496,1,0,0,0,497,498,1,0,0,0,
        498,500,1,0,0,0,499,501,3,194,97,0,500,499,1,0,0,0,500,501,1,0,0,
        0,501,503,1,0,0,0,502,504,3,24,12,0,503,502,1,0,0,0,503,504,1,0,
        0,0,504,506,1,0,0,0,505,507,3,244,122,0,506,505,1,0,0,0,506,507,
        1,0,0,0,507,509,1,0,0,0,508,510,3,160,80,0,509,508,1,0,0,0,509,510,
        1,0,0,0,510,512,1,0,0,0,511,513,3,38,19,0,512,511,1,0,0,0,512,513,
        1,0,0,0,513,515,1,0,0,0,514,516,3,190,95,0,515,514,1,0,0,0,515,516,
        1,0,0,0,516,518,1,0,0,0,517,519,3,172,86,0,518,517,1,0,0,0,518,519,
        1,0,0,0,519,521,1,0,0,0,520,522,3,100,50,0,521,520,1,0,0,0,521,522,
        1,0,0,0,522,524,1,0,0,0,523,525,3,130,65,0,524,523,1,0,0,0,524,525,
        1,0,0,0,525,527,1,0,0,0,526,528,3,176,88,0,527,526,1,0,0,0,527,528,
        1,0,0,0,528,530,1,0,0,0,529,531,3,126,63,0,530,529,1,0,0,0,530,531,
        1,0,0,0,531,533,1,0,0,0,532,534,3,164,82,0,533,532,1,0,0,0,533,534,
        1,0,0,0,534,536,1,0,0,0,535,537,3,196,98,0,536,535,1,0,0,0,536,537,
        1,0,0,0,537,539,1,0,0,0,538,540,3,184,92,0,539,538,1,0,0,0,539,540,
        1,0,0,0,540,542,1,0,0,0,541,543,3,82,41,0,542,541,1,0,0,0,542,543,
        1,0,0,0,543,545,1,0,0,0,544,546,3,158,79,0,545,544,1,0,0,0,545,546,
        1,0,0,0,546,548,1,0,0,0,547,549,3,216,108,0,548,547,1,0,0,0,548,
        549,1,0,0,0,549,551,1,0,0,0,550,552,3,230,115,0,551,550,1,0,0,0,
        551,552,1,0,0,0,552,554,1,0,0,0,553,555,3,98,49,0,554,553,1,0,0,
        0,554,555,1,0,0,0,555,557,1,0,0,0,556,558,3,180,90,0,557,556,1,0,
        0,0,557,558,1,0,0,0,558,560,1,0,0,0,559,561,3,96,48,0,560,559,1,
        0,0,0,560,561,1,0,0,0,561,563,1,0,0,0,562,564,3,40,20,0,563,562,
        1,0,0,0,563,564,1,0,0,0,564,566,1,0,0,0,565,567,3,110,55,0,566,565,
        1,0,0,0,566,567,1,0,0,0,567,569,1,0,0,0,568,570,3,50,25,0,569,568,
        1,0,0,0,569,570,1,0,0,0,570,572,1,0,0,0,571,573,3,76,38,0,572,571,
        1,0,0,0,572,573,1,0,0,0,573,575,1,0,0,0,574,576,3,220,110,0,575,
        574,1,0,0,0,575,576,1,0,0,0,576,578,1,0,0,0,577,579,3,36,18,0,578,
        577,1,0,0,0,578,579,1,0,0,0,579,581,1,0,0,0,580,582,3,132,66,0,581,
        580,1,0,0,0,581,582,1,0,0,0,582,584,1,0,0,0,583,585,3,108,54,0,584,
        583,1,0,0,0,584,585,1,0,0,0,585,587,1,0,0,0,586,588,3,84,42,0,587,
        586,1,0,0,0,587,588,1,0,0,0,588,590,1,0,0,0,589,591,3,154,77,0,590,
        589,1,0,0,0,590,591,1,0,0,0,591,593,1,0,0,0,592,594,3,138,69,0,593,
        592,1,0,0,0,593,594,1,0,0,0,594,596,1,0,0,0,595,597,3,94,47,0,596,
        595,1,0,0,0,596,597,1,0,0,0,597,599,1,0,0,0,598,600,3,112,56,0,599,
        598,1,0,0,0,599,600,1,0,0,0,600,602,1,0,0,0,601,603,3,188,94,0,602,
        601,1,0,0,0,602,603,1,0,0,0,603,605,1,0,0,0,604,606,3,52,26,0,605,
        604,1,0,0,0,605,606,1,0,0,0,606,608,1,0,0,0,607,609,3,170,85,0,608,
        607,1,0,0,0,608,609,1,0,0,0,609,611,1,0,0,0,610,612,3,146,73,0,611,
        610,1,0,0,0,611,612,1,0,0,0,612,614,1,0,0,0,613,615,3,242,121,0,
        614,613,1,0,0,0,614,615,1,0,0,0,615,617,1,0,0,0,616,618,3,192,96,
        0,617,616,1,0,0,0,617,618,1,0,0,0,618,620,1,0,0,0,619,621,3,54,27,
        0,620,619,1,0,0,0,620,621,1,0,0,0,621,623,1,0,0,0,622,624,3,156,
        78,0,623,622,1,0,0,0,623,624,1,0,0,0,624,626,1,0,0,0,625,627,3,116,
        58,0,626,625,1,0,0,0,626,627,1,0,0,0,627,629,1,0,0,0,628,630,3,86,
        43,0,629,628,1,0,0,0,629,630,1,0,0,0,630,632,1,0,0,0,631,633,3,148,
        74,0,632,631,1,0,0,0,632,633,1,0,0,0,633,635,1,0,0,0,634,636,3,68,
        34,0,635,634,1,0,0,0,635,636,1,0,0,0,636,638,1,0,0,0,637,639,3,88,
        44,0,638,637,1,0,0,0,638,639,1,0,0,0,639,7,1,0,0,0,640,642,3,186,
        93,0,641,640,1,0,0,0,641,642,1,0,0,0,642,644,1,0,0,0,643,645,3,102,
        51,0,644,643,1,0,0,0,644,645,1,0,0,0,645,647,1,0,0,0,646,648,3,34,
        17,0,647,646,1,0,0,0,647,648,1,0,0,0,648,650,1,0,0,0,649,651,3,198,
        99,0,650,649,1,0,0,0,650,651,1,0,0,0,651,653,1,0,0,0,652,654,3,44,
        22,0,653,652,1,0,0,0,653,654,1,0,0,0,654,656,1,0,0,0,655,657,3,74,
        37,0,656,655,1,0,0,0,656,657,1,0,0,0,657,659,1,0,0,0,658,660,3,178,
        89,0,659,658,1,0,0,0,659,660,1,0,0,0,660,662,1,0,0,0,661,663,3,166,
        83,0,662,661,1,0,0,0,662,663,1,0,0,0,663,665,1,0,0,0,664,666,3,18,
        9,0,665,664,1,0,0,0,665,666,1,0,0,0,666,668,1,0,0,0,667,669,3,120,
        60,0,668,667,1,0,0,0,668,669,1,0,0,0,669,671,1,0,0,0,670,672,3,16,
        8,0,671,670,1,0,0,0,671,672,1,0,0,0,672,674,1,0,0,0,673,675,3,222,
        111,0,674,673,1,0,0,0,674,675,1,0,0,0,675,677,1,0,0,0,676,678,3,
        174,87,0,677,676,1,0,0,0,677,678,1,0,0,0,678,680,1,0,0,0,679,681,
        3,202,101,0,680,679,1,0,0,0,680,681,1,0,0,0,681,683,1,0,0,0,682,
        684,3,78,39,0,683,682,1,0,0,0,683,684,1,0,0,0,684,686,1,0,0,0,685,
        687,3,48,24,0,686,685,1,0,0,0,686,687,1,0,0,0,687,689,1,0,0,0,688,
        690,3,104,52,0,689,688,1,0,0,0,689,690,1,0,0,0,690,692,1,0,0,0,691,
        693,3,124,62,0,692,691,1,0,0,0,692,693,1,0,0,0,693,695,1,0,0,0,694,
        696,3,204,102,0,695,694,1,0,0,0,695,696,1,0,0,0,696,698,1,0,0,0,
        697,699,3,42,21,0,698,697,1,0,0,0,698,699,1,0,0,0,699,701,1,0,0,
        0,700,702,3,200,100,0,701,700,1,0,0,0,701,702,1,0,0,0,702,704,1,
        0,0,0,703,705,3,232,116,0,704,703,1,0,0,0,704,705,1,0,0,0,705,707,
        1,0,0,0,706,708,3,62,31,0,707,706,1,0,0,0,707,708,1,0,0,0,708,710,
        1,0,0,0,709,711,3,56,28,0,710,709,1,0,0,0,710,711,1,0,0,0,711,713,
        1,0,0,0,712,714,3,118,59,0,713,712,1,0,0,0,713,714,1,0,0,0,714,716,
        1,0,0,0,715,717,3,66,33,0,716,715,1,0,0,0,716,717,1,0,0,0,717,719,
        1,0,0,0,718,720,3,218,109,0,719,718,1,0,0,0,719,720,1,0,0,0,720,
        722,1,0,0,0,721,723,3,228,114,0,722,721,1,0,0,0,722,723,1,0,0,0,
        723,725,1,0,0,0,724,726,3,140,70,0,725,724,1,0,0,0,725,726,1,0,0,
        0,726,728,1,0,0,0,727,729,3,144,72,0,728,727,1,0,0,0,728,729,1,0,
        0,0,729,731,1,0,0,0,730,732,3,206,103,0,731,730,1,0,0,0,731,732,
        1,0,0,0,732,734,1,0,0,0,733,735,3,134,67,0,734,733,1,0,0,0,734,735,
        1,0,0,0,735,737,1,0,0,0,736,738,3,26,13,0,737,736,1,0,0,0,737,738,
        1,0,0,0,738,740,1,0,0,0,739,741,3,60,30,0,740,739,1,0,0,0,740,741,
        1,0,0,0,741,743,1,0,0,0,742,744,3,236,118,0,743,742,1,0,0,0,743,
        744,1,0,0,0,744,746,1,0,0,0,745,747,3,208,104,0,746,745,1,0,0,0,
        746,747,1,0,0,0,747,749,1,0,0,0,748,750,3,182,91,0,749,748,1,0,0,
        0,749,750,1,0,0,0,750,752,1,0,0,0,751,753,3,70,35,0,752,751,1,0,
        0,0,752,753,1,0,0,0,753,755,1,0,0,0,754,756,3,136,68,0,755,754,1,
        0,0,0,755,756,1,0,0,0,756,758,1,0,0,0,757,759,3,72,36,0,758,757,
        1,0,0,0,758,759,1,0,0,0,759,761,1,0,0,0,760,762,3,10,5,0,761,760,
        1,0,0,0,761,762,1,0,0,0,762,764,1,0,0,0,763,765,3,12,6,0,764,763,
        1,0,0,0,764,765,1,0,0,0,765,767,1,0,0,0,766,768,3,152,76,0,767,766,
        1,0,0,0,767,768,1,0,0,0,768,770,1,0,0,0,769,771,3,168,84,0,770,769,
        1,0,0,0,770,771,1,0,0,0,771,773,1,0,0,0,772,774,3,142,71,0,773,772,
        1,0,0,0,773,774,1,0,0,0,774,776,1,0,0,0,775,777,3,224,112,0,776,
        775,1,0,0,0,776,777,1,0,0,0,777,779,1,0,0,0,778,780,3,114,57,0,779,
        778,1,0,0,0,779,780,1,0,0,0,780,782,1,0,0,0,781,783,3,106,53,0,782,
        781,1,0,0,0,782,783,1,0,0,0,783,785,1,0,0,0,784,786,3,162,81,0,785,
        784,1,0,0,0,785,786,1,0,0,0,786,788,1,0,0,0,787,789,3,46,23,0,788,
        787,1,0,0,0,788,789,1,0,0,0,789,791,1,0,0,0,790,792,3,80,40,0,791,
        790,1,0,0,0,791,792,1,0,0,0,792,794,1,0,0,0,793,795,3,122,61,0,794,
        793,1,0,0,0,794,795,1,0,0,0,795,797,1,0,0,0,796,798,3,14,7,0,797,
        796,1,0,0,0,797,798,1,0,0,0,798,800,1,0,0,0,799,801,3,214,107,0,
        800,799,1,0,0,0,800,801,1,0,0,0,801,803,1,0,0,0,802,804,3,150,75,
        0,803,802,1,0,0,0,803,804,1,0,0,0,804,806,1,0,0,0,805,807,3,240,
        120,0,806,805,1,0,0,0,806,807,1,0,0,0,807,809,1,0,0,0,808,810,3,
        238,119,0,809,808,1,0,0,0,809,810,1,0,0,0,810,812,1,0,0,0,811,813,
        3,210,105,0,812,811,1,0,0,0,812,813,1,0,0,0,813,815,1,0,0,0,814,
        816,3,32,16,0,815,814,1,0,0,0,815,816,1,0,0,0,816,818,1,0,0,0,817,
        819,3,58,29,0,818,817,1,0,0,0,818,819,1,0,0,0,819,821,1,0,0,0,820,
        822,3,92,46,0,821,820,1,0,0,0,821,822,1,0,0,0,822,824,1,0,0,0,823,
        825,3,226,113,0,824,823,1,0,0,0,824,825,1,0,0,0,825,827,1,0,0,0,
        826,828,3,22,11,0,827,826,1,0,0,0,827,828,1,0,0,0,828,830,1,0,0,
        0,829,831,3,30,15,0,830,829,1,0,0,0,830,831,1,0,0,0,831,833,1,0,
        0,0,832,834,3,90,45,0,833,832,1,0,0,0,833,834,1,0,0,0,834,836,1,
        0,0,0,835,837,3,128,64,0,836,835,1,0,0,0,836,837,1,0,0,0,837,839,
        1,0,0,0,838,840,3,28,14,0,839,838,1,0,0,0,839,840,1,0,0,0,840,842,
        1,0,0,0,841,843,3,234,117,0,842,841,1,0,0,0,842,843,1,0,0,0,843,
        845,1,0,0,0,844,846,3,64,32,0,845,844,1,0,0,0,845,846,1,0,0,0,846,
        848,1,0,0,0,847,849,3,212,106,0,848,847,1,0,0,0,848,849,1,0,0,0,
        849,851,1,0,0,0,850,852,3,194,97,0,851,850,1,0,0,0,851,852,1,0,0,
        0,852,854,1,0,0,0,853,855,3,24,12,0,854,853,1,0,0,0,854,855,1,0,
        0,0,855,857,1,0,0,0,856,858,3,244,122,0,857,856,1,0,0,0,857,858,
        1,0,0,0,858,860,1,0,0,0,859,861,3,160,80,0,860,859,1,0,0,0,860,861,
        1,0,0,0,861,863,1,0,0,0,862,864,3,38,19,0,863,862,1,0,0,0,863,864,
        1,0,0,0,864,866,1,0,0,0,865,867,3,190,95,0,866,865,1,0,0,0,866,867,
        1,0,0,0,867,869,1,0,0,0,868,870,3,172,86,0,869,868,1,0,0,0,869,870,
        1,0,0,0,870,872,1,0,0,0,871,873,3,100,50,0,872,871,1,0,0,0,872,873,
        1,0,0,0,873,875,1,0,0,0,874,876,3,130,65,0,875,874,1,0,0,0,875,876,
        1,0,0,0,876,878,1,0,0,0,877,879,3,176,88,0,878,877,1,0,0,0,878,879,
        1,0,0,0,879,881,1,0,0,0,880,882,3,126,63,0,881,880,1,0,0,0,881,882,
        1,0,0,0,882,884,1,0,0,0,883,885,3,164,82,0,884,883,1,0,0,0,884,885,
        1,0,0,0,885,887,1,0,0,0,886,888,3,196,98,0,887,886,1,0,0,0,887,888,
        1,0,0,0,888,890,1,0,0,0,889,891,3,184,92,0,890,889,1,0,0,0,890,891,
        1,0,0,0,891,893,1,0,0,0,892,894,3,82,41,0,893,892,1,0,0,0,893,894,
        1,0,0,0,894,896,1,0,0,0,895,897,3,158,79,0,896,895,1,0,0,0,896,897,
        1,0,0,0,897,899,1,0,0,0,898,900,3,216,108,0,899,898,1,0,0,0,899,
        900,1,0,0,0,900,902,1,0,0,0,901,903,3,230,115,0,902,901,1,0,0,0,
        902,903,1,0,0,0,903,905,1,0,0,0,904,906,3,98,49,0,905,904,1,0,0,
        0,905,906,1,0,0,0,906,908,1,0,0,0,907,909,3,180,90,0,908,907,1,0,
        0,0,908,909,1,0,0,0,909,911,1,0,0,0,910,912,3,96,48,0,911,910,1,
        0,0,0,911,912,1,0,0,0,912,914,1,0,0,0,913,915,3,40,20,0,914,913,
        1,0,0,0,914,915,1,0,0,0,915,917,1,0,0,0,916,918,3,110,55,0,917,916,
        1,0,0,0,917,918,1,0,0,0,918,920,1,0,0,0,919,921,3,50,25,0,920,919,
        1,0,0,0,920,921,1,0,0,0,921,923,1,0,0,0,922,924,3,76,38,0,923,922,
        1,0,0,0,923,924,1,0,0,0,924,926,1,0,0,0,925,927,3,220,110,0,926,
        925,1,0,0,0,926,927,1,0,0,0,927,929,1,0,0,0,928,930,3,36,18,0,929,
        928,1,0,0,0,929,930,1,0,0,0,930,932,1,0,0,0,931,933,3,132,66,0,932,
        931,1,0,0,0,932,933,1,0,0,0,933,935,1,0,0,0,934,936,3,108,54,0,935,
        934,1,0,0,0,935,936,1,0,0,0,936,938,1,0,0,0,937,939,3,84,42,0,938,
        937,1,0,0,0,938,939,1,0,0,0,939,941,1,0,0,0,940,942,3,154,77,0,941,
        940,1,0,0,0,941,942,1,0,0,0,942,944,1,0,0,0,943,945,3,138,69,0,944,
        943,1,0,0,0,944,945,1,0,0,0,945,947,1,0,0,0,946,948,3,94,47,0,947,
        946,1,0,0,0,947,948,1,0,0,0,948,950,1,0,0,0,949,951,3,112,56,0,950,
        949,1,0,0,0,950,951,1,0,0,0,951,953,1,0,0,0,952,954,3,188,94,0,953,
        952,1,0,0,0,953,954,1,0,0,0,954,956,1,0,0,0,955,957,3,52,26,0,956,
        955,1,0,0,0,956,957,1,0,0,0,957,959,1,0,0,0,958,960,3,170,85,0,959,
        958,1,0,0,0,959,960,1,0,0,0,960,962,1,0,0,0,961,963,3,146,73,0,962,
        961,1,0,0,0,962,963,1,0,0,0,963,965,1,0,0,0,964,966,3,242,121,0,
        965,964,1,0,0,0,965,966,1,0,0,0,966,968,1,0,0,0,967,969,3,192,96,
        0,968,967,1,0,0,0,968,969,1,0,0,0,969,971,1,0,0,0,970,972,3,54,27,
        0,971,970,1,0,0,0,971,972,1,0,0,0,972,974,1,0,0,0,973,975,3,156,
        78,0,974,973,1,0,0,0,974,975,1,0,0,0,975,977,1,0,0,0,976,978,3,116,
        58,0,977,976,1,0,0,0,977,978,1,0,0,0,978,980,1,0,0,0,979,981,3,86,
        43,0,980,979,1,0,0,0,980,981,1,0,0,0,981,983,1,0,0,0,982,984,3,148,
        74,0,983,982,1,0,0,0,983,984,1,0,0,0,984,986,1,0,0,0,985,987,3,68,
        34,0,986,985,1,0,0,0,986,987,1,0,0,0,987,989,1,0,0,0,988,990,3,88,
        44,0,989,988,1,0,0,0,989,990,1,0,0,0,990,9,1,0,0,0,991,993,5,2,0,
        0,992,994,3,246,123,0,993,992,1,0,0,0,993,994,1,0,0,0,994,11,1,0,
        0,0,995,997,5,3,0,0,996,998,3,246,123,0,997,996,1,0,0,0,997,998,
        1,0,0,0,998,13,1,0,0,0,999,1001,5,4,0,0,1000,1002,3,246,123,0,1001,
        1000,1,0,0,0,1001,1002,1,0,0,0,1002,15,1,0,0,0,1003,1005,5,5,0,0,
        1004,1006,3,246,123,0,1005,1004,1,0,0,0,1005,1006,1,0,0,0,1006,17,
        1,0,0,0,1007,1009,5,6,0,0,1008,1010,3,246,123,0,1009,1008,1,0,0,
        0,1009,1010,1,0,0,0,1010,19,1,0,0,0,1011,1013,5,7,0,0,1012,1014,
        3,246,123,0,1013,1012,1,0,0,0,1013,1014,1,0,0,0,1014,21,1,0,0,0,
        1015,1017,5,8,0,0,1016,1018,3,246,123,0,1017,1016,1,0,0,0,1017,1018,
        1,0,0,0,1018,23,1,0,0,0,1019,1021,5,9,0,0,1020,1022,3,246,123,0,
        1021,1020,1,0,0,0,1021,1022,1,0,0,0,1022,25,1,0,0,0,1023,1025,5,
        10,0,0,1024,1026,3,246,123,0,1025,1024,1,0,0,0,1025,1026,1,0,0,0,
        1026,27,1,0,0,0,1027,1029,5,11,0,0,1028,1030,3,246,123,0,1029,1028,
        1,0,0,0,1029,1030,1,0,0,0,1030,29,1,0,0,0,1031,1033,5,12,0,0,1032,
        1034,3,246,123,0,1033,1032,1,0,0,0,1033,1034,1,0,0,0,1034,31,1,0,
        0,0,1035,1037,5,13,0,0,1036,1038,3,246,123,0,1037,1036,1,0,0,0,1037,
        1038,1,0,0,0,1038,33,1,0,0,0,1039,1041,5,14,0,0,1040,1042,3,246,
        123,0,1041,1040,1,0,0,0,1041,1042,1,0,0,0,1042,35,1,0,0,0,1043,1045,
        5,15,0,0,1044,1046,3,246,123,0,1045,1044,1,0,0,0,1045,1046,1,0,0,
        0,1046,37,1,0,0,0,1047,1049,5,16,0,0,1048,1050,3,246,123,0,1049,
        1048,1,0,0,0,1049,1050,1,0,0,0,1050,39,1,0,0,0,1051,1053,5,17,0,
        0,1052,1054,3,246,123,0,1053,1052,1,0,0,0,1053,1054,1,0,0,0,1054,
        41,1,0,0,0,1055,1057,5,18,0,0,1056,1058,3,246,123,0,1057,1056,1,
        0,0,0,1057,1058,1,0,0,0,1058,43,1,0,0,0,1059,1061,5,19,0,0,1060,
        1062,3,246,123,0,1061,1060,1,0,0,0,1061,1062,1,0,0,0,1062,45,1,0,
        0,0,1063,1065,5,20,0,0,1064,1066,3,246,123,0,1065,1064,1,0,0,0,1065,
        1066,1,0,0,0,1066,47,1,0,0,0,1067,1069,5,21,0,0,1068,1070,3,246,
        123,0,1069,1068,1,0,0,0,1069,1070,1,0,0,0,1070,49,1,0,0,0,1071,1073,
        5,22,0,0,1072,1074,3,246,123,0,1073,1072,1,0,0,0,1073,1074,1,0,0,
        0,1074,51,1,0,0,0,1075,1077,5,23,0,0,1076,1078,3,246,123,0,1077,
        1076,1,0,0,0,1077,1078,1,0,0,0,1078,53,1,0,0,0,1079,1081,5,24,0,
        0,1080,1082,3,246,123,0,1081,1080,1,0,0,0,1081,1082,1,0,0,0,1082,
        55,1,0,0,0,1083,1085,5,25,0,0,1084,1086,3,246,123,0,1085,1084,1,
        0,0,0,1085,1086,1,0,0,0,1086,57,1,0,0,0,1087,1089,5,26,0,0,1088,
        1090,3,246,123,0,1089,1088,1,0,0,0,1089,1090,1,0,0,0,1090,59,1,0,
        0,0,1091,1093,5,27,0,0,1092,1094,3,246,123,0,1093,1092,1,0,0,0,1093,
        1094,1,0,0,0,1094,61,1,0,0,0,1095,1097,5,28,0,0,1096,1098,3,246,
        123,0,1097,1096,1,0,0,0,1097,1098,1,0,0,0,1098,63,1,0,0,0,1099,1101,
        5,29,0,0,1100,1102,3,246,123,0,1101,1100,1,0,0,0,1101,1102,1,0,0,
        0,1102,65,1,0,0,0,1103,1105,5,30,0,0,1104,1106,3,246,123,0,1105,
        1104,1,0,0,0,1105,1106,1,0,0,0,1106,67,1,0,0,0,1107,1109,5,31,0,
        0,1108,1110,3,246,123,0,1109,1108,1,0,0,0,1109,1110,1,0,0,0,1110,
        69,1,0,0,0,1111,1113,5,32,0,0,1112,1114,3,246,123,0,1113,1112,1,
        0,0,0,1113,1114,1,0,0,0,1114,71,1,0,0,0,1115,1117,5,33,0,0,1116,
        1118,3,246,123,0,1117,1116,1,0,0,0,1117,1118,1,0,0,0,1118,73,1,0,
        0,0,1119,1121,5,34,0,0,1120,1122,3,246,123,0,1121,1120,1,0,0,0,1121,
        1122,1,0,0,0,1122,75,1,0,0,0,1123,1125,5,35,0,0,1124,1126,3,246,
        123,0,1125,1124,1,0,0,0,1125,1126,1,0,0,0,1126,77,1,0,0,0,1127,1129,
        5,36,0,0,1128,1130,3,246,123,0,1129,1128,1,0,0,0,1129,1130,1,0,0,
        0,1130,79,1,0,0,0,1131,1133,5,37,0,0,1132,1134,3,246,123,0,1133,
        1132,1,0,0,0,1133,1134,1,0,0,0,1134,81,1,0,0,0,1135,1137,5,38,0,
        0,1136,1138,3,246,123,0,1137,1136,1,0,0,0,1137,1138,1,0,0,0,1138,
        83,1,0,0,0,1139,1141,5,39,0,0,1140,1142,3,246,123,0,1141,1140,1,
        0,0,0,1141,1142,1,0,0,0,1142,85,1,0,0,0,1143,1145,5,40,0,0,1144,
        1146,3,246,123,0,1145,1144,1,0,0,0,1145,1146,1,0,0,0,1146,87,1,0,
        0,0,1147,1149,5,41,0,0,1148,1150,3,246,123,0,1149,1148,1,0,0,0,1149,
        1150,1,0,0,0,1150,89,1,0,0,0,1151,1153,5,42,0,0,1152,1154,3,246,
        123,0,1153,1152,1,0,0,0,1153,1154,1,0,0,0,1154,91,1,0,0,0,1155,1157,
        5,43,0,0,1156,1158,3,246,123,0,1157,1156,1,0,0,0,1157,1158,1,0,0,
        0,1158,93,1,0,0,0,1159,1161,5,44,0,0,1160,1162,3,246,123,0,1161,
        1160,1,0,0,0,1161,1162,1,0,0,0,1162,95,1,0,0,0,1163,1165,5,45,0,
        0,1164,1166,3,246,123,0,1165,1164,1,0,0,0,1165,1166,1,0,0,0,1166,
        97,1,0,0,0,1167,1169,5,46,0,0,1168,1170,3,246,123,0,1169,1168,1,
        0,0,0,1169,1170,1,0,0,0,1170,99,1,0,0,0,1171,1173,5,47,0,0,1172,
        1174,3,246,123,0,1173,1172,1,0,0,0,1173,1174,1,0,0,0,1174,101,1,
        0,0,0,1175,1177,5,48,0,0,1176,1178,3,246,123,0,1177,1176,1,0,0,0,
        1177,1178,1,0,0,0,1178,103,1,0,0,0,1179,1181,5,49,0,0,1180,1182,
        3,246,123,0,1181,1180,1,0,0,0,1181,1182,1,0,0,0,1182,105,1,0,0,0,
        1183,1185,5,50,0,0,1184,1186,3,246,123,0,1185,1184,1,0,0,0,1185,
        1186,1,0,0,0,1186,107,1,0,0,0,1187,1189,5,51,0,0,1188,1190,3,246,
        123,0,1189,1188,1,0,0,0,1189,1190,1,0,0,0,1190,109,1,0,0,0,1191,
        1193,5,52,0,0,1192,1194,3,246,123,0,1193,1192,1,0,0,0,1193,1194,
        1,0,0,0,1194,111,1,0,0,0,1195,1197,5,53,0,0,1196,1198,3,246,123,
        0,1197,1196,1,0,0,0,1197,1198,1,0,0,0,1198,113,1,0,0,0,1199,1201,
        5,54,0,0,1200,1202,3,246,123,0,1201,1200,1,0,0,0,1201,1202,1,0,0,
        0,1202,115,1,0,0,0,1203,1205,5,55,0,0,1204,1206,3,246,123,0,1205,
        1204,1,0,0,0,1205,1206,1,0,0,0,1206,117,1,0,0,0,1207,1209,5,56,0,
        0,1208,1210,3,246,123,0,1209,1208,1,0,0,0,1209,1210,1,0,0,0,1210,
        119,1,0,0,0,1211,1213,5,57,0,0,1212,1214,3,246,123,0,1213,1212,1,
        0,0,0,1213,1214,1,0,0,0,1214,121,1,0,0,0,1215,1217,5,58,0,0,1216,
        1218,3,246,123,0,1217,1216,1,0,0,0,1217,1218,1,0,0,0,1218,123,1,
        0,0,0,1219,1221,5,59,0,0,1220,1222,3,246,123,0,1221,1220,1,0,0,0,
        1221,1222,1,0,0,0,1222,125,1,0,0,0,1223,1225,5,60,0,0,1224,1226,
        3,246,123,0,1225,1224,1,0,0,0,1225,1226,1,0,0,0,1226,127,1,0,0,0,
        1227,1229,5,61,0,0,1228,1230,3,246,123,0,1229,1228,1,0,0,0,1229,
        1230,1,0,0,0,1230,129,1,0,0,0,1231,1233,5,62,0,0,1232,1234,3,246,
        123,0,1233,1232,1,0,0,0,1233,1234,1,0,0,0,1234,131,1,0,0,0,1235,
        1237,5,63,0,0,1236,1238,3,246,123,0,1237,1236,1,0,0,0,1237,1238,
        1,0,0,0,1238,133,1,0,0,0,1239,1241,5,64,0,0,1240,1242,3,246,123,
        0,1241,1240,1,0,0,0,1241,1242,1,0,0,0,1242,135,1,0,0,0,1243,1245,
        5,65,0,0,1244,1246,3,246,123,0,1245,1244,1,0,0,0,1245,1246,1,0,0,
        0,1246,137,1,0,0,0,1247,1249,5,66,0,0,1248,1250,3,246,123,0,1249,
        1248,1,0,0,0,1249,1250,1,0,0,0,1250,139,1,0,0,0,1251,1253,5,67,0,
        0,1252,1254,3,246,123,0,1253,1252,1,0,0,0,1253,1254,1,0,0,0,1254,
        141,1,0,0,0,1255,1257,5,68,0,0,1256,1258,3,246,123,0,1257,1256,1,
        0,0,0,1257,1258,1,0,0,0,1258,143,1,0,0,0,1259,1261,5,69,0,0,1260,
        1262,3,246,123,0,1261,1260,1,0,0,0,1261,1262,1,0,0,0,1262,145,1,
        0,0,0,1263,1265,5,70,0,0,1264,1266,3,246,123,0,1265,1264,1,0,0,0,
        1265,1266,1,0,0,0,1266,147,1,0,0,0,1267,1269,5,71,0,0,1268,1270,
        3,246,123,0,1269,1268,1,0,0,0,1269,1270,1,0,0,0,1270,149,1,0,0,0,
        1271,1273,5,72,0,0,1272,1274,3,246,123,0,1273,1272,1,0,0,0,1273,
        1274,1,0,0,0,1274,151,1,0,0,0,1275,1277,5,73,0,0,1276,1278,3,246,
        123,0,1277,1276,1,0,0,0,1277,1278,1,0,0,0,1278,153,1,0,0,0,1279,
        1281,5,74,0,0,1280,1282,3,246,123,0,1281,1280,1,0,0,0,1281,1282,
        1,0,0,0,1282,155,1,0,0,0,1283,1285,5,75,0,0,1284,1286,3,246,123,
        0,1285,1284,1,0,0,0,1285,1286,1,0,0,0,1286,157,1,0,0,0,1287,1289,
        5,76,0,0,1288,1290,3,246,123,0,1289,1288,1,0,0,0,1289,1290,1,0,0,
        0,1290,159,1,0,0,0,1291,1293,5,77,0,0,1292,1294,3,246,123,0,1293,
        1292,1,0,0,0,1293,1294,1,0,0,0,1294,161,1,0,0,0,1295,1297,5,78,0,
        0,1296,1298,3,246,123,0,1297,1296,1,0,0,0,1297,1298,1,0,0,0,1298,
        163,1,0,0,0,1299,1301,5,79,0,0,1300,1302,3,246,123,0,1301,1300,1,
        0,0,0,1301,1302,1,0,0,0,1302,165,1,0,0,0,1303,1305,5,80,0,0,1304,
        1306,3,246,123,0,1305,1304,1,0,0,0,1305,1306,1,0,0,0,1306,167,1,
        0,0,0,1307,1309,5,81,0,0,1308,1310,3,246,123,0,1309,1308,1,0,0,0,
        1309,1310,1,0,0,0,1310,169,1,0,0,0,1311,1313,5,82,0,0,1312,1314,
        3,246,123,0,1313,1312,1,0,0,0,1313,1314,1,0,0,0,1314,171,1,0,0,0,
        1315,1317,5,83,0,0,1316,1318,3,246,123,0,1317,1316,1,0,0,0,1317,
        1318,1,0,0,0,1318,173,1,0,0,0,1319,1321,5,84,0,0,1320,1322,3,246,
        123,0,1321,1320,1,0,0,0,1321,1322,1,0,0,0,1322,175,1,0,0,0,1323,
        1325,5,85,0,0,1324,1326,3,246,123,0,1325,1324,1,0,0,0,1325,1326,
        1,0,0,0,1326,177,1,0,0,0,1327,1329,5,86,0,0,1328,1330,3,246,123,
        0,1329,1328,1,0,0,0,1329,1330,1,0,0,0,1330,179,1,0,0,0,1331,1333,
        5,87,0,0,1332,1334,3,246,123,0,1333,1332,1,0,0,0,1333,1334,1,0,0,
        0,1334,181,1,0,0,0,1335,1337,5,88,0,0,1336,1338,3,246,123,0,1337,
        1336,1,0,0,0,1337,1338,1,0,0,0,1338,183,1,0,0,0,1339,1341,5,89,0,
        0,1340,1342,3,246,123,0,1341,1340,1,0,0,0,1341,1342,1,0,0,0,1342,
        185,1,0,0,0,1343,1345,5,90,0,0,1344,1346,3,246,123,0,1345,1344,1,
        0,0,0,1345,1346,1,0,0,0,1346,187,1,0,0,0,1347,1349,5,91,0,0,1348,
        1350,3,246,123,0,1349,1348,1,0,0,0,1349,1350,1,0,0,0,1350,189,1,
        0,0,0,1351,1353,5,92,0,0,1352,1354,3,246,123,0,1353,1352,1,0,0,0,
        1353,1354,1,0,0,0,1354,191,1,0,0,0,1355,1357,5,93,0,0,1356,1358,
        3,246,123,0,1357,1356,1,0,0,0,1357,1358,1,0,0,0,1358,193,1,0,0,0,
        1359,1361,5,94,0,0,1360,1362,3,246,123,0,1361,1360,1,0,0,0,1361,
        1362,1,0,0,0,1362,195,1,0,0,0,1363,1365,5,95,0,0,1364,1366,3,246,
        123,0,1365,1364,1,0,0,0,1365,1366,1,0,0,0,1366,197,1,0,0,0,1367,
        1369,5,96,0,0,1368,1370,3,246,123,0,1369,1368,1,0,0,0,1369,1370,
        1,0,0,0,1370,199,1,0,0,0,1371,1373,5,97,0,0,1372,1374,3,246,123,
        0,1373,1372,1,0,0,0,1373,1374,1,0,0,0,1374,201,1,0,0,0,1375,1377,
        5,98,0,0,1376,1378,3,246,123,0,1377,1376,1,0,0,0,1377,1378,1,0,0,
        0,1378,203,1,0,0,0,1379,1381,5,99,0,0,1380,1382,3,246,123,0,1381,
        1380,1,0,0,0,1381,1382,1,0,0,0,1382,205,1,0,0,0,1383,1385,5,100,
        0,0,1384,1386,3,246,123,0,1385,1384,1,0,0,0,1385,1386,1,0,0,0,1386,
        207,1,0,0,0,1387,1389,5,101,0,0,1388,1390,3,246,123,0,1389,1388,
        1,0,0,0,1389,1390,1,0,0,0,1390,209,1,0,0,0,1391,1393,5,102,0,0,1392,
        1394,3,246,123,0,1393,1392,1,0,0,0,1393,1394,1,0,0,0,1394,211,1,
        0,0,0,1395,1397,5,103,0,0,1396,1398,3,246,123,0,1397,1396,1,0,0,
        0,1397,1398,1,0,0,0,1398,213,1,0,0,0,1399,1401,5,104,0,0,1400,1402,
        3,246,123,0,1401,1400,1,0,0,0,1401,1402,1,0,0,0,1402,215,1,0,0,0,
        1403,1405,5,105,0,0,1404,1406,3,246,123,0,1405,1404,1,0,0,0,1405,
        1406,1,0,0,0,1406,217,1,0,0,0,1407,1409,5,106,0,0,1408,1410,3,246,
        123,0,1409,1408,1,0,0,0,1409,1410,1,0,0,0,1410,219,1,0,0,0,1411,
        1413,5,107,0,0,1412,1414,3,246,123,0,1413,1412,1,0,0,0,1413,1414,
        1,0,0,0,1414,221,1,0,0,0,1415,1417,5,108,0,0,1416,1418,3,246,123,
        0,1417,1416,1,0,0,0,1417,1418,1,0,0,0,1418,223,1,0,0,0,1419,1421,
        5,109,0,0,1420,1422,3,246,123,0,1421,1420,1,0,0,0,1421,1422,1,0,
        0,0,1422,225,1,0,0,0,1423,1425,5,110,0,0,1424,1426,3,246,123,0,1425,
        1424,1,0,0,0,1425,1426,1,0,0,0,1426,227,1,0,0,0,1427,1429,5,111,
        0,0,1428,1430,3,246,123,0,1429,1428,1,0,0,0,1429,1430,1,0,0,0,1430,
        229,1,0,0,0,1431,1433,5,112,0,0,1432,1434,3,246,123,0,1433,1432,
        1,0,0,0,1433,1434,1,0,0,0,1434,231,1,0,0,0,1435,1437,5,113,0,0,1436,
        1438,3,246,123,0,1437,1436,1,0,0,0,1437,1438,1,0,0,0,1438,233,1,
        0,0,0,1439,1441,5,114,0,0,1440,1442,3,246,123,0,1441,1440,1,0,0,
        0,1441,1442,1,0,0,0,1442,235,1,0,0,0,1443,1445,5,115,0,0,1444,1446,
        3,246,123,0,1445,1444,1,0,0,0,1445,1446,1,0,0,0,1446,237,1,0,0,0,
        1447,1449,5,116,0,0,1448,1450,3,246,123,0,1449,1448,1,0,0,0,1449,
        1450,1,0,0,0,1450,239,1,0,0,0,1451,1453,5,117,0,0,1452,1454,3,246,
        123,0,1453,1452,1,0,0,0,1453,1454,1,0,0,0,1454,241,1,0,0,0,1455,
        1457,5,118,0,0,1456,1458,3,246,123,0,1457,1456,1,0,0,0,1457,1458,
        1,0,0,0,1458,243,1,0,0,0,1459,1461,5,119,0,0,1460,1462,3,246,123,
        0,1461,1460,1,0,0,0,1461,1462,1,0,0,0,1462,245,1,0,0,0,1463,1464,
        3,270,135,0,1464,247,1,0,0,0,1465,1466,3,250,125,0,1466,1467,5,0,
        0,1,1467,249,1,0,0,0,1468,1470,3,252,126,0,1469,1468,1,0,0,0,1470,
        1473,1,0,0,0,1471,1469,1,0,0,0,1471,1472,1,0,0,0,1472,251,1,0,0,
        0,1473,1471,1,0,0,0,1474,1475,5,120,0,0,1475,1476,3,254,127,0,1476,
        1477,5,121,0,0,1477,1478,3,254,127,0,1478,1479,5,122,0,0,1479,253,
        1,0,0,0,1480,1481,3,268,134,0,1481,255,1,0,0,0,1482,1483,3,258,129,
        0,1483,1484,5,0,0,1,1484,257,1,0,0,0,1485,1487,3,260,130,0,1486,
        1485,1,0,0,0,1487,1490,1,0,0,0,1488,1486,1,0,0,0,1488,1489,1,0,0,
        0,1489,259,1,0,0,0,1490,1488,1,0,0,0,1491,1492,5,120,0,0,1492,1493,
        3,254,127,0,1493,1494,5,123,0,0,1494,1499,3,262,131,0,1495,1496,
        5,124,0,0,1496,1498,3,262,131,0,1497,1495,1,0,0,0,1498,1501,1,0,
        0,0,1499,1497,1,0,0,0,1499,1500,1,0,0,0,1500,1502,1,0,0,0,1501,1499,
        1,0,0,0,1502,1503,5,122,0,0,1503,261,1,0,0,0,1504,1505,3,264,132,
        0,1505,1506,5,125,0,0,1506,1507,3,266,133,0,1507,263,1,0,0,0,1508,
        1509,7,0,0,0,1509,265,1,0,0,0,1510,1511,3,268,134,0,1511,267,1,0,
        0,0,1512,1515,5,128,0,0,1513,1515,3,270,135,0,1514,1512,1,0,0,0,
        1514,1513,1,0,0,0,1515,269,1,0,0,0,1516,1517,7,1,0,0,1517,271,1,
        0,0,0,358,277,286,290,293,296,299,302,305,308,311,314,317,320,323,
        326,329,332,335,338,341,344,347,350,353,356,359,362,365,368,371,
        374,377,380,383,386,389,392,395,398,401,404,407,410,413,416,419,
        422,425,428,431,434,437,440,443,446,449,452,455,458,461,464,467,
        470,473,476,479,482,485,488,491,494,497,500,503,506,509,512,515,
        518,521,524,527,530,533,536,539,542,545,548,551,554,557,560,563,
        566,569,572,575,578,581,584,587,590,593,596,599,602,605,608,611,
        614,617,620,623,626,629,632,635,638,641,644,647,650,653,656,659,
        662,665,668,671,674,677,680,683,686,689,692,695,698,701,704,707,
        710,713,716,719,722,725,728,731,734,737,740,743,746,749,752,755,
        758,761,764,767,770,773,776,779,782,785,788,791,794,797,800,803,
        806,809,812,815,818,821,824,827,830,833,836,839,842,845,848,851,
        854,857,860,863,866,869,872,875,878,881,884,887,890,893,896,899,
        902,905,908,911,914,917,920,923,926,929,932,935,938,941,944,947,
        950,953,956,959,962,965,968,971,974,977,980,983,986,989,993,997,
        1001,1005,1009,1013,1017,1021,1025,1029,1033,1037,1041,1045,1049,
        1053,1057,1061,1065,1069,1073,1077,1081,1085,1089,1093,1097,1101,
        1105,1109,1113,1117,1121,1125,1129,1133,1137,1141,1145,1149,1153,
        1157,1161,1165,1169,1173,1177,1181,1185,1189,1193,1197,1201,1205,
        1209,1213,1217,1221,1225,1229,1233,1237,1241,1245,1249,1253,1257,
        1261,1265,1269,1273,1277,1281,1285,1289,1293,1297,1301,1305,1309,
        1313,1317,1321,1325,1329,1333,1337,1341,1345,1349,1353,1357,1361,
        1365,1369,1373,1377,1381,1385,1389,1393,1397,1401,1405,1409,1413,
        1417,1421,1425,1429,1433,1437,1441,1445,1449,1453,1457,1461,1471,
        1488,1499,1514
    ]

class tucanParser ( Parser ):

    grammarFileName = "tucan.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'/'", "'H'", "'He'", "'Li'", "'Be'", 
                     "'B'", "'C'", "'N'", "'O'", "'F'", "'Ne'", "'Na'", 
                     "'Mg'", "'Al'", "'Si'", "'P'", "'S'", "'Cl'", "'Ar'", 
                     "'K'", "'Ca'", "'Sc'", "'Ti'", "'V'", "'Cr'", "'Mn'", 
                     "'Fe'", "'Co'", "'Ni'", "'Cu'", "'Zn'", "'Ga'", "'Ge'", 
                     "'As'", "'Se'", "'Br'", "'Kr'", "'Rb'", "'Sr'", "'Y'", 
                     "'Zr'", "'Nb'", "'Mo'", "'Tc'", "'Ru'", "'Rh'", "'Pd'", 
                     "'Ag'", "'Cd'", "'In'", "'Sn'", "'Sb'", "'Te'", "'I'", 
                     "'Xe'", "'Cs'", "'Ba'", "'La'", "'Ce'", "'Pr'", "'Nd'", 
                     "'Pm'", "'Sm'", "'Eu'", "'Gd'", "'Tb'", "'Dy'", "'Ho'", 
                     "'Er'", "'Tm'", "'Yb'", "'Lu'", "'Hf'", "'Ta'", "'W'", 
                     "'Re'", "'Os'", "'Ir'", "'Pt'", "'Au'", "'Hg'", "'Tl'", 
                     "'Pb'", "'Bi'", "'Po'", "'At'", "'Rn'", "'Fr'", "'Ra'", 
                     "'Ac'", "'Th'", "'Pa'", "'U'", "'Np'", "'Pu'", "'Am'", 
                     "'Cm'", "'Bk'", "'Cf'", "'Es'", "'Fm'", "'Md'", "'No'", 
                     "'Lr'", "'Rf'", "'Db'", "'Sg'", "'Bh'", "'Hs'", "'Mt'", 
                     "'Ds'", "'Rg'", "'Cn'", "'Nh'", "'Fl'", "'Mc'", "'Lv'", 
                     "'Ts'", "'Og'", "'('", "'-'", "')'", "':'", "','", 
                     "'='", "'mass'", "'rad'", "'1'", "'2'", "'3'", "'4'", 
                     "'5'", "'6'", "'7'", "'8'", "'9'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "GREATER_THAN_NINE" ]

    RULE_tucan = 0
    RULE_sum_formula_start = 1
    RULE_sum_formula = 2
    RULE_with_carbon = 3
    RULE_without_carbon = 4
    RULE_h = 5
    RULE_he = 6
    RULE_li = 7
    RULE_be = 8
    RULE_b = 9
    RULE_c = 10
    RULE_n = 11
    RULE_o = 12
    RULE_f = 13
    RULE_ne = 14
    RULE_na = 15
    RULE_mg = 16
    RULE_al = 17
    RULE_si = 18
    RULE_p = 19
    RULE_s = 20
    RULE_cl = 21
    RULE_ar = 22
    RULE_k = 23
    RULE_ca = 24
    RULE_sc = 25
    RULE_ti = 26
    RULE_v = 27
    RULE_cr = 28
    RULE_mn = 29
    RULE_fe = 30
    RULE_co = 31
    RULE_ni = 32
    RULE_cu = 33
    RULE_zn = 34
    RULE_ga = 35
    RULE_ge = 36
    RULE_as = 37
    RULE_se = 38
    RULE_br = 39
    RULE_kr = 40
    RULE_rb = 41
    RULE_sr = 42
    RULE_y = 43
    RULE_zr = 44
    RULE_nb = 45
    RULE_mo = 46
    RULE_tc = 47
    RULE_ru = 48
    RULE_rh = 49
    RULE_pd = 50
    RULE_ag = 51
    RULE_cd = 52
    RULE_in = 53
    RULE_sn = 54
    RULE_sb = 55
    RULE_te = 56
    RULE_i = 57
    RULE_xe = 58
    RULE_cs = 59
    RULE_ba = 60
    RULE_la = 61
    RULE_ce = 62
    RULE_pr = 63
    RULE_nd = 64
    RULE_pm = 65
    RULE_sm = 66
    RULE_eu = 67
    RULE_gd = 68
    RULE_tb = 69
    RULE_dy = 70
    RULE_ho = 71
    RULE_er = 72
    RULE_tm = 73
    RULE_yb = 74
    RULE_lu = 75
    RULE_hf = 76
    RULE_ta = 77
    RULE_w = 78
    RULE_re = 79
    RULE_os = 80
    RULE_ir = 81
    RULE_pt = 82
    RULE_au = 83
    RULE_hg = 84
    RULE_tl = 85
    RULE_pb = 86
    RULE_bi = 87
    RULE_po = 88
    RULE_at = 89
    RULE_rn = 90
    RULE_fr = 91
    RULE_ra = 92
    RULE_ac = 93
    RULE_th = 94
    RULE_pa = 95
    RULE_u = 96
    RULE_np = 97
    RULE_pu = 98
    RULE_am = 99
    RULE_cm = 100
    RULE_bk = 101
    RULE_cf = 102
    RULE_es = 103
    RULE_fm = 104
    RULE_md = 105
    RULE_no = 106
    RULE_lr = 107
    RULE_rf = 108
    RULE_db = 109
    RULE_sg = 110
    RULE_bh = 111
    RULE_hs = 112
    RULE_mt = 113
    RULE_ds = 114
    RULE_rg = 115
    RULE_cn = 116
    RULE_nh = 117
    RULE_fl = 118
    RULE_mc = 119
    RULE_lv = 120
    RULE_ts = 121
    RULE_og = 122
    RULE_count = 123
    RULE_tuples_start = 124
    RULE_tuples = 125
    RULE_tuple = 126
    RULE_node_index = 127
    RULE_node_attributes_start = 128
    RULE_node_attributes = 129
    RULE_node_attribute = 130
    RULE_node_property = 131
    RULE_node_property_key = 132
    RULE_node_property_value = 133
    RULE_gte_one = 134
    RULE_gt_one = 135

    ruleNames =  [ "tucan", "sum_formula_start", "sum_formula", "with_carbon", 
                   "without_carbon", "h", "he", "li", "be", "b", "c", "n", 
                   "o", "f", "ne", "na", "mg", "al", "si", "p", "s", "cl", 
                   "ar", "k", "ca", "sc", "ti", "v", "cr", "mn", "fe", "co", 
                   "ni", "cu", "zn", "ga", "ge", "as", "se", "br", "kr", 
                   "rb", "sr", "y", "zr", "nb", "mo", "tc", "ru", "rh", 
                   "pd", "ag", "cd", "in", "sn", "sb", "te", "i", "xe", 
                   "cs", "ba", "la", "ce", "pr", "nd", "pm", "sm", "eu", 
                   "gd", "tb", "dy", "ho", "er", "tm", "yb", "lu", "hf", 
                   "ta", "w", "re", "os", "ir", "pt", "au", "hg", "tl", 
                   "pb", "bi", "po", "at", "rn", "fr", "ra", "ac", "th", 
                   "pa", "u", "np", "pu", "am", "cm", "bk", "cf", "es", 
                   "fm", "md", "no", "lr", "rf", "db", "sg", "bh", "hs", 
                   "mt", "ds", "rg", "cn", "nh", "fl", "mc", "lv", "ts", 
                   "og", "count", "tuples_start", "tuples", "tuple", "node_index", 
                   "node_attributes_start", "node_attributes", "node_attribute", 
                   "node_property", "node_property_key", "node_property_value", 
                   "gte_one", "gt_one" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    T__92=93
    T__93=94
    T__94=95
    T__95=96
    T__96=97
    T__97=98
    T__98=99
    T__99=100
    T__100=101
    T__101=102
    T__102=103
    T__103=104
    T__104=105
    T__105=106
    T__106=107
    T__107=108
    T__108=109
    T__109=110
    T__110=111
    T__111=112
    T__112=113
    T__113=114
    T__114=115
    T__115=116
    T__116=117
    T__117=118
    T__118=119
    T__119=120
    T__120=121
    T__121=122
    T__122=123
    T__123=124
    T__124=125
    T__125=126
    T__126=127
    T__127=128
    T__128=129
    T__129=130
    T__130=131
    T__131=132
    T__132=133
    T__133=134
    T__134=135
    T__135=136
    GREATER_THAN_NINE=137

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class TucanContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sum_formula(self):
            return self.getTypedRuleContext(tucanParser.Sum_formulaContext,0)


        def tuples(self):
            return self.getTypedRuleContext(tucanParser.TuplesContext,0)


        def EOF(self):
            return self.getToken(tucanParser.EOF, 0)

        def node_attributes(self):
            return self.getTypedRuleContext(tucanParser.Node_attributesContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_tucan

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTucan" ):
                listener.enterTucan(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTucan" ):
                listener.exitTucan(self)




    def tucan(self):

        localctx = tucanParser.TucanContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_tucan)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 272
            self.sum_formula()
            self.state = 273
            self.match(tucanParser.T__0)
            self.state = 274
            self.tuples()
            self.state = 277
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 275
                self.match(tucanParser.T__0)
                self.state = 276
                self.node_attributes()


            self.state = 279
            self.match(tucanParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sum_formula_startContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sum_formula(self):
            return self.getTypedRuleContext(tucanParser.Sum_formulaContext,0)


        def EOF(self):
            return self.getToken(tucanParser.EOF, 0)

        def getRuleIndex(self):
            return tucanParser.RULE_sum_formula_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSum_formula_start" ):
                listener.enterSum_formula_start(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSum_formula_start" ):
                listener.exitSum_formula_start(self)




    def sum_formula_start(self):

        localctx = tucanParser.Sum_formula_startContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_sum_formula_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 281
            self.sum_formula()
            self.state = 282
            self.match(tucanParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sum_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def with_carbon(self):
            return self.getTypedRuleContext(tucanParser.With_carbonContext,0)


        def without_carbon(self):
            return self.getTypedRuleContext(tucanParser.Without_carbonContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_sum_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSum_formula" ):
                listener.enterSum_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSum_formula" ):
                listener.exitSum_formula(self)




    def sum_formula(self):

        localctx = tucanParser.Sum_formulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_sum_formula)
        try:
            self.state = 286
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                self.enterOuterAlt(localctx, 1)
                self.state = 284
                self.with_carbon()
                pass
            elif token in [-1, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119]:
                self.enterOuterAlt(localctx, 2)
                self.state = 285
                self.without_carbon()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_carbonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def c(self):
            return self.getTypedRuleContext(tucanParser.CContext,0)


        def h(self):
            return self.getTypedRuleContext(tucanParser.HContext,0)


        def ac(self):
            return self.getTypedRuleContext(tucanParser.AcContext,0)


        def ag(self):
            return self.getTypedRuleContext(tucanParser.AgContext,0)


        def al(self):
            return self.getTypedRuleContext(tucanParser.AlContext,0)


        def am(self):
            return self.getTypedRuleContext(tucanParser.AmContext,0)


        def ar(self):
            return self.getTypedRuleContext(tucanParser.ArContext,0)


        def as_(self):
            return self.getTypedRuleContext(tucanParser.AsContext,0)


        def at(self):
            return self.getTypedRuleContext(tucanParser.AtContext,0)


        def au(self):
            return self.getTypedRuleContext(tucanParser.AuContext,0)


        def b(self):
            return self.getTypedRuleContext(tucanParser.BContext,0)


        def ba(self):
            return self.getTypedRuleContext(tucanParser.BaContext,0)


        def be(self):
            return self.getTypedRuleContext(tucanParser.BeContext,0)


        def bh(self):
            return self.getTypedRuleContext(tucanParser.BhContext,0)


        def bi(self):
            return self.getTypedRuleContext(tucanParser.BiContext,0)


        def bk(self):
            return self.getTypedRuleContext(tucanParser.BkContext,0)


        def br(self):
            return self.getTypedRuleContext(tucanParser.BrContext,0)


        def ca(self):
            return self.getTypedRuleContext(tucanParser.CaContext,0)


        def cd(self):
            return self.getTypedRuleContext(tucanParser.CdContext,0)


        def ce(self):
            return self.getTypedRuleContext(tucanParser.CeContext,0)


        def cf(self):
            return self.getTypedRuleContext(tucanParser.CfContext,0)


        def cl(self):
            return self.getTypedRuleContext(tucanParser.ClContext,0)


        def cm(self):
            return self.getTypedRuleContext(tucanParser.CmContext,0)


        def cn(self):
            return self.getTypedRuleContext(tucanParser.CnContext,0)


        def co(self):
            return self.getTypedRuleContext(tucanParser.CoContext,0)


        def cr(self):
            return self.getTypedRuleContext(tucanParser.CrContext,0)


        def cs(self):
            return self.getTypedRuleContext(tucanParser.CsContext,0)


        def cu(self):
            return self.getTypedRuleContext(tucanParser.CuContext,0)


        def db(self):
            return self.getTypedRuleContext(tucanParser.DbContext,0)


        def ds(self):
            return self.getTypedRuleContext(tucanParser.DsContext,0)


        def dy(self):
            return self.getTypedRuleContext(tucanParser.DyContext,0)


        def er(self):
            return self.getTypedRuleContext(tucanParser.ErContext,0)


        def es(self):
            return self.getTypedRuleContext(tucanParser.EsContext,0)


        def eu(self):
            return self.getTypedRuleContext(tucanParser.EuContext,0)


        def f(self):
            return self.getTypedRuleContext(tucanParser.FContext,0)


        def fe(self):
            return self.getTypedRuleContext(tucanParser.FeContext,0)


        def fl(self):
            return self.getTypedRuleContext(tucanParser.FlContext,0)


        def fm(self):
            return self.getTypedRuleContext(tucanParser.FmContext,0)


        def fr(self):
            return self.getTypedRuleContext(tucanParser.FrContext,0)


        def ga(self):
            return self.getTypedRuleContext(tucanParser.GaContext,0)


        def gd(self):
            return self.getTypedRuleContext(tucanParser.GdContext,0)


        def ge(self):
            return self.getTypedRuleContext(tucanParser.GeContext,0)


        def he(self):
            return self.getTypedRuleContext(tucanParser.HeContext,0)


        def hf(self):
            return self.getTypedRuleContext(tucanParser.HfContext,0)


        def hg(self):
            return self.getTypedRuleContext(tucanParser.HgContext,0)


        def ho(self):
            return self.getTypedRuleContext(tucanParser.HoContext,0)


        def hs(self):
            return self.getTypedRuleContext(tucanParser.HsContext,0)


        def i(self):
            return self.getTypedRuleContext(tucanParser.IContext,0)


        def in_(self):
            return self.getTypedRuleContext(tucanParser.InContext,0)


        def ir(self):
            return self.getTypedRuleContext(tucanParser.IrContext,0)


        def k(self):
            return self.getTypedRuleContext(tucanParser.KContext,0)


        def kr(self):
            return self.getTypedRuleContext(tucanParser.KrContext,0)


        def la(self):
            return self.getTypedRuleContext(tucanParser.LaContext,0)


        def li(self):
            return self.getTypedRuleContext(tucanParser.LiContext,0)


        def lr(self):
            return self.getTypedRuleContext(tucanParser.LrContext,0)


        def lu(self):
            return self.getTypedRuleContext(tucanParser.LuContext,0)


        def lv(self):
            return self.getTypedRuleContext(tucanParser.LvContext,0)


        def mc(self):
            return self.getTypedRuleContext(tucanParser.McContext,0)


        def md(self):
            return self.getTypedRuleContext(tucanParser.MdContext,0)


        def mg(self):
            return self.getTypedRuleContext(tucanParser.MgContext,0)


        def mn(self):
            return self.getTypedRuleContext(tucanParser.MnContext,0)


        def mo(self):
            return self.getTypedRuleContext(tucanParser.MoContext,0)


        def mt(self):
            return self.getTypedRuleContext(tucanParser.MtContext,0)


        def n(self):
            return self.getTypedRuleContext(tucanParser.NContext,0)


        def na(self):
            return self.getTypedRuleContext(tucanParser.NaContext,0)


        def nb(self):
            return self.getTypedRuleContext(tucanParser.NbContext,0)


        def nd(self):
            return self.getTypedRuleContext(tucanParser.NdContext,0)


        def ne(self):
            return self.getTypedRuleContext(tucanParser.NeContext,0)


        def nh(self):
            return self.getTypedRuleContext(tucanParser.NhContext,0)


        def ni(self):
            return self.getTypedRuleContext(tucanParser.NiContext,0)


        def no(self):
            return self.getTypedRuleContext(tucanParser.NoContext,0)


        def np(self):
            return self.getTypedRuleContext(tucanParser.NpContext,0)


        def o(self):
            return self.getTypedRuleContext(tucanParser.OContext,0)


        def og(self):
            return self.getTypedRuleContext(tucanParser.OgContext,0)


        def os(self):
            return self.getTypedRuleContext(tucanParser.OsContext,0)


        def p(self):
            return self.getTypedRuleContext(tucanParser.PContext,0)


        def pa(self):
            return self.getTypedRuleContext(tucanParser.PaContext,0)


        def pb(self):
            return self.getTypedRuleContext(tucanParser.PbContext,0)


        def pd(self):
            return self.getTypedRuleContext(tucanParser.PdContext,0)


        def pm(self):
            return self.getTypedRuleContext(tucanParser.PmContext,0)


        def po(self):
            return self.getTypedRuleContext(tucanParser.PoContext,0)


        def pr(self):
            return self.getTypedRuleContext(tucanParser.PrContext,0)


        def pt(self):
            return self.getTypedRuleContext(tucanParser.PtContext,0)


        def pu(self):
            return self.getTypedRuleContext(tucanParser.PuContext,0)


        def ra(self):
            return self.getTypedRuleContext(tucanParser.RaContext,0)


        def rb(self):
            return self.getTypedRuleContext(tucanParser.RbContext,0)


        def re(self):
            return self.getTypedRuleContext(tucanParser.ReContext,0)


        def rf(self):
            return self.getTypedRuleContext(tucanParser.RfContext,0)


        def rg(self):
            return self.getTypedRuleContext(tucanParser.RgContext,0)


        def rh(self):
            return self.getTypedRuleContext(tucanParser.RhContext,0)


        def rn(self):
            return self.getTypedRuleContext(tucanParser.RnContext,0)


        def ru(self):
            return self.getTypedRuleContext(tucanParser.RuContext,0)


        def s(self):
            return self.getTypedRuleContext(tucanParser.SContext,0)


        def sb(self):
            return self.getTypedRuleContext(tucanParser.SbContext,0)


        def sc(self):
            return self.getTypedRuleContext(tucanParser.ScContext,0)


        def se(self):
            return self.getTypedRuleContext(tucanParser.SeContext,0)


        def sg(self):
            return self.getTypedRuleContext(tucanParser.SgContext,0)


        def si(self):
            return self.getTypedRuleContext(tucanParser.SiContext,0)


        def sm(self):
            return self.getTypedRuleContext(tucanParser.SmContext,0)


        def sn(self):
            return self.getTypedRuleContext(tucanParser.SnContext,0)


        def sr(self):
            return self.getTypedRuleContext(tucanParser.SrContext,0)


        def ta(self):
            return self.getTypedRuleContext(tucanParser.TaContext,0)


        def tb(self):
            return self.getTypedRuleContext(tucanParser.TbContext,0)


        def tc(self):
            return self.getTypedRuleContext(tucanParser.TcContext,0)


        def te(self):
            return self.getTypedRuleContext(tucanParser.TeContext,0)


        def th(self):
            return self.getTypedRuleContext(tucanParser.ThContext,0)


        def ti(self):
            return self.getTypedRuleContext(tucanParser.TiContext,0)


        def tl(self):
            return self.getTypedRuleContext(tucanParser.TlContext,0)


        def tm(self):
            return self.getTypedRuleContext(tucanParser.TmContext,0)


        def ts(self):
            return self.getTypedRuleContext(tucanParser.TsContext,0)


        def u(self):
            return self.getTypedRuleContext(tucanParser.UContext,0)


        def v(self):
            return self.getTypedRuleContext(tucanParser.VContext,0)


        def w(self):
            return self.getTypedRuleContext(tucanParser.WContext,0)


        def xe(self):
            return self.getTypedRuleContext(tucanParser.XeContext,0)


        def y(self):
            return self.getTypedRuleContext(tucanParser.YContext,0)


        def yb(self):
            return self.getTypedRuleContext(tucanParser.YbContext,0)


        def zn(self):
            return self.getTypedRuleContext(tucanParser.ZnContext,0)


        def zr(self):
            return self.getTypedRuleContext(tucanParser.ZrContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_with_carbon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_carbon" ):
                listener.enterWith_carbon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_carbon" ):
                listener.exitWith_carbon(self)




    def with_carbon(self):

        localctx = tucanParser.With_carbonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_with_carbon)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 288
            self.c()
            self.state = 290
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 289
                self.h()


            self.state = 293
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 292
                self.ac()


            self.state = 296
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 295
                self.ag()


            self.state = 299
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 298
                self.al()


            self.state = 302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==96:
                self.state = 301
                self.am()


            self.state = 305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 304
                self.ar()


            self.state = 308
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 307
                self.as_()


            self.state = 311
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 310
                self.at()


            self.state = 314
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==80:
                self.state = 313
                self.au()


            self.state = 317
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6:
                self.state = 316
                self.b()


            self.state = 320
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 319
                self.ba()


            self.state = 323
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 322
                self.be()


            self.state = 326
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==108:
                self.state = 325
                self.bh()


            self.state = 329
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==84:
                self.state = 328
                self.bi()


            self.state = 332
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98:
                self.state = 331
                self.bk()


            self.state = 335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==36:
                self.state = 334
                self.br()


            self.state = 338
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21:
                self.state = 337
                self.ca()


            self.state = 341
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 340
                self.cd()


            self.state = 344
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 343
                self.ce()


            self.state = 347
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==99:
                self.state = 346
                self.cf()


            self.state = 350
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 349
                self.cl()


            self.state = 353
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==97:
                self.state = 352
                self.cm()


            self.state = 356
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==113:
                self.state = 355
                self.cn()


            self.state = 359
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==28:
                self.state = 358
                self.co()


            self.state = 362
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==25:
                self.state = 361
                self.cr()


            self.state = 365
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 364
                self.cs()


            self.state = 368
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==30:
                self.state = 367
                self.cu()


            self.state = 371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==106:
                self.state = 370
                self.db()


            self.state = 374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 373
                self.ds()


            self.state = 377
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67:
                self.state = 376
                self.dy()


            self.state = 380
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==69:
                self.state = 379
                self.er()


            self.state = 383
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==100:
                self.state = 382
                self.es()


            self.state = 386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==64:
                self.state = 385
                self.eu()


            self.state = 389
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 388
                self.f()


            self.state = 392
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==27:
                self.state = 391
                self.fe()


            self.state = 395
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==115:
                self.state = 394
                self.fl()


            self.state = 398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==101:
                self.state = 397
                self.fm()


            self.state = 401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==88:
                self.state = 400
                self.fr()


            self.state = 404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 403
                self.ga()


            self.state = 407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 406
                self.gd()


            self.state = 410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==33:
                self.state = 409
                self.ge()


            self.state = 413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 412
                self.he()


            self.state = 416
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73:
                self.state = 415
                self.hf()


            self.state = 419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 418
                self.hg()


            self.state = 422
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 421
                self.ho()


            self.state = 425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==109:
                self.state = 424
                self.hs()


            self.state = 428
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==54:
                self.state = 427
                self.i()


            self.state = 431
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 430
                self.in_()


            self.state = 434
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78:
                self.state = 433
                self.ir()


            self.state = 437
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 436
                self.k()


            self.state = 440
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==37:
                self.state = 439
                self.kr()


            self.state = 443
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 442
                self.la()


            self.state = 446
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==4:
                self.state = 445
                self.li()


            self.state = 449
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==104:
                self.state = 448
                self.lr()


            self.state = 452
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==72:
                self.state = 451
                self.lu()


            self.state = 455
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==117:
                self.state = 454
                self.lv()


            self.state = 458
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==116:
                self.state = 457
                self.mc()


            self.state = 461
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==102:
                self.state = 460
                self.md()


            self.state = 464
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 463
                self.mg()


            self.state = 467
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 466
                self.mn()


            self.state = 470
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==43:
                self.state = 469
                self.mo()


            self.state = 473
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==110:
                self.state = 472
                self.mt()


            self.state = 476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 475
                self.n()


            self.state = 479
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 478
                self.na()


            self.state = 482
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42:
                self.state = 481
                self.nb()


            self.state = 485
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==61:
                self.state = 484
                self.nd()


            self.state = 488
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 487
                self.ne()


            self.state = 491
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==114:
                self.state = 490
                self.nh()


            self.state = 494
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==29:
                self.state = 493
                self.ni()


            self.state = 497
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==103:
                self.state = 496
                self.no()


            self.state = 500
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==94:
                self.state = 499
                self.np()


            self.state = 503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 502
                self.o()


            self.state = 506
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119:
                self.state = 505
                self.og()


            self.state = 509
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 508
                self.os()


            self.state = 512
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 511
                self.p()


            self.state = 515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 514
                self.pa()


            self.state = 518
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==83:
                self.state = 517
                self.pb()


            self.state = 521
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 520
                self.pd()


            self.state = 524
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 523
                self.pm()


            self.state = 527
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==85:
                self.state = 526
                self.po()


            self.state = 530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 529
                self.pr()


            self.state = 533
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==79:
                self.state = 532
                self.pt()


            self.state = 536
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==95:
                self.state = 535
                self.pu()


            self.state = 539
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==89:
                self.state = 538
                self.ra()


            self.state = 542
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==38:
                self.state = 541
                self.rb()


            self.state = 545
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==76:
                self.state = 544
                self.re()


            self.state = 548
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==105:
                self.state = 547
                self.rf()


            self.state = 551
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==112:
                self.state = 550
                self.rg()


            self.state = 554
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 553
                self.rh()


            self.state = 557
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==87:
                self.state = 556
                self.rn()


            self.state = 560
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 559
                self.ru()


            self.state = 563
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 562
                self.s()


            self.state = 566
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 565
                self.sb()


            self.state = 569
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 568
                self.sc()


            self.state = 572
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 571
                self.se()


            self.state = 575
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==107:
                self.state = 574
                self.sg()


            self.state = 578
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==15:
                self.state = 577
                self.si()


            self.state = 581
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 580
                self.sm()


            self.state = 584
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51:
                self.state = 583
                self.sn()


            self.state = 587
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==39:
                self.state = 586
                self.sr()


            self.state = 590
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==74:
                self.state = 589
                self.ta()


            self.state = 593
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 592
                self.tb()


            self.state = 596
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==44:
                self.state = 595
                self.tc()


            self.state = 599
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 598
                self.te()


            self.state = 602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==91:
                self.state = 601
                self.th()


            self.state = 605
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23:
                self.state = 604
                self.ti()


            self.state = 608
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82:
                self.state = 607
                self.tl()


            self.state = 611
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==70:
                self.state = 610
                self.tm()


            self.state = 614
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==118:
                self.state = 613
                self.ts()


            self.state = 617
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==93:
                self.state = 616
                self.u()


            self.state = 620
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24:
                self.state = 619
                self.v()


            self.state = 623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75:
                self.state = 622
                self.w()


            self.state = 626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==55:
                self.state = 625
                self.xe()


            self.state = 629
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==40:
                self.state = 628
                self.y()


            self.state = 632
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 631
                self.yb()


            self.state = 635
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==31:
                self.state = 634
                self.zn()


            self.state = 638
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==41:
                self.state = 637
                self.zr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Without_carbonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ac(self):
            return self.getTypedRuleContext(tucanParser.AcContext,0)


        def ag(self):
            return self.getTypedRuleContext(tucanParser.AgContext,0)


        def al(self):
            return self.getTypedRuleContext(tucanParser.AlContext,0)


        def am(self):
            return self.getTypedRuleContext(tucanParser.AmContext,0)


        def ar(self):
            return self.getTypedRuleContext(tucanParser.ArContext,0)


        def as_(self):
            return self.getTypedRuleContext(tucanParser.AsContext,0)


        def at(self):
            return self.getTypedRuleContext(tucanParser.AtContext,0)


        def au(self):
            return self.getTypedRuleContext(tucanParser.AuContext,0)


        def b(self):
            return self.getTypedRuleContext(tucanParser.BContext,0)


        def ba(self):
            return self.getTypedRuleContext(tucanParser.BaContext,0)


        def be(self):
            return self.getTypedRuleContext(tucanParser.BeContext,0)


        def bh(self):
            return self.getTypedRuleContext(tucanParser.BhContext,0)


        def bi(self):
            return self.getTypedRuleContext(tucanParser.BiContext,0)


        def bk(self):
            return self.getTypedRuleContext(tucanParser.BkContext,0)


        def br(self):
            return self.getTypedRuleContext(tucanParser.BrContext,0)


        def ca(self):
            return self.getTypedRuleContext(tucanParser.CaContext,0)


        def cd(self):
            return self.getTypedRuleContext(tucanParser.CdContext,0)


        def ce(self):
            return self.getTypedRuleContext(tucanParser.CeContext,0)


        def cf(self):
            return self.getTypedRuleContext(tucanParser.CfContext,0)


        def cl(self):
            return self.getTypedRuleContext(tucanParser.ClContext,0)


        def cm(self):
            return self.getTypedRuleContext(tucanParser.CmContext,0)


        def cn(self):
            return self.getTypedRuleContext(tucanParser.CnContext,0)


        def co(self):
            return self.getTypedRuleContext(tucanParser.CoContext,0)


        def cr(self):
            return self.getTypedRuleContext(tucanParser.CrContext,0)


        def cs(self):
            return self.getTypedRuleContext(tucanParser.CsContext,0)


        def cu(self):
            return self.getTypedRuleContext(tucanParser.CuContext,0)


        def db(self):
            return self.getTypedRuleContext(tucanParser.DbContext,0)


        def ds(self):
            return self.getTypedRuleContext(tucanParser.DsContext,0)


        def dy(self):
            return self.getTypedRuleContext(tucanParser.DyContext,0)


        def er(self):
            return self.getTypedRuleContext(tucanParser.ErContext,0)


        def es(self):
            return self.getTypedRuleContext(tucanParser.EsContext,0)


        def eu(self):
            return self.getTypedRuleContext(tucanParser.EuContext,0)


        def f(self):
            return self.getTypedRuleContext(tucanParser.FContext,0)


        def fe(self):
            return self.getTypedRuleContext(tucanParser.FeContext,0)


        def fl(self):
            return self.getTypedRuleContext(tucanParser.FlContext,0)


        def fm(self):
            return self.getTypedRuleContext(tucanParser.FmContext,0)


        def fr(self):
            return self.getTypedRuleContext(tucanParser.FrContext,0)


        def ga(self):
            return self.getTypedRuleContext(tucanParser.GaContext,0)


        def gd(self):
            return self.getTypedRuleContext(tucanParser.GdContext,0)


        def ge(self):
            return self.getTypedRuleContext(tucanParser.GeContext,0)


        def h(self):
            return self.getTypedRuleContext(tucanParser.HContext,0)


        def he(self):
            return self.getTypedRuleContext(tucanParser.HeContext,0)


        def hf(self):
            return self.getTypedRuleContext(tucanParser.HfContext,0)


        def hg(self):
            return self.getTypedRuleContext(tucanParser.HgContext,0)


        def ho(self):
            return self.getTypedRuleContext(tucanParser.HoContext,0)


        def hs(self):
            return self.getTypedRuleContext(tucanParser.HsContext,0)


        def i(self):
            return self.getTypedRuleContext(tucanParser.IContext,0)


        def in_(self):
            return self.getTypedRuleContext(tucanParser.InContext,0)


        def ir(self):
            return self.getTypedRuleContext(tucanParser.IrContext,0)


        def k(self):
            return self.getTypedRuleContext(tucanParser.KContext,0)


        def kr(self):
            return self.getTypedRuleContext(tucanParser.KrContext,0)


        def la(self):
            return self.getTypedRuleContext(tucanParser.LaContext,0)


        def li(self):
            return self.getTypedRuleContext(tucanParser.LiContext,0)


        def lr(self):
            return self.getTypedRuleContext(tucanParser.LrContext,0)


        def lu(self):
            return self.getTypedRuleContext(tucanParser.LuContext,0)


        def lv(self):
            return self.getTypedRuleContext(tucanParser.LvContext,0)


        def mc(self):
            return self.getTypedRuleContext(tucanParser.McContext,0)


        def md(self):
            return self.getTypedRuleContext(tucanParser.MdContext,0)


        def mg(self):
            return self.getTypedRuleContext(tucanParser.MgContext,0)


        def mn(self):
            return self.getTypedRuleContext(tucanParser.MnContext,0)


        def mo(self):
            return self.getTypedRuleContext(tucanParser.MoContext,0)


        def mt(self):
            return self.getTypedRuleContext(tucanParser.MtContext,0)


        def n(self):
            return self.getTypedRuleContext(tucanParser.NContext,0)


        def na(self):
            return self.getTypedRuleContext(tucanParser.NaContext,0)


        def nb(self):
            return self.getTypedRuleContext(tucanParser.NbContext,0)


        def nd(self):
            return self.getTypedRuleContext(tucanParser.NdContext,0)


        def ne(self):
            return self.getTypedRuleContext(tucanParser.NeContext,0)


        def nh(self):
            return self.getTypedRuleContext(tucanParser.NhContext,0)


        def ni(self):
            return self.getTypedRuleContext(tucanParser.NiContext,0)


        def no(self):
            return self.getTypedRuleContext(tucanParser.NoContext,0)


        def np(self):
            return self.getTypedRuleContext(tucanParser.NpContext,0)


        def o(self):
            return self.getTypedRuleContext(tucanParser.OContext,0)


        def og(self):
            return self.getTypedRuleContext(tucanParser.OgContext,0)


        def os(self):
            return self.getTypedRuleContext(tucanParser.OsContext,0)


        def p(self):
            return self.getTypedRuleContext(tucanParser.PContext,0)


        def pa(self):
            return self.getTypedRuleContext(tucanParser.PaContext,0)


        def pb(self):
            return self.getTypedRuleContext(tucanParser.PbContext,0)


        def pd(self):
            return self.getTypedRuleContext(tucanParser.PdContext,0)


        def pm(self):
            return self.getTypedRuleContext(tucanParser.PmContext,0)


        def po(self):
            return self.getTypedRuleContext(tucanParser.PoContext,0)


        def pr(self):
            return self.getTypedRuleContext(tucanParser.PrContext,0)


        def pt(self):
            return self.getTypedRuleContext(tucanParser.PtContext,0)


        def pu(self):
            return self.getTypedRuleContext(tucanParser.PuContext,0)


        def ra(self):
            return self.getTypedRuleContext(tucanParser.RaContext,0)


        def rb(self):
            return self.getTypedRuleContext(tucanParser.RbContext,0)


        def re(self):
            return self.getTypedRuleContext(tucanParser.ReContext,0)


        def rf(self):
            return self.getTypedRuleContext(tucanParser.RfContext,0)


        def rg(self):
            return self.getTypedRuleContext(tucanParser.RgContext,0)


        def rh(self):
            return self.getTypedRuleContext(tucanParser.RhContext,0)


        def rn(self):
            return self.getTypedRuleContext(tucanParser.RnContext,0)


        def ru(self):
            return self.getTypedRuleContext(tucanParser.RuContext,0)


        def s(self):
            return self.getTypedRuleContext(tucanParser.SContext,0)


        def sb(self):
            return self.getTypedRuleContext(tucanParser.SbContext,0)


        def sc(self):
            return self.getTypedRuleContext(tucanParser.ScContext,0)


        def se(self):
            return self.getTypedRuleContext(tucanParser.SeContext,0)


        def sg(self):
            return self.getTypedRuleContext(tucanParser.SgContext,0)


        def si(self):
            return self.getTypedRuleContext(tucanParser.SiContext,0)


        def sm(self):
            return self.getTypedRuleContext(tucanParser.SmContext,0)


        def sn(self):
            return self.getTypedRuleContext(tucanParser.SnContext,0)


        def sr(self):
            return self.getTypedRuleContext(tucanParser.SrContext,0)


        def ta(self):
            return self.getTypedRuleContext(tucanParser.TaContext,0)


        def tb(self):
            return self.getTypedRuleContext(tucanParser.TbContext,0)


        def tc(self):
            return self.getTypedRuleContext(tucanParser.TcContext,0)


        def te(self):
            return self.getTypedRuleContext(tucanParser.TeContext,0)


        def th(self):
            return self.getTypedRuleContext(tucanParser.ThContext,0)


        def ti(self):
            return self.getTypedRuleContext(tucanParser.TiContext,0)


        def tl(self):
            return self.getTypedRuleContext(tucanParser.TlContext,0)


        def tm(self):
            return self.getTypedRuleContext(tucanParser.TmContext,0)


        def ts(self):
            return self.getTypedRuleContext(tucanParser.TsContext,0)


        def u(self):
            return self.getTypedRuleContext(tucanParser.UContext,0)


        def v(self):
            return self.getTypedRuleContext(tucanParser.VContext,0)


        def w(self):
            return self.getTypedRuleContext(tucanParser.WContext,0)


        def xe(self):
            return self.getTypedRuleContext(tucanParser.XeContext,0)


        def y(self):
            return self.getTypedRuleContext(tucanParser.YContext,0)


        def yb(self):
            return self.getTypedRuleContext(tucanParser.YbContext,0)


        def zn(self):
            return self.getTypedRuleContext(tucanParser.ZnContext,0)


        def zr(self):
            return self.getTypedRuleContext(tucanParser.ZrContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_without_carbon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithout_carbon" ):
                listener.enterWithout_carbon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithout_carbon" ):
                listener.exitWithout_carbon(self)




    def without_carbon(self):

        localctx = tucanParser.Without_carbonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_without_carbon)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 640
                self.ac()


            self.state = 644
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 643
                self.ag()


            self.state = 647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 646
                self.al()


            self.state = 650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==96:
                self.state = 649
                self.am()


            self.state = 653
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 652
                self.ar()


            self.state = 656
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 655
                self.as_()


            self.state = 659
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 658
                self.at()


            self.state = 662
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==80:
                self.state = 661
                self.au()


            self.state = 665
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6:
                self.state = 664
                self.b()


            self.state = 668
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 667
                self.ba()


            self.state = 671
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 670
                self.be()


            self.state = 674
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==108:
                self.state = 673
                self.bh()


            self.state = 677
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==84:
                self.state = 676
                self.bi()


            self.state = 680
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98:
                self.state = 679
                self.bk()


            self.state = 683
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==36:
                self.state = 682
                self.br()


            self.state = 686
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21:
                self.state = 685
                self.ca()


            self.state = 689
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 688
                self.cd()


            self.state = 692
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 691
                self.ce()


            self.state = 695
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==99:
                self.state = 694
                self.cf()


            self.state = 698
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 697
                self.cl()


            self.state = 701
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==97:
                self.state = 700
                self.cm()


            self.state = 704
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==113:
                self.state = 703
                self.cn()


            self.state = 707
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==28:
                self.state = 706
                self.co()


            self.state = 710
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==25:
                self.state = 709
                self.cr()


            self.state = 713
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 712
                self.cs()


            self.state = 716
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==30:
                self.state = 715
                self.cu()


            self.state = 719
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==106:
                self.state = 718
                self.db()


            self.state = 722
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 721
                self.ds()


            self.state = 725
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67:
                self.state = 724
                self.dy()


            self.state = 728
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==69:
                self.state = 727
                self.er()


            self.state = 731
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==100:
                self.state = 730
                self.es()


            self.state = 734
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==64:
                self.state = 733
                self.eu()


            self.state = 737
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 736
                self.f()


            self.state = 740
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==27:
                self.state = 739
                self.fe()


            self.state = 743
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==115:
                self.state = 742
                self.fl()


            self.state = 746
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==101:
                self.state = 745
                self.fm()


            self.state = 749
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==88:
                self.state = 748
                self.fr()


            self.state = 752
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 751
                self.ga()


            self.state = 755
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 754
                self.gd()


            self.state = 758
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==33:
                self.state = 757
                self.ge()


            self.state = 761
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 760
                self.h()


            self.state = 764
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 763
                self.he()


            self.state = 767
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73:
                self.state = 766
                self.hf()


            self.state = 770
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 769
                self.hg()


            self.state = 773
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 772
                self.ho()


            self.state = 776
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==109:
                self.state = 775
                self.hs()


            self.state = 779
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==54:
                self.state = 778
                self.i()


            self.state = 782
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 781
                self.in_()


            self.state = 785
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78:
                self.state = 784
                self.ir()


            self.state = 788
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 787
                self.k()


            self.state = 791
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==37:
                self.state = 790
                self.kr()


            self.state = 794
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 793
                self.la()


            self.state = 797
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==4:
                self.state = 796
                self.li()


            self.state = 800
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==104:
                self.state = 799
                self.lr()


            self.state = 803
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==72:
                self.state = 802
                self.lu()


            self.state = 806
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==117:
                self.state = 805
                self.lv()


            self.state = 809
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==116:
                self.state = 808
                self.mc()


            self.state = 812
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==102:
                self.state = 811
                self.md()


            self.state = 815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 814
                self.mg()


            self.state = 818
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 817
                self.mn()


            self.state = 821
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==43:
                self.state = 820
                self.mo()


            self.state = 824
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==110:
                self.state = 823
                self.mt()


            self.state = 827
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 826
                self.n()


            self.state = 830
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 829
                self.na()


            self.state = 833
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42:
                self.state = 832
                self.nb()


            self.state = 836
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==61:
                self.state = 835
                self.nd()


            self.state = 839
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 838
                self.ne()


            self.state = 842
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==114:
                self.state = 841
                self.nh()


            self.state = 845
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==29:
                self.state = 844
                self.ni()


            self.state = 848
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==103:
                self.state = 847
                self.no()


            self.state = 851
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==94:
                self.state = 850
                self.np()


            self.state = 854
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 853
                self.o()


            self.state = 857
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119:
                self.state = 856
                self.og()


            self.state = 860
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 859
                self.os()


            self.state = 863
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 862
                self.p()


            self.state = 866
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 865
                self.pa()


            self.state = 869
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==83:
                self.state = 868
                self.pb()


            self.state = 872
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 871
                self.pd()


            self.state = 875
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 874
                self.pm()


            self.state = 878
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==85:
                self.state = 877
                self.po()


            self.state = 881
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 880
                self.pr()


            self.state = 884
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==79:
                self.state = 883
                self.pt()


            self.state = 887
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==95:
                self.state = 886
                self.pu()


            self.state = 890
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==89:
                self.state = 889
                self.ra()


            self.state = 893
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==38:
                self.state = 892
                self.rb()


            self.state = 896
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==76:
                self.state = 895
                self.re()


            self.state = 899
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==105:
                self.state = 898
                self.rf()


            self.state = 902
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==112:
                self.state = 901
                self.rg()


            self.state = 905
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 904
                self.rh()


            self.state = 908
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==87:
                self.state = 907
                self.rn()


            self.state = 911
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 910
                self.ru()


            self.state = 914
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 913
                self.s()


            self.state = 917
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 916
                self.sb()


            self.state = 920
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 919
                self.sc()


            self.state = 923
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 922
                self.se()


            self.state = 926
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==107:
                self.state = 925
                self.sg()


            self.state = 929
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==15:
                self.state = 928
                self.si()


            self.state = 932
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 931
                self.sm()


            self.state = 935
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51:
                self.state = 934
                self.sn()


            self.state = 938
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==39:
                self.state = 937
                self.sr()


            self.state = 941
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==74:
                self.state = 940
                self.ta()


            self.state = 944
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 943
                self.tb()


            self.state = 947
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==44:
                self.state = 946
                self.tc()


            self.state = 950
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 949
                self.te()


            self.state = 953
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==91:
                self.state = 952
                self.th()


            self.state = 956
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23:
                self.state = 955
                self.ti()


            self.state = 959
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82:
                self.state = 958
                self.tl()


            self.state = 962
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==70:
                self.state = 961
                self.tm()


            self.state = 965
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==118:
                self.state = 964
                self.ts()


            self.state = 968
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==93:
                self.state = 967
                self.u()


            self.state = 971
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24:
                self.state = 970
                self.v()


            self.state = 974
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75:
                self.state = 973
                self.w()


            self.state = 977
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==55:
                self.state = 976
                self.xe()


            self.state = 980
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==40:
                self.state = 979
                self.y()


            self.state = 983
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 982
                self.yb()


            self.state = 986
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==31:
                self.state = 985
                self.zn()


            self.state = 989
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==41:
                self.state = 988
                self.zr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_h

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterH" ):
                listener.enterH(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitH" ):
                listener.exitH(self)




    def h(self):

        localctx = tucanParser.HContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_h)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 991
            self.match(tucanParser.T__1)
            self.state = 993
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 992
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_he

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHe" ):
                listener.enterHe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHe" ):
                listener.exitHe(self)




    def he(self):

        localctx = tucanParser.HeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_he)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 995
            self.match(tucanParser.T__2)
            self.state = 997
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 996
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_li

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLi" ):
                listener.enterLi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLi" ):
                listener.exitLi(self)




    def li(self):

        localctx = tucanParser.LiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_li)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 999
            self.match(tucanParser.T__3)
            self.state = 1001
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1000
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_be

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBe" ):
                listener.enterBe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBe" ):
                listener.exitBe(self)




    def be(self):

        localctx = tucanParser.BeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_be)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1003
            self.match(tucanParser.T__4)
            self.state = 1005
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1004
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_b

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterB" ):
                listener.enterB(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitB" ):
                listener.exitB(self)




    def b(self):

        localctx = tucanParser.BContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_b)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1007
            self.match(tucanParser.T__5)
            self.state = 1009
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1008
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_c

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterC" ):
                listener.enterC(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitC" ):
                listener.exitC(self)




    def c(self):

        localctx = tucanParser.CContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_c)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1011
            self.match(tucanParser.T__6)
            self.state = 1013
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1012
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_n

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterN" ):
                listener.enterN(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitN" ):
                listener.exitN(self)




    def n(self):

        localctx = tucanParser.NContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_n)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1015
            self.match(tucanParser.T__7)
            self.state = 1017
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1016
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_o

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterO" ):
                listener.enterO(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitO" ):
                listener.exitO(self)




    def o(self):

        localctx = tucanParser.OContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_o)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1019
            self.match(tucanParser.T__8)
            self.state = 1021
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1020
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_f

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterF" ):
                listener.enterF(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitF" ):
                listener.exitF(self)




    def f(self):

        localctx = tucanParser.FContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_f)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1023
            self.match(tucanParser.T__9)
            self.state = 1025
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1024
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ne

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNe" ):
                listener.enterNe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNe" ):
                listener.exitNe(self)




    def ne(self):

        localctx = tucanParser.NeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_ne)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1027
            self.match(tucanParser.T__10)
            self.state = 1029
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1028
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_na

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNa" ):
                listener.enterNa(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNa" ):
                listener.exitNa(self)




    def na(self):

        localctx = tucanParser.NaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_na)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1031
            self.match(tucanParser.T__11)
            self.state = 1033
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1032
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_mg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMg" ):
                listener.enterMg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMg" ):
                listener.exitMg(self)




    def mg(self):

        localctx = tucanParser.MgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_mg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1035
            self.match(tucanParser.T__12)
            self.state = 1037
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1036
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_al

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAl" ):
                listener.enterAl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAl" ):
                listener.exitAl(self)




    def al(self):

        localctx = tucanParser.AlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_al)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1039
            self.match(tucanParser.T__13)
            self.state = 1041
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1040
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_si

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSi" ):
                listener.enterSi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSi" ):
                listener.exitSi(self)




    def si(self):

        localctx = tucanParser.SiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_si)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1043
            self.match(tucanParser.T__14)
            self.state = 1045
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1044
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_p

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterP" ):
                listener.enterP(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitP" ):
                listener.exitP(self)




    def p(self):

        localctx = tucanParser.PContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1047
            self.match(tucanParser.T__15)
            self.state = 1049
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1048
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_s

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS" ):
                listener.enterS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS" ):
                listener.exitS(self)




    def s(self):

        localctx = tucanParser.SContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_s)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1051
            self.match(tucanParser.T__16)
            self.state = 1053
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1052
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_cl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCl" ):
                listener.enterCl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCl" ):
                listener.exitCl(self)




    def cl(self):

        localctx = tucanParser.ClContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_cl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1055
            self.match(tucanParser.T__17)
            self.state = 1057
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1056
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAr" ):
                listener.enterAr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAr" ):
                listener.exitAr(self)




    def ar(self):

        localctx = tucanParser.ArContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_ar)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1059
            self.match(tucanParser.T__18)
            self.state = 1061
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1060
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_k

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterK" ):
                listener.enterK(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitK" ):
                listener.exitK(self)




    def k(self):

        localctx = tucanParser.KContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_k)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1063
            self.match(tucanParser.T__19)
            self.state = 1065
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1064
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ca

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCa" ):
                listener.enterCa(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCa" ):
                listener.exitCa(self)




    def ca(self):

        localctx = tucanParser.CaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_ca)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1067
            self.match(tucanParser.T__20)
            self.state = 1069
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1068
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_sc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSc" ):
                listener.enterSc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSc" ):
                listener.exitSc(self)




    def sc(self):

        localctx = tucanParser.ScContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_sc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1071
            self.match(tucanParser.T__21)
            self.state = 1073
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1072
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ti

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTi" ):
                listener.enterTi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTi" ):
                listener.exitTi(self)




    def ti(self):

        localctx = tucanParser.TiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_ti)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1075
            self.match(tucanParser.T__22)
            self.state = 1077
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1076
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_v

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterV" ):
                listener.enterV(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitV" ):
                listener.exitV(self)




    def v(self):

        localctx = tucanParser.VContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_v)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1079
            self.match(tucanParser.T__23)
            self.state = 1081
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1080
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_cr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCr" ):
                listener.enterCr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCr" ):
                listener.exitCr(self)




    def cr(self):

        localctx = tucanParser.CrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_cr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1083
            self.match(tucanParser.T__24)
            self.state = 1085
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1084
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_mn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMn" ):
                listener.enterMn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMn" ):
                listener.exitMn(self)




    def mn(self):

        localctx = tucanParser.MnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_mn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1087
            self.match(tucanParser.T__25)
            self.state = 1089
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1088
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_fe

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFe" ):
                listener.enterFe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFe" ):
                listener.exitFe(self)




    def fe(self):

        localctx = tucanParser.FeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_fe)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1091
            self.match(tucanParser.T__26)
            self.state = 1093
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1092
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_co

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCo" ):
                listener.enterCo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCo" ):
                listener.exitCo(self)




    def co(self):

        localctx = tucanParser.CoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_co)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1095
            self.match(tucanParser.T__27)
            self.state = 1097
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1096
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ni

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNi" ):
                listener.enterNi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNi" ):
                listener.exitNi(self)




    def ni(self):

        localctx = tucanParser.NiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_ni)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1099
            self.match(tucanParser.T__28)
            self.state = 1101
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1100
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CuContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_cu

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCu" ):
                listener.enterCu(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCu" ):
                listener.exitCu(self)




    def cu(self):

        localctx = tucanParser.CuContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_cu)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1103
            self.match(tucanParser.T__29)
            self.state = 1105
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1104
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ZnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_zn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterZn" ):
                listener.enterZn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitZn" ):
                listener.exitZn(self)




    def zn(self):

        localctx = tucanParser.ZnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_zn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1107
            self.match(tucanParser.T__30)
            self.state = 1109
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1108
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ga

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGa" ):
                listener.enterGa(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGa" ):
                listener.exitGa(self)




    def ga(self):

        localctx = tucanParser.GaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_ga)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1111
            self.match(tucanParser.T__31)
            self.state = 1113
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1112
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ge

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGe" ):
                listener.enterGe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGe" ):
                listener.exitGe(self)




    def ge(self):

        localctx = tucanParser.GeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_ge)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1115
            self.match(tucanParser.T__32)
            self.state = 1117
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1116
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_as

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAs" ):
                listener.enterAs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAs" ):
                listener.exitAs(self)




    def as_(self):

        localctx = tucanParser.AsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_as)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1119
            self.match(tucanParser.T__33)
            self.state = 1121
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1120
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_se

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSe" ):
                listener.enterSe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSe" ):
                listener.exitSe(self)




    def se(self):

        localctx = tucanParser.SeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_se)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1123
            self.match(tucanParser.T__34)
            self.state = 1125
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1124
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_br

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBr" ):
                listener.enterBr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBr" ):
                listener.exitBr(self)




    def br(self):

        localctx = tucanParser.BrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_br)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1127
            self.match(tucanParser.T__35)
            self.state = 1129
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1128
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_kr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKr" ):
                listener.enterKr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKr" ):
                listener.exitKr(self)




    def kr(self):

        localctx = tucanParser.KrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_kr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1131
            self.match(tucanParser.T__36)
            self.state = 1133
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1132
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RbContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_rb

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRb" ):
                listener.enterRb(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRb" ):
                listener.exitRb(self)




    def rb(self):

        localctx = tucanParser.RbContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_rb)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1135
            self.match(tucanParser.T__37)
            self.state = 1137
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1136
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_sr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSr" ):
                listener.enterSr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSr" ):
                listener.exitSr(self)




    def sr(self):

        localctx = tucanParser.SrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_sr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1139
            self.match(tucanParser.T__38)
            self.state = 1141
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1140
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_y

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterY" ):
                listener.enterY(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitY" ):
                listener.exitY(self)




    def y(self):

        localctx = tucanParser.YContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_y)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1143
            self.match(tucanParser.T__39)
            self.state = 1145
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1144
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ZrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_zr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterZr" ):
                listener.enterZr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitZr" ):
                listener.exitZr(self)




    def zr(self):

        localctx = tucanParser.ZrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_zr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1147
            self.match(tucanParser.T__40)
            self.state = 1149
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1148
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NbContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_nb

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNb" ):
                listener.enterNb(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNb" ):
                listener.exitNb(self)




    def nb(self):

        localctx = tucanParser.NbContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_nb)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1151
            self.match(tucanParser.T__41)
            self.state = 1153
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1152
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_mo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMo" ):
                listener.enterMo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMo" ):
                listener.exitMo(self)




    def mo(self):

        localctx = tucanParser.MoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_mo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1155
            self.match(tucanParser.T__42)
            self.state = 1157
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1156
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_tc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTc" ):
                listener.enterTc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTc" ):
                listener.exitTc(self)




    def tc(self):

        localctx = tucanParser.TcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_tc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1159
            self.match(tucanParser.T__43)
            self.state = 1161
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1160
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ru

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRu" ):
                listener.enterRu(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRu" ):
                listener.exitRu(self)




    def ru(self):

        localctx = tucanParser.RuContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_ru)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1163
            self.match(tucanParser.T__44)
            self.state = 1165
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1164
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RhContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_rh

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRh" ):
                listener.enterRh(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRh" ):
                listener.exitRh(self)




    def rh(self):

        localctx = tucanParser.RhContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_rh)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1167
            self.match(tucanParser.T__45)
            self.state = 1169
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1168
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_pd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPd" ):
                listener.enterPd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPd" ):
                listener.exitPd(self)




    def pd(self):

        localctx = tucanParser.PdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_pd)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1171
            self.match(tucanParser.T__46)
            self.state = 1173
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1172
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAg" ):
                listener.enterAg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAg" ):
                listener.exitAg(self)




    def ag(self):

        localctx = tucanParser.AgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_ag)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1175
            self.match(tucanParser.T__47)
            self.state = 1177
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1176
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_cd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCd" ):
                listener.enterCd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCd" ):
                listener.exitCd(self)




    def cd(self):

        localctx = tucanParser.CdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_cd)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1179
            self.match(tucanParser.T__48)
            self.state = 1181
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1180
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_in

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIn" ):
                listener.enterIn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIn" ):
                listener.exitIn(self)




    def in_(self):

        localctx = tucanParser.InContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_in)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1183
            self.match(tucanParser.T__49)
            self.state = 1185
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1184
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_sn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSn" ):
                listener.enterSn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSn" ):
                listener.exitSn(self)




    def sn(self):

        localctx = tucanParser.SnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_sn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1187
            self.match(tucanParser.T__50)
            self.state = 1189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1188
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SbContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_sb

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSb" ):
                listener.enterSb(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSb" ):
                listener.exitSb(self)




    def sb(self):

        localctx = tucanParser.SbContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_sb)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1191
            self.match(tucanParser.T__51)
            self.state = 1193
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1192
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_te

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTe" ):
                listener.enterTe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTe" ):
                listener.exitTe(self)




    def te(self):

        localctx = tucanParser.TeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_te)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1195
            self.match(tucanParser.T__52)
            self.state = 1197
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1196
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_i

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterI" ):
                listener.enterI(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitI" ):
                listener.exitI(self)




    def i(self):

        localctx = tucanParser.IContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_i)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1199
            self.match(tucanParser.T__53)
            self.state = 1201
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1200
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_xe

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXe" ):
                listener.enterXe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXe" ):
                listener.exitXe(self)




    def xe(self):

        localctx = tucanParser.XeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_xe)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1203
            self.match(tucanParser.T__54)
            self.state = 1205
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1204
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_cs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCs" ):
                listener.enterCs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCs" ):
                listener.exitCs(self)




    def cs(self):

        localctx = tucanParser.CsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_cs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1207
            self.match(tucanParser.T__55)
            self.state = 1209
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1208
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ba

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBa" ):
                listener.enterBa(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBa" ):
                listener.exitBa(self)




    def ba(self):

        localctx = tucanParser.BaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_ba)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1211
            self.match(tucanParser.T__56)
            self.state = 1213
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1212
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_la

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLa" ):
                listener.enterLa(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLa" ):
                listener.exitLa(self)




    def la(self):

        localctx = tucanParser.LaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_la)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1215
            self.match(tucanParser.T__57)
            self.state = 1217
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1216
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ce

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCe" ):
                listener.enterCe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCe" ):
                listener.exitCe(self)




    def ce(self):

        localctx = tucanParser.CeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_ce)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1219
            self.match(tucanParser.T__58)
            self.state = 1221
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1220
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_pr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPr" ):
                listener.enterPr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPr" ):
                listener.exitPr(self)




    def pr(self):

        localctx = tucanParser.PrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_pr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1223
            self.match(tucanParser.T__59)
            self.state = 1225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1224
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_nd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNd" ):
                listener.enterNd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNd" ):
                listener.exitNd(self)




    def nd(self):

        localctx = tucanParser.NdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_nd)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1227
            self.match(tucanParser.T__60)
            self.state = 1229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1228
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_pm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPm" ):
                listener.enterPm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPm" ):
                listener.exitPm(self)




    def pm(self):

        localctx = tucanParser.PmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_pm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1231
            self.match(tucanParser.T__61)
            self.state = 1233
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1232
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_sm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSm" ):
                listener.enterSm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSm" ):
                listener.exitSm(self)




    def sm(self):

        localctx = tucanParser.SmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_sm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1235
            self.match(tucanParser.T__62)
            self.state = 1237
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1236
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EuContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_eu

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEu" ):
                listener.enterEu(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEu" ):
                listener.exitEu(self)




    def eu(self):

        localctx = tucanParser.EuContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_eu)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1239
            self.match(tucanParser.T__63)
            self.state = 1241
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1240
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_gd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGd" ):
                listener.enterGd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGd" ):
                listener.exitGd(self)




    def gd(self):

        localctx = tucanParser.GdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_gd)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1243
            self.match(tucanParser.T__64)
            self.state = 1245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1244
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TbContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_tb

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTb" ):
                listener.enterTb(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTb" ):
                listener.exitTb(self)




    def tb(self):

        localctx = tucanParser.TbContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_tb)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1247
            self.match(tucanParser.T__65)
            self.state = 1249
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1248
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_dy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDy" ):
                listener.enterDy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDy" ):
                listener.exitDy(self)




    def dy(self):

        localctx = tucanParser.DyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_dy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1251
            self.match(tucanParser.T__66)
            self.state = 1253
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1252
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ho

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHo" ):
                listener.enterHo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHo" ):
                listener.exitHo(self)




    def ho(self):

        localctx = tucanParser.HoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_ho)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1255
            self.match(tucanParser.T__67)
            self.state = 1257
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1256
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_er

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEr" ):
                listener.enterEr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEr" ):
                listener.exitEr(self)




    def er(self):

        localctx = tucanParser.ErContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_er)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1259
            self.match(tucanParser.T__68)
            self.state = 1261
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1260
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_tm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTm" ):
                listener.enterTm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTm" ):
                listener.exitTm(self)




    def tm(self):

        localctx = tucanParser.TmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_tm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1263
            self.match(tucanParser.T__69)
            self.state = 1265
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1264
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YbContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_yb

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYb" ):
                listener.enterYb(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYb" ):
                listener.exitYb(self)




    def yb(self):

        localctx = tucanParser.YbContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_yb)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1267
            self.match(tucanParser.T__70)
            self.state = 1269
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1268
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LuContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_lu

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLu" ):
                listener.enterLu(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLu" ):
                listener.exitLu(self)




    def lu(self):

        localctx = tucanParser.LuContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_lu)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1271
            self.match(tucanParser.T__71)
            self.state = 1273
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1272
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_hf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHf" ):
                listener.enterHf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHf" ):
                listener.exitHf(self)




    def hf(self):

        localctx = tucanParser.HfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_hf)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1275
            self.match(tucanParser.T__72)
            self.state = 1277
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1276
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ta

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTa" ):
                listener.enterTa(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTa" ):
                listener.exitTa(self)




    def ta(self):

        localctx = tucanParser.TaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_ta)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1279
            self.match(tucanParser.T__73)
            self.state = 1281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1280
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_w

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterW" ):
                listener.enterW(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitW" ):
                listener.exitW(self)




    def w(self):

        localctx = tucanParser.WContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_w)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1283
            self.match(tucanParser.T__74)
            self.state = 1285
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1284
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_re

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRe" ):
                listener.enterRe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRe" ):
                listener.exitRe(self)




    def re(self):

        localctx = tucanParser.ReContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_re)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1287
            self.match(tucanParser.T__75)
            self.state = 1289
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1288
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_os

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOs" ):
                listener.enterOs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOs" ):
                listener.exitOs(self)




    def os(self):

        localctx = tucanParser.OsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_os)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1291
            self.match(tucanParser.T__76)
            self.state = 1293
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1292
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ir

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIr" ):
                listener.enterIr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIr" ):
                listener.exitIr(self)




    def ir(self):

        localctx = tucanParser.IrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_ir)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1295
            self.match(tucanParser.T__77)
            self.state = 1297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1296
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_pt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPt" ):
                listener.enterPt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPt" ):
                listener.exitPt(self)




    def pt(self):

        localctx = tucanParser.PtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_pt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1299
            self.match(tucanParser.T__78)
            self.state = 1301
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1300
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_au

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAu" ):
                listener.enterAu(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAu" ):
                listener.exitAu(self)




    def au(self):

        localctx = tucanParser.AuContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_au)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1303
            self.match(tucanParser.T__79)
            self.state = 1305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1304
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_hg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHg" ):
                listener.enterHg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHg" ):
                listener.exitHg(self)




    def hg(self):

        localctx = tucanParser.HgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_hg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1307
            self.match(tucanParser.T__80)
            self.state = 1309
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1308
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_tl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTl" ):
                listener.enterTl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTl" ):
                listener.exitTl(self)




    def tl(self):

        localctx = tucanParser.TlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_tl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1311
            self.match(tucanParser.T__81)
            self.state = 1313
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1312
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PbContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_pb

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPb" ):
                listener.enterPb(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPb" ):
                listener.exitPb(self)




    def pb(self):

        localctx = tucanParser.PbContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_pb)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1315
            self.match(tucanParser.T__82)
            self.state = 1317
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1316
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_bi

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBi" ):
                listener.enterBi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBi" ):
                listener.exitBi(self)




    def bi(self):

        localctx = tucanParser.BiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_bi)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1319
            self.match(tucanParser.T__83)
            self.state = 1321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1320
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_po

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPo" ):
                listener.enterPo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPo" ):
                listener.exitPo(self)




    def po(self):

        localctx = tucanParser.PoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_po)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1323
            self.match(tucanParser.T__84)
            self.state = 1325
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1324
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_at

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAt" ):
                listener.enterAt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAt" ):
                listener.exitAt(self)




    def at(self):

        localctx = tucanParser.AtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_at)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1327
            self.match(tucanParser.T__85)
            self.state = 1329
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1328
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_rn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRn" ):
                listener.enterRn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRn" ):
                listener.exitRn(self)




    def rn(self):

        localctx = tucanParser.RnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_rn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1331
            self.match(tucanParser.T__86)
            self.state = 1333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1332
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_fr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFr" ):
                listener.enterFr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFr" ):
                listener.exitFr(self)




    def fr(self):

        localctx = tucanParser.FrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_fr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1335
            self.match(tucanParser.T__87)
            self.state = 1337
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1336
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ra

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRa" ):
                listener.enterRa(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRa" ):
                listener.exitRa(self)




    def ra(self):

        localctx = tucanParser.RaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_ra)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1339
            self.match(tucanParser.T__88)
            self.state = 1341
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1340
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ac

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAc" ):
                listener.enterAc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAc" ):
                listener.exitAc(self)




    def ac(self):

        localctx = tucanParser.AcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_ac)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1343
            self.match(tucanParser.T__89)
            self.state = 1345
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1344
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_th

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTh" ):
                listener.enterTh(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTh" ):
                listener.exitTh(self)




    def th(self):

        localctx = tucanParser.ThContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_th)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1347
            self.match(tucanParser.T__90)
            self.state = 1349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1348
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_pa

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPa" ):
                listener.enterPa(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPa" ):
                listener.exitPa(self)




    def pa(self):

        localctx = tucanParser.PaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_pa)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1351
            self.match(tucanParser.T__91)
            self.state = 1353
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1352
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_u

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterU" ):
                listener.enterU(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitU" ):
                listener.exitU(self)




    def u(self):

        localctx = tucanParser.UContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_u)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1355
            self.match(tucanParser.T__92)
            self.state = 1357
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1356
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_np

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNp" ):
                listener.enterNp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNp" ):
                listener.exitNp(self)




    def np(self):

        localctx = tucanParser.NpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_np)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1359
            self.match(tucanParser.T__93)
            self.state = 1361
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1360
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PuContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_pu

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPu" ):
                listener.enterPu(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPu" ):
                listener.exitPu(self)




    def pu(self):

        localctx = tucanParser.PuContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_pu)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1363
            self.match(tucanParser.T__94)
            self.state = 1365
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1364
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_am

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAm" ):
                listener.enterAm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAm" ):
                listener.exitAm(self)




    def am(self):

        localctx = tucanParser.AmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_am)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1367
            self.match(tucanParser.T__95)
            self.state = 1369
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1368
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_cm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCm" ):
                listener.enterCm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCm" ):
                listener.exitCm(self)




    def cm(self):

        localctx = tucanParser.CmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_cm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1371
            self.match(tucanParser.T__96)
            self.state = 1373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1372
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_bk

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBk" ):
                listener.enterBk(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBk" ):
                listener.exitBk(self)




    def bk(self):

        localctx = tucanParser.BkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_bk)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1375
            self.match(tucanParser.T__97)
            self.state = 1377
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1376
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_cf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCf" ):
                listener.enterCf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCf" ):
                listener.exitCf(self)




    def cf(self):

        localctx = tucanParser.CfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_cf)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1379
            self.match(tucanParser.T__98)
            self.state = 1381
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1380
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_es

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEs" ):
                listener.enterEs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEs" ):
                listener.exitEs(self)




    def es(self):

        localctx = tucanParser.EsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_es)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1383
            self.match(tucanParser.T__99)
            self.state = 1385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1384
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_fm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFm" ):
                listener.enterFm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFm" ):
                listener.exitFm(self)




    def fm(self):

        localctx = tucanParser.FmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_fm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1387
            self.match(tucanParser.T__100)
            self.state = 1389
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1388
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_md

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMd" ):
                listener.enterMd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMd" ):
                listener.exitMd(self)




    def md(self):

        localctx = tucanParser.MdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_md)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1391
            self.match(tucanParser.T__101)
            self.state = 1393
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1392
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_no

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNo" ):
                listener.enterNo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNo" ):
                listener.exitNo(self)




    def no(self):

        localctx = tucanParser.NoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_no)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1395
            self.match(tucanParser.T__102)
            self.state = 1397
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1396
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_lr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLr" ):
                listener.enterLr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLr" ):
                listener.exitLr(self)




    def lr(self):

        localctx = tucanParser.LrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_lr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1399
            self.match(tucanParser.T__103)
            self.state = 1401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1400
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_rf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRf" ):
                listener.enterRf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRf" ):
                listener.exitRf(self)




    def rf(self):

        localctx = tucanParser.RfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_rf)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1403
            self.match(tucanParser.T__104)
            self.state = 1405
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1404
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DbContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_db

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDb" ):
                listener.enterDb(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDb" ):
                listener.exitDb(self)




    def db(self):

        localctx = tucanParser.DbContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_db)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1407
            self.match(tucanParser.T__105)
            self.state = 1409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1408
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_sg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSg" ):
                listener.enterSg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSg" ):
                listener.exitSg(self)




    def sg(self):

        localctx = tucanParser.SgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_sg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1411
            self.match(tucanParser.T__106)
            self.state = 1413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1412
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BhContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_bh

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBh" ):
                listener.enterBh(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBh" ):
                listener.exitBh(self)




    def bh(self):

        localctx = tucanParser.BhContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_bh)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1415
            self.match(tucanParser.T__107)
            self.state = 1417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1416
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_hs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHs" ):
                listener.enterHs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHs" ):
                listener.exitHs(self)




    def hs(self):

        localctx = tucanParser.HsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_hs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1419
            self.match(tucanParser.T__108)
            self.state = 1421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1420
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_mt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMt" ):
                listener.enterMt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMt" ):
                listener.exitMt(self)




    def mt(self):

        localctx = tucanParser.MtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_mt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1423
            self.match(tucanParser.T__109)
            self.state = 1425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1424
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ds

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDs" ):
                listener.enterDs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDs" ):
                listener.exitDs(self)




    def ds(self):

        localctx = tucanParser.DsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_ds)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1427
            self.match(tucanParser.T__110)
            self.state = 1429
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1428
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_rg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRg" ):
                listener.enterRg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRg" ):
                listener.exitRg(self)




    def rg(self):

        localctx = tucanParser.RgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_rg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1431
            self.match(tucanParser.T__111)
            self.state = 1433
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1432
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_cn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCn" ):
                listener.enterCn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCn" ):
                listener.exitCn(self)




    def cn(self):

        localctx = tucanParser.CnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_cn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1435
            self.match(tucanParser.T__112)
            self.state = 1437
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1436
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NhContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_nh

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNh" ):
                listener.enterNh(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNh" ):
                listener.exitNh(self)




    def nh(self):

        localctx = tucanParser.NhContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_nh)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1439
            self.match(tucanParser.T__113)
            self.state = 1441
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1440
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_fl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFl" ):
                listener.enterFl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFl" ):
                listener.exitFl(self)




    def fl(self):

        localctx = tucanParser.FlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_fl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1443
            self.match(tucanParser.T__114)
            self.state = 1445
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1444
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class McContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_mc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMc" ):
                listener.enterMc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMc" ):
                listener.exitMc(self)




    def mc(self):

        localctx = tucanParser.McContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_mc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1447
            self.match(tucanParser.T__115)
            self.state = 1449
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1448
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LvContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_lv

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLv" ):
                listener.enterLv(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLv" ):
                listener.exitLv(self)




    def lv(self):

        localctx = tucanParser.LvContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_lv)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1451
            self.match(tucanParser.T__116)
            self.state = 1453
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1452
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_ts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTs" ):
                listener.enterTs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTs" ):
                listener.exitTs(self)




    def ts(self):

        localctx = tucanParser.TsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_ts)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1455
            self.match(tucanParser.T__117)
            self.state = 1457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1456
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def count(self):
            return self.getTypedRuleContext(tucanParser.CountContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_og

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOg" ):
                listener.enterOg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOg" ):
                listener.exitOg(self)




    def og(self):

        localctx = tucanParser.OgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_og)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1459
            self.match(tucanParser.T__118)
            self.state = 1461
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0:
                self.state = 1460
                self.count()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CountContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def gt_one(self):
            return self.getTypedRuleContext(tucanParser.Gt_oneContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_count

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCount" ):
                listener.enterCount(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCount" ):
                listener.exitCount(self)




    def count(self):

        localctx = tucanParser.CountContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_count)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1463
            self.gt_one()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tuples_startContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tuples(self):
            return self.getTypedRuleContext(tucanParser.TuplesContext,0)


        def EOF(self):
            return self.getToken(tucanParser.EOF, 0)

        def getRuleIndex(self):
            return tucanParser.RULE_tuples_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuples_start" ):
                listener.enterTuples_start(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuples_start" ):
                listener.exitTuples_start(self)




    def tuples_start(self):

        localctx = tucanParser.Tuples_startContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_tuples_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1465
            self.tuples()
            self.state = 1466
            self.match(tucanParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TuplesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tuple_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tucanParser.TupleContext)
            else:
                return self.getTypedRuleContext(tucanParser.TupleContext,i)


        def getRuleIndex(self):
            return tucanParser.RULE_tuples

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuples" ):
                listener.enterTuples(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuples" ):
                listener.exitTuples(self)




    def tuples(self):

        localctx = tucanParser.TuplesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_tuples)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1471
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==120:
                self.state = 1468
                self.tuple_()
                self.state = 1473
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def node_index(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tucanParser.Node_indexContext)
            else:
                return self.getTypedRuleContext(tucanParser.Node_indexContext,i)


        def getRuleIndex(self):
            return tucanParser.RULE_tuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple" ):
                listener.enterTuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple" ):
                listener.exitTuple(self)




    def tuple_(self):

        localctx = tucanParser.TupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_tuple)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1474
            self.match(tucanParser.T__119)
            self.state = 1475
            self.node_index()
            self.state = 1476
            self.match(tucanParser.T__120)
            self.state = 1477
            self.node_index()
            self.state = 1478
            self.match(tucanParser.T__121)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Node_indexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def gte_one(self):
            return self.getTypedRuleContext(tucanParser.Gte_oneContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_node_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNode_index" ):
                listener.enterNode_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNode_index" ):
                listener.exitNode_index(self)




    def node_index(self):

        localctx = tucanParser.Node_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_node_index)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1480
            self.gte_one()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Node_attributes_startContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def node_attributes(self):
            return self.getTypedRuleContext(tucanParser.Node_attributesContext,0)


        def EOF(self):
            return self.getToken(tucanParser.EOF, 0)

        def getRuleIndex(self):
            return tucanParser.RULE_node_attributes_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNode_attributes_start" ):
                listener.enterNode_attributes_start(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNode_attributes_start" ):
                listener.exitNode_attributes_start(self)




    def node_attributes_start(self):

        localctx = tucanParser.Node_attributes_startContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_node_attributes_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1482
            self.node_attributes()
            self.state = 1483
            self.match(tucanParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Node_attributesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def node_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tucanParser.Node_attributeContext)
            else:
                return self.getTypedRuleContext(tucanParser.Node_attributeContext,i)


        def getRuleIndex(self):
            return tucanParser.RULE_node_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNode_attributes" ):
                listener.enterNode_attributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNode_attributes" ):
                listener.exitNode_attributes(self)




    def node_attributes(self):

        localctx = tucanParser.Node_attributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_node_attributes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1488
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==120:
                self.state = 1485
                self.node_attribute()
                self.state = 1490
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Node_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def node_index(self):
            return self.getTypedRuleContext(tucanParser.Node_indexContext,0)


        def node_property(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tucanParser.Node_propertyContext)
            else:
                return self.getTypedRuleContext(tucanParser.Node_propertyContext,i)


        def getRuleIndex(self):
            return tucanParser.RULE_node_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNode_attribute" ):
                listener.enterNode_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNode_attribute" ):
                listener.exitNode_attribute(self)




    def node_attribute(self):

        localctx = tucanParser.Node_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_node_attribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1491
            self.match(tucanParser.T__119)
            self.state = 1492
            self.node_index()
            self.state = 1493
            self.match(tucanParser.T__122)
            self.state = 1494
            self.node_property()
            self.state = 1499
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==124:
                self.state = 1495
                self.match(tucanParser.T__123)
                self.state = 1496
                self.node_property()
                self.state = 1501
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1502
            self.match(tucanParser.T__121)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Node_propertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def node_property_key(self):
            return self.getTypedRuleContext(tucanParser.Node_property_keyContext,0)


        def node_property_value(self):
            return self.getTypedRuleContext(tucanParser.Node_property_valueContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_node_property

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNode_property" ):
                listener.enterNode_property(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNode_property" ):
                listener.exitNode_property(self)




    def node_property(self):

        localctx = tucanParser.Node_propertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_node_property)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1504
            self.node_property_key()
            self.state = 1505
            self.match(tucanParser.T__124)
            self.state = 1506
            self.node_property_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Node_property_keyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tucanParser.RULE_node_property_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNode_property_key" ):
                listener.enterNode_property_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNode_property_key" ):
                listener.exitNode_property_key(self)




    def node_property_key(self):

        localctx = tucanParser.Node_property_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_node_property_key)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1508
            _la = self._input.LA(1)
            if not(_la==126 or _la==127):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Node_property_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def gte_one(self):
            return self.getTypedRuleContext(tucanParser.Gte_oneContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_node_property_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNode_property_value" ):
                listener.enterNode_property_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNode_property_value" ):
                listener.exitNode_property_value(self)




    def node_property_value(self):

        localctx = tucanParser.Node_property_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_node_property_value)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1510
            self.gte_one()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Gte_oneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def gt_one(self):
            return self.getTypedRuleContext(tucanParser.Gt_oneContext,0)


        def getRuleIndex(self):
            return tucanParser.RULE_gte_one

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGte_one" ):
                listener.enterGte_one(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGte_one" ):
                listener.exitGte_one(self)




    def gte_one(self):

        localctx = tucanParser.Gte_oneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_gte_one)
        try:
            self.state = 1514
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [128]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1512
                self.match(tucanParser.T__127)
                pass
            elif token in [129, 130, 131, 132, 133, 134, 135, 136, 137]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1513
                self.gt_one()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Gt_oneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GREATER_THAN_NINE(self):
            return self.getToken(tucanParser.GREATER_THAN_NINE, 0)

        def getRuleIndex(self):
            return tucanParser.RULE_gt_one

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGt_one" ):
                listener.enterGt_one(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGt_one" ):
                listener.exitGt_one(self)




    def gt_one(self):

        localctx = tucanParser.Gt_oneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_gt_one)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1516
            _la = self._input.LA(1)
            if not((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 511) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





